Title,Content,URL
Welcome to Pine Script™v6,"Pine Script™ isTradingView’s programming
language. It allows traders to create their own trading tools and run them on
our servers. We designed Pine Script™ as a lightweight, yet powerful, language
for developing indicators and strategies that you can then backtest. Most of
TradingView’s built-in indicators are written in Pine Script™, and our thriving
community of Pine Script™ programmers has published more than 100,000Community Scripts.",https://www.tradingview.com/pine-script-docs/welcome
Requirements,"It’s our explicit goal to keep Pine Script™ accessible and easy to understand
for the broadest possible audience. Pine Script™ is cloud-based and therefore
different from client-side programming languages. While we likely won’t develop
Pine Script™ into a full-fledged language, we do constantly improve it and are
always happy to consider requests for new features.",https://www.tradingview.com/pine-script-docs/welcome
Requirements,"Because each script uses computational resources in the cloud, we must impose
limits in order to share these resources fairly among our users. We strive to
set as few limits as possible, but will of course have to implement as many as
needed for the platform to run smoothly. Limitations apply to the amount of data
requested from additional symbols, execution time, memory usage and script size.",https://www.tradingview.com/pine-script-docs/welcome
Requirements,Next,https://www.tradingview.com/pine-script-docs/welcome
Introduction,"Welcome to the Pine Script™v6 User
Manual,
which will accompany you in your journey to learn to program your own
trading tools in Pine Script™. Welcome also to the very active community
of Pine Script™ programmers on TradingView.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Introduction,"In this page, we present a step-by-step approach that you can follow to
gradually become more familiar with indicators and strategies (also
calledscripts) written in the Pine Script™ programming language onTradingView. We will get you started on
your journey to:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Introduction,"If you are already familiar with the use of Pine scripts on TradingView
and are now ready to learn how to write your own, then jump to theWriting scriptssection of this page.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Introduction,"If you are new to our platform, then please read on!",https://www.tradingview.com/pine-script-docs/primer/first-steps
Usingscripts,"If you are interested in using technical indicators or strategies on
TradingView, you can first start exploring the thousands of indicators
already available on our platform. You can access existing indicators on
the platform in two different ways:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Usingscripts,"If you can find the tools you need already written for you, it can be a
good way to get started and gradually become proficient as a script
user, until you are ready to start your programming journey in Pine
Script™.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Loading scripts from thechart,"To explore and load scripts from your chart, use the “Indicators, Metrics &
Strategies” button:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Loading scripts from thechart,,https://www.tradingview.com/pine-script-docs/primer/first-steps
Loading scripts from thechart,"The dialog box presents different categories of scripts in its left
pane:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Loading scripts from thechart,"Here, the section containing the TradingView built-ins is selected:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Loading scripts from thechart,,https://www.tradingview.com/pine-script-docs/primer/first-steps
Loading scripts from thechart,"When you click on one of the indicators or strategies (the ones marked with a symbol with two arrows), it loads on your chart.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Browsing CommunityScripts,"FromTradingView’s homepage, you can
bring up the Community Scripts stream from the “Community” menu. Here,
we are pointing to the “Editors’ Picks” section, but there are many
other categories you can choose from:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Browsing CommunityScripts,,https://www.tradingview.com/pine-script-docs/primer/first-steps
Browsing CommunityScripts,"You can also search for scripts using the homepage’s “Search” field,
and filter scripts using different criteria. The Help Center has a page
explaining thedifferent types of
scriptsthat
are available.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Browsing CommunityScripts,"The scripts stream shows scriptwidgets, i.e., placeholders showing a
miniature view of each publication’s chart and description, and its
author. By clicking on it you will open thescript’s page, where you
can see the script on a chart, read the author’s description, like the
script, leave comments or read the script’s source code if it was
published open-source.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Browsing CommunityScripts,"Once you find an interesting script in the Community Scripts, follow the
instructions in the Help Center toload it on your
chart.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Changing scriptsettings,"Once a script is loaded on the chart, you can double-click on its name or hover over the name and press the “Settings” button to bring up its “Settings/Inputs” tab:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Changing scriptsettings,,https://www.tradingview.com/pine-script-docs/primer/first-steps
Changing scriptsettings,"The “Inputs” tab allows you to change the settings which the script’s
author has decided to make editable. You can configure some of the
script’s visuals using the “Style” tab of the same dialog box, and
which timeframes the script should appear on using the “Visibility”
tab.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Changing scriptsettings,"Other settings are available to all scripts from the buttons that appear
to the right of its name when you mouse over it, and from the “More”
menu (the three dots):",https://www.tradingview.com/pine-script-docs/primer/first-steps
Changing scriptsettings,,https://www.tradingview.com/pine-script-docs/primer/first-steps
Readingscripts,"Reading code written bygoodprogrammers is the best way to develop
your understanding of the language. This is as true for Pine Script™ as
it is for all other programming languages. Finding good open-source Pine
Script™ code is relatively easy. These are reliable sources of code
written by good programmers on TradingView:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Readingscripts,"Reading code fromCommunity
Scriptsis easy; if you don’t
see a grey or red “lock” icon in the upper-right corner of the
script’s widget, this indicates the script is open-source. By opening
its script page, you will be able to see its source.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Readingscripts,"To see the code of TradingView built-ins, load the indicator on your
chart, then hover over its name and select the “Source code” curly
braces icon (if you don’t see it, it’s because the indicator’s source
is unavailable). When you click on the icon, the Pine Editor will open
and from there, you can see the script’s code. If you want to play with
it, you will need to press the “create a working copy” button. You
will then be able to modify and save the code. Because you will have
created a different version of the script, you will need to use the
Editor’s “Add to Chart” button to add that new copy to the chart.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Readingscripts,"This shows the Pine Editor having just opened after we selected the “View source” button from the indicator on our chart. We are about to create a working copy of its source because it is read-only for now, as indicated by the orange warning text:",https://www.tradingview.com/pine-script-docs/primer/first-steps
Readingscripts,,https://www.tradingview.com/pine-script-docs/primer/first-steps
Readingscripts,"You can also open TradingView built-in indicators from the Pine Editor
(accessible from the “Pine Editor” tab at the bottom of the chart) by
using the “Open” -> “Built-in script…” menu selection.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Writingscripts,"We have built Pine Script™ to empower both budding and seasoned traders
to create their own trading tools. We have designed it so it is
relatively easy to learn for first-time programmers — although
learning a first programming language, like trading, is rarelyveryeasy for anyone — yet powerful enough for knowledgeable programmers to
build tools of moderate complexity.",https://www.tradingview.com/pine-script-docs/primer/first-steps
Writingscripts,Pine Script™ allows you to write three types of scripts:,https://www.tradingview.com/pine-script-docs/primer/first-steps
Writingscripts,The next step we recommend is to write yourfirst indicator.,https://www.tradingview.com/pine-script-docs/primer/first-steps
Writingscripts,Next,https://www.tradingview.com/pine-script-docs/primer/first-steps
The PineEditor,"The Pine Editor is where you will be working on your scripts. While you
can use any text editor you want to write your Pine scripts, using our
Editor has many advantages:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
The PineEditor,"To open the Editor, click on the “Pine Editor” tab at the bottom of your TradingView chart. This will open up the Editor’s pane.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"We will now create our first working Pine script, an implementation of
theMACDindicator in Pine Script™:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Your first Pine script is running on your chart, which should look like this:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Let’s look at our script’s code, line by line:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,Line 1://@version=6,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"This is acompiler annotationtelling the compiler the script will use version 6 of
Pine Script™.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Line 2:indicator(""MACD #1"")",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Defines the name of the script that will appear on the chart as
“MACD”.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,Line 3:fast = 12,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Defines afastinteger variable which will be the length of the
fast EMA.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,Line 4:slow = 26,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Defines aslowinteger variable which will be the length of the
slow EMA.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Line 5:fastMA = ta.ema(close, fast)",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Defines the variablefastMA, containing the result of the EMA
calculation (Exponential Moving Average) with a length equal tofast(12), on thecloseseries, i.e., the closing price of bars.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Line 6:slowMA = ta.ema(close, slow)",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Defines the variableslowMA, containing the result of the EMA
calculation with a length equal toslow(26), fromclose.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,Line 7:macd = fastMA - slowMA,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,Defines the variablemacdas the difference between the two EMAs.,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Line 8:signal = ta.ema(macd, 9)",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Defines the variablesignalas a smoothed value ofmacdusing
the EMA algorithm (Exponential Moving Average) with a length of 9.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Line 9:plot(macd, color = color.blue)",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Calls theplotfunction to output the variablemacdusing a blue
line.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Line 10:plot(signal, color = color.orange)",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Firstversion,"Calls theplotfunction to output the variablesignalusing an
orange line.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"The first version of our script calculated MACD “manually”, but
because Pine Script™ is designed to write indicators and strategies,
built-in Pine Script™ functions exist for many common indicators,
including one for MACD:ta.macd().",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,This is the second version of our script:,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,Note that we have:,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Let’s repeat the same process as before to copy that code in a new
indicator:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Your second Pine script is running on your chart. If you double-click on
the indicator’s name on your chart, you will bring up the script’s
“Settings/Inputs” tab, where you can now change the slow and fast
lengths:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Let’s look at the lines that have changed in the second version of our
script:",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Line 2:indicator(""MACD #2"")",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"We have changed#1to#2so the second version of our indicator
displays a different name on the chart.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Line 3:fastInput = input(12, ""Fast length"")",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Instead of assigning a constant value to a variable, we have used
theinput()function so we can change the value in our script’s
“Settings/Inputs” tab.12will be the default value and the
field’s label will be""Fast length"". If the value is changed in
the “Inputs” tab, thefastInputvariable’s content will contain
the new value and the script will re-execute on the chart with that
new value. Note that, as our Pine Script™Style Guiderecommends, we addInputto the end of the variable’s name to
remind us, later in the script, that its value comes from a user
input.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Line 4:slowInput = input(26, ""Slow length"")",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"We do the same for the slow length, taking care to use a different
variable name, default value and text string for the field’s label.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Line 5:[macdLine, signalLine, histLine] = ta.macd(close, fastInput, slowInput, 9)",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"This is where we call theta.macd()built-in to perform all the first version’s calculations in one
line only. The function requires four parameters (the values after
the function name, enclosed in parentheses). It returns three values
into the three variables instead of only one, like the functions we
used until now, which is why we need to enclose the list of three
variables receiving the function’s result in square brackets, to
the left of the=sign. Note that two of the values we pass to the
function are the “input” variables containing the fast and slow
lengths:fastInputandslowInput.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,Line 6 and 7:,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"The variable names we are plotting there have changed, but the lines
are doing the same thing as in our first version.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Secondversion,"Our second version performs the same calculations as our first, but we
can change the two lengths used to calculate it. Our code is also
simpler and shorter by three lines. We have improved our script.",https://www.tradingview.com/pine-script-docs/primer/first-indicator
Next,We now recommend you go to ourNext Stepspage.,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Next,Previous,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Next,Next,https://www.tradingview.com/pine-script-docs/primer/first-indicator
Nextsteps,"After yourfirst stepsand yourfirst indicator, let us explore a bit more of the Pine Script™ landscape by
sharing some pointers to guide you in your journey to learn Pine
Script™.",https://www.tradingview.com/pine-script-docs/primer/next-steps
“indicators” vs“strategies”,"Pine Script™strategiesare used to backtest on historical data and forward test on open
markets. In addition to indicator calculations, they containstrategy.*()calls to send trade orders to Pine Script™‘s broker
emulator, which can then simulate their execution. Strategies display
backtest results in the “Strategy Tester” tab at the bottom of the
chart, next to the “Pine Editor” tab.",https://www.tradingview.com/pine-script-docs/primer/next-steps
“indicators” vs“strategies”,"Pine Script™ indicators also contain calculations, but cannot be used in
backtesting. Because they do not require the broker emulator, they use
less resources and will run faster. It is thus advantageous to use
indicators whenever you can.",https://www.tradingview.com/pine-script-docs/primer/next-steps
“indicators” vs“strategies”,"Both indicators and strategies can run in either overlay mode (over the
chart’s bars) or pane mode (in a separate section below or above the
chart). Both can also plot information in their respective space, and
both can generatealert events.",https://www.tradingview.com/pine-script-docs/primer/next-steps
How scripts areexecuted,"A Pine script isnotlike programs in many programming languages
that execute once and then stop. In the Pine Script™runtimeenvironment, a script runs in the equivalent of an invisible loop where
it is executed once on each bar of whatever chart you are on, from left
to right. Chart bars that have already closed when the script executes
on them are calledhistorical bars. When execution reaches the
chart’s last bar and the market is open, it is on therealtime bar.
The script then executes once every time a price or volume change is
detected, and one last time for that realtime bar when it closes. That
realtime bar then becomes anelapsed realtime bar. Note that when the
script executes in realtime, it does not recalculate on all the chart’s
historical bars on every price/volume update. It has already calculated
once on those bars, so it does not need to recalculate them on every
chart tick. See theExecution modelpage for more information.",https://www.tradingview.com/pine-script-docs/primer/next-steps
How scripts areexecuted,"When a script executes on a historical bar, theclosebuilt-in variable holds the value of that bar’s close. When a script
executes on the realtime bar,closereturns thecurrentprice of the symbol until the bar closes.",https://www.tradingview.com/pine-script-docs/primer/next-steps
How scripts areexecuted,"Contrary to indicators, strategies normally execute only once on
realtime bars, when they close. They can also be configured to execute
on each price/volume update if that is what you need. See the page onStrategiesfor more
information, and to understand how strategies calculate differently than
indicators.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Timeseries,"The main data structure used in Pine Script™ is called atime series. Time
series contain one value for each bar the script executes on, so they
continuously expand as the script executes on more bars. Past values of
the time series can be referenced using the history-referencing
operator:[].close[1], for example, refers to the value ofcloseon the bar preceding the one where the script is executing.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Timeseries,"While this indexing mechanism may remind many programmers of arrays, a
time series is different and thinking in terms of arrays will be
detrimental to understanding this key Pine Script™ concept. A good
comprehension of both theexecution modelandtime seriesis
essential in understanding how Pine scripts work. If you have never
worked with data organized in time series before, you will need practice
to put them to work for you. Once you familiarize yourself with these
key concepts, you will discover that by combining the use of time series
with our built-in functions specifically designed to handle them
efficiently, much can be accomplished in very few lines of code.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Publishingscripts,"TradingView is home to a large community of Pine Script™ programmers and
millions of traders from all around the world. Once you become
proficient enough in Pine Script™, you can choose to share your scripts
with other traders. Before doing so, please take the time to learn Pine
Script™ well-enough to supply traders with an original and reliable
tool. All publicly published scripts are analyzed by our team of
moderators and must comply with ourScript Publishing
Rules, which
require them to be original and well-documented.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Publishingscripts,"If want to use Pine scripts for your own use, simply write them in the
Pine Editor and add them to your chart from there; you don’t have to
publish them to use them. If you want to share your scripts with just a
few friends, you can publish them privately and send your friends the
browser’s link to your private publication. See the page onPublishingfor more
information.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Getting around the Pine Script™documentation,"While reading code from published scripts is no doubt useful, spending
time in our documentation will be necessary to attain any degree of
proficiency in Pine Script™. Our two main sources of documentation on
Pine Script™ are:",https://www.tradingview.com/pine-script-docs/primer/next-steps
Getting around the Pine Script™documentation,"The Pine Script™v6 User Manual, which is located on its separate page and in English only.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Getting around the Pine Script™documentation,"The Pine Script™v6 Reference
Manualdocuments
what each language construct does. It is an essential tool
for all Pine Script™ programmers; your life will be miserable if you try
to write scripts of any reasonable complexity without consulting it. It
exists in two formats: a separate page linked above, and the popup
version, which can be accessed from the Pine Editor, by eitherctrl/cmd+clickingon a keyword, or by using the Editor’s “More/Reference Manual…” menu. The Reference Manual is translated in other
languages.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Getting around the Pine Script™documentation,"There are five different versions of Pine Script™. Ensure the
documentation you use corresponds to the Pine Script™ version you are
coding with.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Where to go fromhere?,"This Pine Script™v6 User Manualcontains numerous examples of code used to illustrate the concepts we discuss. By going through it, you will be able to both learn the
foundations of Pine Script™ and study the example scripts. Reading about
key concepts and trying them out right away with real code is a
productive way to learn any programming language. As you hopefully have
already done in theFirst indicatorpage, copy this documentation’s examples in the Editor and play with
them. Explore! You won’t break anything.",https://www.tradingview.com/pine-script-docs/primer/next-steps
Where to go fromhere?,This is how the Pine Script™v6 User Manualyou are reading is organized:,https://www.tradingview.com/pine-script-docs/primer/next-steps
Where to go fromhere?,We wish you a successful journey with Pine Script™… and trading!,https://www.tradingview.com/pine-script-docs/primer/next-steps
Where to go fromhere?,Previous,https://www.tradingview.com/pine-script-docs/primer/next-steps
Executionmodel,"The execution model of the Pine Script™ runtime is intimately linked to
Pine Script™‘stime seriesandtype system. Understanding all three is key to making the most of the
power of Pine Script™.",https://www.tradingview.com/pine-script-docs/language/execution-model
Executionmodel,"The execution model determines how your script is executed on charts,
and thus how the code you write in scripts works. Your code would do
nothing were it not for Pine Script™‘s runtime, which kicks in after
your code has compiled and it is executed on your chart because one of
theevents triggering the execution of a scripthas occurred.",https://www.tradingview.com/pine-script-docs/language/execution-model
Executionmodel,"When a Pine script is loaded on a chart it executes once on each
historical bar using the available OHLCV (open, high, low, close,
volume) values for each bar. Once the script’s execution reaches the
rightmost bar in the dataset, if trading is currently active on the
chart’s symbol, then Pine Script™indicatorswill execute once every
time anupdateoccurs, i.e., price or volume changes. Pine Script™strategieswill by default only execute when the rightmost bar closes,
but they can also be configured to execute on every update, like
indicators do.",https://www.tradingview.com/pine-script-docs/language/execution-model
Executionmodel,"All symbol/timeframe pairs have a dataset comprising a limited number of
bars. When you scroll a chart to the left to see the dataset’s earlier
bars, the corresponding bars are loaded on the chart. The loading
process stops when there are no more bars for that particular
symbol/timeframe pair or themaximum number of
barsyour account type permits has been loaded. You can scroll the chart to
the left until the very first bar of the dataset, which has an index
value of 0 (seebar_index).",https://www.tradingview.com/pine-script-docs/language/execution-model
Executionmodel,"When the script first runs on a chart, all bars in a dataset arehistorical bars, except the rightmost one if a trading session is
active. When trading is active on the rightmost bar, it is called therealtime bar. The realtime bar updates when a price or volume change
is detected. When the realtime bar closes, it becomes anelapsed
realtime barand a new realtime bar opens.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,Let’s take a simple script and follow its execution on historical bars:,https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,"On historical bars, a script executes at the equivalent of the bar’s
close, when the OHLCV values are all known for that bar. Prior to
execution of the script on a bar, the built-in variables such asopen,high,low,close,volumeandtimeare set to values
corresponding to those from that bar. A script executesonce per
historical bar.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,"Our example script is first executed on the very first bar of the
dataset at index 0. Each statement is executed using the values for the
current bar. Accordingly, on the first bar of the dataset, the following
statement:",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,"initializes the variablesrcwith theclosevalue for that first
bar, and each of the next lines is executed in turn. Because the script
only executes once for each historical bar, the script will always
calculate using the sameclosevalue for a specific historical bar.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,"The execution of each line in the script produces calculations which in
turn generate the indicator’s output values, which can then be plotted
on the chart. Our example uses theplotandplotshapecalls at the
end of the script to output some values. In the case of a strategy, the
outcome of the calculations can be used to plot values or dictate the
orders to be placed.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,"After execution and plotting on the first bar, the script is executed on
the dataset’s second bar, which has an index of 1. The process then
repeats until all historical bars in the dataset are processed and the
script reaches the rightmost bar on the chart.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on historicalbars,,https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,"The behavior of a Pine script on the realtime bar is very different than
on historical bars. Recall that the realtime bar is the rightmost bar on
the chart when trading is active on the chart’s symbol. Also, recall
that strategies can behave in two different ways in the realtime bar. By
default, they only execute when the realtime bar closes, but thecalc_on_every_tickparameter of thestrategydeclaration statement
can be set to true to modify the strategy’s behavior so that it
executes each time the realtime bar updates, as indicators do. The
behavior described here for indicators will thus only apply to
strategies usingcalc_on_every_tick=true.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,"The most important difference between execution of scripts on historical
and realtime bars is that while they execute only once on historical
bars, scripts execute every time an update occurs during a realtime bar.
This entails that built-in variables such ashigh,lowandclosewhich never change on a historical bar,canchange at each of a
script’s iteration in the realtime bar. Changes in the built-in
variables used in the script’s calculations will, in turn, induce
changes in the results of those calculations. This is required for the
script to follow the realtime price action. As a result, the same script
may produce different results every time it executes during the realtime
bar.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,"Note:In the realtime bar, theclosevariable always represents
thecurrent price. Similarly, thehighandlowbuilt-in
variables represent the highest high and lowest low reached since the
realtime bar’s beginning. Pine Script™‘s built-in variables will only
represent the realtime bar’s final values on the bar’s last update.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,Let’s follow our script example in the realtime bar.,https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,"When the script arrives on the realtime bar it executes a first time. It
uses the current values of the built-in variables to produce a set of
results and plots them if required. Before the script executes another
time when the next update happens, its user-defined variables are reset
to a known state corresponding to that of the lastcommitat the close
of the previous bar. If no commit was made on the variables because they
are initialized every bar, then they are reinitialized. In both cases
their last calculated state is lost. The state of plotted labels and
lines is also reset. This resetting of the script’s user-defined
variables and drawings prior to each new iteration of the script in the
realtime bar is calledrollback. Its effect is to reset the script to
the same known state it was in when the realtime bar opened, so
calculations in the realtime bar are always performed from a clean
state.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,"The constant recalculation of a script’s values as price or volume
changes in the realtime bar can lead to a situation where variablecin our example becomes true because a cross has occurred, and so the red
marker plotted by the script’s last line would appear on the chart. If
on the next price update the price has moved in such a way that theclosevalue no longer produces calculations makingctrue because
there is no longer a cross, then the marker previously plotted will
disappear.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,"When the realtime bar closes, the script executes a last time. As usual,
variables are rolled back prior to execution. However, since this
iteration is the last one on the realtime bar, variables are committed
to their final values for the bar when calculations are completed.",https://www.tradingview.com/pine-script-docs/language/execution-model
Calculation based on realtimebars,To summarize the realtime bar process:,https://www.tradingview.com/pine-script-docs/language/execution-model
Events triggering the execution of ascript,"A script is executed on the complete set of bars on the chart when one
of the following events occurs:",https://www.tradingview.com/pine-script-docs/language/execution-model
Events triggering the execution of ascript,A script is executed on the realtime bar when trading is active and:,https://www.tradingview.com/pine-script-docs/language/execution-model
Events triggering the execution of ascript,"Note that when a chart is left untouched when the market is active, a
succession of realtime bars which have been opened and then closed will
trail the current realtime bar. While theseelapsed realtime barswill
have beenconfirmedbecause their variables have all been committed,
the script will not yet have executed on them in theirhistoricalstate, since they did not exist when the script was last run on the
chart’s dataset.",https://www.tradingview.com/pine-script-docs/language/execution-model
Events triggering the execution of ascript,"When an event triggers the execution of the script on the chart and
causes it to run on those bars which have now become historical bars,
the script’s calculation can sometimes vary from what they were when
calculated on the last closing update of the same bars when they were
realtime bars. This can be caused by slight variations between the OHLCV
values saved at the close of realtime bars and those fetched from data
feeds when the same bars have become historical bars. This behavior is
one of the possible causes ofrepainting.",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,"Every function call in Pine leaves a trail of historical values that a
script can access on subsequent bars using the[]operator. The historical series of functions depend on successive calls
to record the output on every bar. When a script does not call functions
on each bar, it can produce an inconsistent history that may impact
calculations and results, namely when it depends on the continuity of
their historical series to operate as expected. The compiler warns users
in these cases to make them aware that the values from a function,
whether built-in or user-defined, might be misleading.",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,"To demonstrate, let’s write a script that calculates the index of the
current bar and outputs that value on every second bar. In the following
script, we’ve defined acalcBarIndex()function that adds 1 to the
previous value of its internalindexvariable on every bar. The script
calls the function on each bar that theconditionreturnstrueon
(every other bar) to update thecustomIndexvalue. It plots this value
alongside the built-inbar_indexto validate the output:",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,,https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,Note that:,https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,"Upon inspecting the chart, we see that the two plots differ wildly. The
reason for this behavior is that the script calledcalcBarIndex()within the scope of anifstructure on every other bar, resulting in a historical output
inconsistent with thebar_indexseries. When calling the function once
every two bars, internally referencing the previous value ofindexgets the value from two bars ago, i.e., the last bar the function
executed on. This behavior results in acustomIndexvalue of half that
of the built-inbar_index.",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,"To align thecalcBarIndex()output with thebar_index, we can move
the function call to the script’s global scope. That way, the function
will execute on every bar, allowing its entire history to be recorded
and referenced rather than only the results from every other bar. In the
code below, we’ve defined aglobalScopeBarIndexvariable in the
global scope and assigned it to the return fromcalcBarIndex()rather
than calling the function locally. The script sets thecustomIndexto
the value ofglobalScopeBarIndexon the occurrence of thecondition:",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,,https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,"This behavior can also radically impact built-in functions that
reference history internally. For example, theta.sma()function references its past values “under the hood”. If a script
calls this function conditionally rather than on every bar, the values
within the calculation can change significantly. We can ensure
calculation consistency by assigningta.sma()to a variable in the global scope and referencing that variable’s
history as needed.",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,"The following example calculates three SMA series:controlSMA,localSMA, andglobalSMA. The script calculatescontrolSMAin the
global scope andlocalSMAwithin the local scope of anifstructure. Within theifstructure, it also updates the value ofglobalSMAusing thecontrolSMAvalue. As we can see, the values from theglobalSMAandcontrolSMAseries align, whereas thelocalSMAseries diverges from
the other two because it uses an incomplete history, which affects its
calculations:",https://www.tradingview.com/pine-script-docs/language/execution-model
Historical values offunctions,,https://www.tradingview.com/pine-script-docs/language/execution-model
Why thisbehavior?,"This behavior is required because forcing the execution of functions on
each bar would lead to unexpected results in those functions that
produce side effects, i.e., the ones that do something aside from
returning the value. For example, thelabel.new()function creates a label on the chart, so forcing it to be called on
every bar even when it is inside of anifstructure would create labels where they should not logically appear.",https://www.tradingview.com/pine-script-docs/language/execution-model
Exceptions,"Not all built-in functions use their previous values in their
calculations, meaning not all require execution on every bar. For
example,math.max()compares all arguments passed into it to return the highest value. Such
functions that do not interact with their history in any way do not
require special treatment.",https://www.tradingview.com/pine-script-docs/language/execution-model
Exceptions,"If the usage of a function within a conditional block does not cause a
compiler warning, it’s safe to use without impacting calculations.
Otherwise, move the function call to the global scope to force
consistent execution. When keeping a function call within a conditional
block despite the warning, ensure the output is correct at the very
least to avoid unexpected results.",https://www.tradingview.com/pine-script-docs/language/execution-model
Exceptions,Next,https://www.tradingview.com/pine-script-docs/language/execution-model
Timeseries,"Much of the power of Pine Script™ stems from the fact that it is
designed to processtime seriesefficiently. Time series are not a
qualified type; they are the fundamental structure Pine Script™ uses to
store the successive values of a variable over time, where each value is
tethered to a point in time. Since charts are composed of bars, each
representing a particular point in time, time series are the ideal data
structure to work with values that may change with time.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"The notion of time series is intimately linked to Pine Script™‘sexecution modelandtype systemconcepts.
Understanding all three is key to making the most of the power of Pine
Script™.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"Take the built-inopenvariable, which contains the “open” price of each bar in the dataset,
thedatasetbeing all the bars on any given chart. If your script is
running on a 5min chart, then each value in theopentime series is the “open” price of the consecutive 5min chart bars.
When your script refers toopen,
it is referring to the “open” price of the bar the script is executing
on. To refer to past values in a time series, we use the[]history-referencing operator. When a script is executing on a given bar,open[1]refers to the value of theopentime series on the previous bar.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"While time series may remind programmers of arrays, they are totally
different. Pine Script™ does use an array data structure, but it is a
completely different concept than a time series.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"Time series in Pine Script™, combined with its special type of runtime
engine and built-in functions, are what makes it easy to compute the
cumulative total ofclosevalues without using aforloop, with onlyta.cum(close). This is possible because althoughta.cum(close)appears rather static in a script, it is in fact
executed on each bar, so its value becomes increasingly larger as theclosevalue of each new bar is added to it. When the script reaches the
rightmost bar of the chart,ta.cum(close)returns the sum of theclosevalue from all bars on the chart.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"Similarly, the mean of the difference between the last 14highandlowvalues can be expressed asta.sma(high - low, 14), or the distance in
bars since the last time the chart made five consecutive higher highs asbarssince(rising(high, 5)).",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"Even the result of function calls on successive bars leaves a trace of
values in a time series that can be referenced using the[]history-referencing operator. This can be useful, for example, when
testing thecloseof the current bar for a breach of the highesthighin the last 10 bars, but excluding the current bar, which we could write
asbreach = close > highest(close, 10)[1]. The same statement could
also be written asbreach = close > highest(close[1], 10).",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"The same looping logic on all bars is applied to function calls such asplot(open)which will repeat on each bar, successively plotting on the
chart the value ofopenfor each bar.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"Do not confuse “time series” with the “series” qualifier. Thetime
seriesconcept explains how consecutive values of variables are stored
in Pine Script™; the “series” qualifier denotes variables whose values
can change bar to bar. Consider, for example, thetimeframe.periodbuilt-in variable which has the “simple” qualifier and “string”
type, meaning it is of the “simple string” qualified type. The
“simple” qualifier entails that the variable’s value is established
on bar zero (the first bar where the script executes) and will not
change during the script’s execution on any of the chart’s bars. The
variable’s value is the chart’s timeframe in string format, so""D""for a 1D chart, for example. Even though its value cannot change during
the script, it would be syntactically correct in Pine Script™ (though
not very useful) to refer to its value 10 bars ago usingtimeframe.period[10]. This is possible because the successive values
oftimeframe.periodfor each bar are stored in a time series, even though all the values in
that particular time series are the same. Note, however, that when the[]operator is used to access past values of a variable, it yields a
“series” qualified value, even when the variable without an offset
uses a different qualifier, such as “simple” in the case oftimeframe.period.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,"When you grasp how time series can be efficiently handled using Pine
Script™‘s syntax and itsexecution model,
you can define complex calculations using little code.",https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,Previous,https://www.tradingview.com/pine-script-docs/language/time-series
Timeseries,Next,https://www.tradingview.com/pine-script-docs/language/time-series
Scriptstructure,A Pine script follows this general structure:,https://www.tradingview.com/pine-script-docs/language/script-structure
Scriptstructure,"Code:
<version><declaration_statement><code>",https://www.tradingview.com/pine-script-docs/language/script-structure
Version,"Acompiler annotationin the following form tells the compiler which of the
versions of Pine Script™ the script is written in:",https://www.tradingview.com/pine-script-docs/language/script-structure
Version,"Notable changes to the current version of Pine Script™ are documented in
theRelease notes.",https://www.tradingview.com/pine-script-docs/language/script-structure
Declarationstatement,"All Pine scripts must contain one declaration statement, which is a call
to one of these functions:",https://www.tradingview.com/pine-script-docs/language/script-structure
Declarationstatement,The declaration statement:,https://www.tradingview.com/pine-script-docs/language/script-structure
Declarationstatement,Each type of script has distinct requirements:,https://www.tradingview.com/pine-script-docs/language/script-structure
Code,"Lines in a script that are notcommentsorcompiler annotationsarestatements, which implement the script’s algorithm. A
statement can be one of these:",https://www.tradingview.com/pine-script-docs/language/script-structure
Code,Statements can be arranged in multiple ways:,https://www.tradingview.com/pine-script-docs/language/script-structure
Code,"A simple valid Pine Script™ indicator can be generated in the Pine
Script™ Editor by using the “Open” button and choosing “New blank
indicator”:",https://www.tradingview.com/pine-script-docs/language/script-structure
Code,"This indicator includes three local blocks, one in thebarIsUp()function
declaration, and two in the variable declaration using anifstructure:",https://www.tradingview.com/pine-script-docs/language/script-structure
Code,"You can bring up a simple Pine Script™ strategy by selecting “New
blank strategy” instead:",https://www.tradingview.com/pine-script-docs/language/script-structure
Comments,"Double slashes (//) define comments in Pine Script™. Comments can
begin anywhere on the line. They can also follow Pine Script™ code on
the same line:",https://www.tradingview.com/pine-script-docs/language/script-structure
Comments,"The Pine Editor has a keyboard shortcut to comment/uncomment lines:ctrl+/. You can use it on multiple lines by highlighting them
first.",https://www.tradingview.com/pine-script-docs/language/script-structure
Linewrapping,"Long lines can be split on multiple lines, or “wrapped”. Wrapped lines
must be indented with any number of spaces, provided it’s not a
multiple of four (those boundaries are used to indent local blocks):",https://www.tradingview.com/pine-script-docs/language/script-structure
Linewrapping,may be wrapped as:,https://www.tradingview.com/pine-script-docs/language/script-structure
Linewrapping,A longplot()call may be wrapped as:,https://www.tradingview.com/pine-script-docs/language/script-structure
Linewrapping,"Statements inside user-defined function declarations can also be
wrapped. However, since a local block must syntactically begin with an
indentation (4 spaces or 1 tab), when splitting it onto the following
line, the continuation of the statement must start with more than one
indentation (not equal to a multiple of four spaces). For example:",https://www.tradingview.com/pine-script-docs/language/script-structure
Linewrapping,You can use comments in wrapped lines:,https://www.tradingview.com/pine-script-docs/language/script-structure
Compilerannotations,Compiler annotations arecommentsthat issue special instructions for a script:,https://www.tradingview.com/pine-script-docs/language/script-structure
Compilerannotations,"The Pine Editor also features two specialized annotations,//#regionand//#endregion, that createcollapsiblecode regions.
Clicking the dropdown arrow next to a//#regionline collapses all the code between that line and the nearest//#endregionannotation
below it.",https://www.tradingview.com/pine-script-docs/language/script-structure
Compilerannotations,"This example draws a triangle using three interactively selected points on the chart.
The script illustrates how one can use compiler and Editor annotations to document code and make it easier to navigate:",https://www.tradingview.com/pine-script-docs/language/script-structure
Compilerannotations,,https://www.tradingview.com/pine-script-docs/language/script-structure
Compilerannotations,Previous,https://www.tradingview.com/pine-script-docs/language/script-structure
Compilerannotations,Next,https://www.tradingview.com/pine-script-docs/language/script-structure
Identifiers,Identifiers are names used for user-defined variables and functions:,https://www.tradingview.com/pine-script-docs/language/identifiers
Identifiers,Here are some examples:,https://www.tradingview.com/pine-script-docs/language/identifiers
Identifiers,"The Pine Script™Style Guiderecommends using uppercase SNAKE_CASE for constants, and
camelCase for other identifiers:",https://www.tradingview.com/pine-script-docs/language/identifiers
Identifiers,Previous,https://www.tradingview.com/pine-script-docs/language/identifiers
Identifiers,Next,https://www.tradingview.com/pine-script-docs/language/identifiers
Introduction,Some operators are used to buildexpressionsreturning a result:,https://www.tradingview.com/pine-script-docs/language/operators
Introduction,Other operators are used to assign values to variables:,https://www.tradingview.com/pine-script-docs/language/operators
Introduction,"As is explained in theType systempage,qualifiersandtypesplay a critical role in
determining the type of results that expressions yield. This, in turn,
has an impact on how and with what functions you will be allowed to use
those results. Expressions always return a value with the strongest
qualifier used in the expression, e.g., if you multiply an “input int”
with a “series int”, the expression will produce a “series int”
result, which you will not be able to use as the argument tolengthinta.ema().",https://www.tradingview.com/pine-script-docs/language/operators
Introduction,This script will produce a compilation error:,https://www.tradingview.com/pine-script-docs/language/operators
Introduction,"The compiler will complain:Cannot call ‘ta.ema’ with argument
‘length’=‘adjustedLength’. An argument of ‘series int’ type was
used but a ‘simple int’ is expected;. This is happening becauselenInputis an “input int” butfactoris a “series int” (it can
only be determined by looking at the value ofyearon each bar). TheadjustedLengthvariable is thus assigned a “series
int” value. Our problem is that the Reference Manual entry forta.ema()tells us that itslengthparameter requires a “simple” value, which
is a weaker qualifier than “series”, so a “series int” value is not
allowed.",https://www.tradingview.com/pine-script-docs/language/operators
Introduction,The solution to our conundrum requires:,https://www.tradingview.com/pine-script-docs/language/operators
Arithmeticoperators,There are five arithmetic operators in Pine Script™:,https://www.tradingview.com/pine-script-docs/language/operators
Arithmeticoperators,"The arithmetic operators above are all binary (means they need twooperands— or values — to work on, like in1 + 2). The+and-also serve as unary operators (means they work on one operand, like-1or+1).",https://www.tradingview.com/pine-script-docs/language/operators
Arithmeticoperators,"If both operands are numbers but at least one of these is offloattype, the result will also be afloat.
If both operands are ofinttype, the result will also be anint.
If at least one operand isna, the
result is alsona.",https://www.tradingview.com/pine-script-docs/language/operators
Arithmeticoperators,"The+operator also serves as the concatenation operator for strings.""EUR""+""USD""yields the""EURUSD""string.",https://www.tradingview.com/pine-script-docs/language/operators
Arithmeticoperators,"The%operator calculates the modulo by rounding down the quotient to
the lowest possible value. Here is an easy example that helps illustrate
how the modulo is calculated behind the scenes:",https://www.tradingview.com/pine-script-docs/language/operators
Comparisonoperators,There are six comparison operators in Pine Script™:,https://www.tradingview.com/pine-script-docs/language/operators
Comparisonoperators,"Comparison operations are binary. If both operands have a numerical
value, the result will be of typebool, i.e.,true,falseorna.",https://www.tradingview.com/pine-script-docs/language/operators
Comparisonoperators,Examples:,https://www.tradingview.com/pine-script-docs/language/operators
Logicaloperators,There are three logical operators in Pine Script™:,https://www.tradingview.com/pine-script-docs/language/operators
Logicaloperators,"The operatornotis unary. When applied to atrue, operand the
result will befalse, and vice versa.",https://www.tradingview.com/pine-script-docs/language/operators
Logicaloperators,andoperator truth table:,https://www.tradingview.com/pine-script-docs/language/operators
Logicaloperators,oroperator truth table:,https://www.tradingview.com/pine-script-docs/language/operators
`?:` ternaryoperator,The?:ternary operator is used to create expressions of the form:,https://www.tradingview.com/pine-script-docs/language/operators
`?:` ternaryoperator,"The ternary operator returns a result that depends on the value ofcondition. If it istrue, thenvalueWhenConditionIsTrueis
returned. Ifconditionisfalseorna, thenvalueWhenConditionIsFalseis returned.",https://www.tradingview.com/pine-script-docs/language/operators
`?:` ternaryoperator,"A combination of ternary expressions can be used to achieve the same
effect as aswitchstructure, e.g.:",https://www.tradingview.com/pine-script-docs/language/operators
`?:` ternaryoperator,The example is calculated from left to right:,https://www.tradingview.com/pine-script-docs/language/operators
`?:` ternaryoperator,"Note that the return values on each side of the:are expressions ---
not local blocks, so they will not affect the limit of 500 local blocks
per scope.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"It is possible to refer to past values oftime seriesusing the[]history-referencing operator. Past values are values a variable had on
bars preceding the bar where the script is currently executing — thecurrent bar. See theExecution modelpage for more information about the way scripts are executed on bars.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"The[]operator is used after a variable, expression or function call. The
value used inside the square brackets of the operator is the offset in
the past we want to refer to. To refer to the value of thevolumebuilt-in variable two bars away from the current bar, one would usevolume[2].",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"Because series grow dynamically, as the script moves on sucessive bars,
the offset used with the operator will refer to different bars. Let’s
see how the value returned by the same offset is dynamic, and why series
are very different from arrays. In Pine Script™, theclosevariable, orclose[0]which is equivalent, holds the value of the
current bar’s “close”. If your code is now executing on thethirdbar of thedataset(the set of all bars on your chart),closewill
contain the price at the close of that bar,close[1]will contain the
price at the close of the preceding bar (the dataset’s second bar), andclose[2], the first bar.close[3]will returnnabecause no bar exists in that position, and thus its value isnot
available.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"When the same code is executed on the next bar, thefourthin the
dataset,closewill now contain the closing price of that bar, and the
sameclose[1]used in your code will now refer to the “close” of the
third bar in the dataset. The close of the first bar in the dataset will
now beclose[3], and this timeclose[4]will returnna.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"In the Pine Script™ runtime environment, as your code is executed once
for each historical bar in the dataset, starting from the left of the
chart, Pine Script™ is adding a new element in the series at index 0 and
pushing the pre-existing elements in the series one index further away.
Arrays, in comparison, can have constant or variable sizes, and their
content or indexing structure is not modified by the runtime
environment. Pine Script™ series are thus very different from arrays and
only share familiarity with them through their indexing syntax.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"When the market for the chart’s symbol is open and the script is
executing on the chart’s last bar, therealtime bar,closereturns the value of the current price. It will only contain the actual
closing price of the realtime bar the last time the script is executed
on that bar, when it closes.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"Pine Script™ has a variable that contains the number of the bar the
script is executing on:bar_index.
On the first bar,bar_indexis equal to 0 and it increases by 1 on each successive bar the script
executes on. On the last bar,bar_indexis equal to the number of bars in the dataset minus one.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,"There is another important consideration to keep in mind when using the[]operator in Pine Script™. We have seen cases when a history
reference may return thenavalue.narepresents a value which is not a number and using it in any expression
will produce a result that is alsona(similar toNaN). Such cases often
happen during the script’s calculations in the early bars of the
dataset, but can also occur in later bars under certain conditions. If
your code does not explicitly provide for handling these special cases,
they can introduce invalid results in your script’s calculations which
can ripple through all the way to the realtime bar. Thenaandnzfunctions are designed to allow for handling such cases.",https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,These are all valid uses of the[]operator:,https://www.tradingview.com/pine-script-docs/language/operators
`[ ]` history-referencingoperator,Note that the[]operator can only be used once on the same value. This is not allowed:,https://www.tradingview.com/pine-script-docs/language/operators
Operatorprecedence,"The order of calculations is determined by the operators’ precedence.
Operators with greater precedence are calculated first. Below is a list
of operators sorted by decreasing precedence:",https://www.tradingview.com/pine-script-docs/language/operators
Operatorprecedence,"If in one expression there are several operators with the same
precedence, then they are calculated left to right.",https://www.tradingview.com/pine-script-docs/language/operators
Operatorprecedence,"If the expression must be calculated in a different order than
precedence would dictate, then parts of the expression can be grouped
together with parentheses.",https://www.tradingview.com/pine-script-docs/language/operators
`=` assignmentoperator,"The=operator is used to assign a variable when it is initialized ---
or declared ---, i.e., the first time you use it. It saysthis is a new
variable that I will be using, and I want it to start on each bar with
this value.",https://www.tradingview.com/pine-script-docs/language/operators
`=` assignmentoperator,These are all valid variable declarations:,https://www.tradingview.com/pine-script-docs/language/operators
`=` assignmentoperator,See theVariable declarationspage for more information on how to declare variables.,https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,"The:=is used toreassigna value to an existing variable. It saysuse this variable that was declared earlier in my script, and give it a
new value.",https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,"Variables which have been first declared, then reassigned using:=,
are calledmutablevariables. All the following examples are valid
variable reassignments. You will find more information on howvarworks in the section on the`var` declaration mode:",https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,Note that:,https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,The output of our script looks like this:,https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,,https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,Note that:,https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,"See theVariable reassignmentsection for more information on how to reassign values to
variables.",https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,Previous,https://www.tradingview.com/pine-script-docs/language/operators
`:=` reassignmentoperator,Next,https://www.tradingview.com/pine-script-docs/language/operators
Introduction,"Variables areidentifiersthat hold values. They must bedeclaredin your code
before you use them. The syntax of variable declarations is:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,"Code:
[<declaration_mode>] [<type>] <identifier> = <expression> | <structure>",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,or,https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,"Code:
<tuple_declaration> = <function_call> | <structure>",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,where:,https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,"These are all valid variable declarations. The last one requires four
lines:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,"Notice!The above statements all contain the=assignment operator because
they arevariable declarations. When you see similar lines using the:=reassignment operator, the code isreassigninga value to a variable
that wasalready declared. Those arevariable reassignments. Be
sure you understand the distinction as this is a common stumbling block
for newcomers to Pine Script™. See the nextVariable reassignmentsection for details.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,The formal syntax of a variable declaration is:,https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,"Code:
<variable_declaration>[<declaration_mode>] [<type>] <identifier> = <expression> | <structure>|<tuple_declaration> = <function_call> | <structure><declaration_mode>var | varip<type>int | float | bool | color | string | line | linefill | label | box | table | array<type> | matrix<type> | UDF",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Initialization with`na`,"In most cases, an explicit type declaration is redundant because type is
automatically inferred from the value on the right of the=at compile
time, so the decision to use them is often a matter of preference. For
example:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Initialization with`na`,"In the first line of the example, the compiler cannot determine the type
of thebaseLine0variable becausenais a
generic value of no particular type. The declaration of thebaseLine1variable is correct because itsfloattype is declared explicitly. The declaration of thebaseLine2variable
is also correct because its type can be derived from the expressionfloat(na), which is an explicit cast of thenavalue
to thefloattype. The declarations ofbaseLine1andbaseLine2are equivalent.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Tupledeclarations,"Function calls or structures are allowed to return multiple values. When
we call them and want to store the values they return, atuple
declarationmust be used, which is a comma-separated set of one or more
values enclosed in brackets. This allows us to declare multiple
variables simultaneously. As an example, theta.bb()built-in function for Bollinger bands returns three values:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Using an underscore (​_​) as an identifier,"When declaring a variable, it is possible to use a single underscore (_) as its identifier. A value assigned to such a variable cannot be accessed. You can assign any number of values to a_identifier anywhere in the script, even if the current scope already has such an assignment.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Using an underscore (​_​) as an identifier,"This is particularly useful when a tuple returns unneeded values. Let’s write another Bollinger Bands script. Here, we only need the bands themselves, without the center line:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Variablereassignment,"A variable reassignment is done using the:=reassignment operator. It can only be done after a variable has been
first declared and given an initial value. Reassigning a new value to a
variable is often necessary in calculations, and it is always necessary
when a variable from the global scope must be assigned a new value from
within a structure’s local block, e.g.:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Variablereassignment,Note that:,https://www.tradingview.com/pine-script-docs/language/variable-declarations
Variablereassignment,"All user-defined variables in Pine Script™ aremutable, which means
their value can be changed using the:=reassignment operator. Assigning a new value to a variable may change
itstype qualifier(see the page on Pine Script™‘stype systemfor more
information). A variable can be assigned a new value as many times as
needed during the script’s execution on one bar, so a script can
contain any number of reassignments of one variable. A variable’sdeclaration modedetermines how new values assigned to a variable will be
saved.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Declarationmodes,"Understanding the impact that declaration modes have on the behavior of
variables requires prior knowledge of Pine Script™‘sexecution model.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
Declarationmodes,"When you declare a variable, if a declaration mode is specified, it must
come first. Three modes can be used:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
On eachbar,"When no explicit declaration mode is specified, i.e. novarorvaripkeyword is used, the variable is declared and initialized on each bar,
e.g., the following declarations from our first set of examples in this
page’s introduction:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,"When thevarkeyword is used, the variable is only initialized once, on the first bar
if the declaration is in the global scope, or the first time the local
block is executed if the declaration is inside a local block. After
that, it will preserve its last value on successive bars, until we
reassign a new value to it. This behavior is very useful in many cases
where a variable’s value must persist through the iterations of a
script across successive bars. For example, suppose we’d like to count
the number of green bars on the chart:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,,https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,"Without thevarmodifier, variablecountwould be reset to zero
(thus losing its value) every time a new bar update triggered a script
recalculation.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,"Declaring variables on the first bar only is often useful to manage
drawings more efficiently. Suppose we want to extend the last bar’scloseline to the right of the right chart. We could write:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,"but this is inefficient because we are creating and deleting the line on
each historical bar and on each update in the realtime bar. It is more
efficient to use:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,Note that:,https://www.tradingview.com/pine-script-docs/language/variable-declarations
`var`,"There is a very slight penalty performance for using thevardeclaration mode. For that reason, when declaring constants, it is
preferable not to usevarif
performance is a concern, unless the initialization involves
calculations that take longer than the maintenance penalty, e.g.,
functions with complex code or string manipulations.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,Understanding the behavior of variables using thevaripdeclaration mode requires prior knowledge of Pine Script™‘sexecution modelandbar states.,https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"Thevaripkeyword can be used to declare variables that escape therollback
process, which is explained in the page on Pine Script™‘sexecution model.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"Whereas scripts only execute once at the close of historical bars, when
a script is running in realtime, it executes every time the chart’s
feed detects a price or volume update. At every realtime update, Pine
Script™‘s runtime normally resets the values of a script’s variables
to their last committed value, i.e., the value they held when the
previous bar closed. This is generally handy, as each realtime script
execution starts from a known state, which simplifies script logic.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"Sometimes, however, script logic requires code to be able to save
variable valuesbetween different executionsin the realtime bar.
Declaring variables withvaripmakes that possible. The “ip” invaripstands forintrabar persist.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"Let’s look at the following code, which does not usevarip:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"On historical bars,barstate.isnewis always true, so the plot shows a value of “1” because theelsepart of theifstructure is never executed. On realtime bars,barstate.isnewis onlytruewhen the script first executes on the bar’s “open”. The plot will
then briefly display “1” until subsequent executions occur. On the
next executions during the realtime bar, the second branch of theifstatement is executed becausebarstate.isnewis no longer true. SinceupdateNois initialized tonaat
each execution, theupdateNo + 1expression yieldsna, so
nothing is plotted on further realtime executions of the script.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"If we now usevaripto declare theupdateNovariable, the script behaves very differently:",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"The difference now is thatupdateNotracks the number of realtime
updates that occur on each realtime bar. This can happen because thevaripdeclaration allows the value ofupdateNoto be preserved between
realtime updates; it is no longer rolled back at each realtime execution
of the script. The test onbarstate.isnewallows us to reset the update count when a new realtime bar comes in.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,"Becausevariponly affects the behavior of your code in the realtime bar, it follows
that backtest results on strategies designed using logic based onvaripvariables will not be able to reproduce that behavior on historical
bars, which will invalidate test results on them. This also entails that
plots on historical bars will not be able to reproduce the script’s
behavior in realtime.",https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,Previous,https://www.tradingview.com/pine-script-docs/language/variable-declarations
`varip`,Next,https://www.tradingview.com/pine-script-docs/language/variable-declarations
Introduction,"The conditional structures in Pine Script™ areifandswitch.
They can be used:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
Introduction,"Conditional structures, like theforandwhilestructures, can be embedded; you can use aniforswitchinside another structure.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
Introduction,"Some Pine Script™ built-in functions cannot be called from within the
local blocks of conditional structures. They are:alertcondition(),barcolor(),fill(),hline(),indicator(),library(),plot(),plotbar(),plotcandle(),plotchar(),plotshape(),strategy().
This does not entail their functionality cannot be controlled by
conditions evaluated by your script — only that it cannot be done by
including them in conditional structures. Note that whileinput*.()function calls are allowed in local blocks, their functionality is the
same as if they were in the script’s global scope.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
Introduction,"The local blocks in conditional structures must be indented by four
spaces or a tab.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,Anifstructure used for its side effects has the following syntax:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"Code:
if <expression><local_block>{else if <expression><local_block>}[else<local_block>]",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,where:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"When the <expression> following theifevaluates totrue,
the first local block is executed, theifstructure’s execution ends, and the value(s) evaluated at the end of
the local block are returned.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"When the <expression> following theifevaluates tofalse,
the successiveelse ifclauses are evaluated, if there are any. When
the <expression> of one evaluates totrue,
its local block is executed, theifstructure’s execution ends, and the value(s) evaluated at the end of
the local block are returned.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"When no <expression> has evaluated totrueand anelseclause exists, its local block is executed, theifstructure’s execution ends, and the value(s) evaluated at the end of
the local block are returned.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"When no <expression> has evaluated totrueand noelseclause exists,nais returned. The only exception to this is if the structure returns “bool” values — in that case,falseis returned instead.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"Usingifstructures for their side effects can be useful to manage the order flow
in strategies, for example. While the same functionality can often be
achieved using thewhenparameter instrategy.*()calls, code usingifstructures is easier to read:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,"Restricting the execution of your code to specific bars ican be done
usingifstructures, as we do here to restrict updates to our label to the
chart’s last bar:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used for its sideeffects,Note that:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,Anifstructure used to return one or more values has the following syntax:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,"Code:
[<declaration_mode>] [<type>] <identifier> = if <expression><local_block>{else if <expression><local_block>}[else<local_block>]",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,where:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,This is an example:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,"It is possible to omit theelseblock. In this case, if theconditionis false, anemptyvalue (na,false, or"""") will be
assigned to thevar_declarationXvariable.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,"This is an example showing hownais
returned when no local block is executed. Ifclose > openisfalsein here,nais
returned:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,"Scripts can containifstructures with nestedifand other
conditional structures. For example:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`if` used to return avalue,"However, nesting these structures is not recommended from a performance
perspective. When possible, it is typically more optimal to compose a
singleifstatement with multiple logical operators rather than
several nestedifblocks:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,"Theswitchstructure exists in two forms. One switches on the different values of a
key expression:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,"Code:
[[<declaration_mode>] [<type>] <identifier> = ]switch <expression>{<expression> => <local_block>}=> <local_block>",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,"The other form does not use an expression as a key; it switches on the
evaluation of different expressions:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,"Code:
[[<declaration_mode>] [<type>] <identifier> = ]switch{<expression> => <local_block>}=> <local_block>",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,where:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,"Only one local block of aswitchstructure is executed. It is thus astructured switchthat doesn’tfall throughcases. Consequently,breakstatements are unnecessary.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,Both forms are allowed as the value used to initialize a variable.,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch`structure,"As with theifstructure, if no local block is exectuted,
the expression returns eitherfalse(when other local blocks return a “bool” value) orna(in all other cases).",https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch` with anexpression,Let’s look at an example of aswitchusing an expression:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch` with anexpression,Note that:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch` without anexpression,This is an example of aswitchstructure which does not use an expression:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
`switch` without anexpression,Note that:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
Matching local block typerequirement,"When multiple local blocks are used in structures, the type of the
return value of all its local blocks must match. This applies only if
the structure is used to assign a value to a variable in a declaration,
because a variable can only have one type, and if the statement returns
two incompatible types in its branches, the variable type cannot be
properly determined. If the structure is not assigned anywhere, its
branches can return different values.",https://www.tradingview.com/pine-script-docs/language/conditional-structures
Matching local block typerequirement,This code compiles fine becausecloseandopenare both of thefloattype:,https://www.tradingview.com/pine-script-docs/language/conditional-structures
Matching local block typerequirement,"This code does not compile because the first local block returns afloatvalue, while the second one returns astring, and the result
of theif-statement is assigned to thexvariable:",https://www.tradingview.com/pine-script-docs/language/conditional-structures
Matching local block typerequirement,Previous,https://www.tradingview.com/pine-script-docs/language/conditional-structures
Matching local block typerequirement,Next,https://www.tradingview.com/pine-script-docs/language/conditional-structures
Introduction,"Loops are structures that repeatedly execute a block of statements based on specified criteria. They allow scripts to perform repetitive tasks without requiring duplicated lines of code. Pine Script™ features three distinct loop types:for,while, andfor…in.",https://www.tradingview.com/pine-script-docs/language/loops
Introduction,Every loop structure in Pine Script™ consists of two main parts: aloop headerand aloop body. The loop header determines the criteria under which the loop executes. The loop body is the indented block of code (local block) that the script executes on each loop cycle (iteration) as long as the header’s conditions remain valid. See theCommon characteristicssection to learn more.,https://www.tradingview.com/pine-script-docs/language/loops
Introduction,"Understanding when and how to use loops is essential for making the most of the power of Pine Script™. Inefficient orunnecessaryusage of loops can lead to suboptimal runtime performance. However, effectively using loopswhen necessaryenables scripts to perform a wide range of calculations that would otherwise be impractical or impossible without them.",https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,Pine’sexecution modelandtime seriesstructure make loopsunnecessaryin many situations.,https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,"When a user adds a Pine script to a chart, it runs within the equivalent of alarge loop, executing its code once oneveryhistorical bar and realtime tick in the available data. Scripts can access the values from the executions on previous bars with thehistory-referencing operator, and calculated values canpersistacross executions when assigned to variables declared with thevarorvaripkeywords. These capabilities enable scripts to utilize bar-by-bar calculations to accomplish various tasks instead of relying on explicit loops.",https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,"In addition, severalbuilt-ins, such as those in theta.*namespace, are internally optimized to eliminate the need to use loops for various calculations.",https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,"Let’s consider a simple example demonstrating unnecessary loop usage in Pine Script™. To calculate the averagecloseover a specified number of bars, newcomers to Pine may write a code like the following, which uses aforloop to calculate the sum of historical values overlengthInputbars and divides the result by thelengthInput:",https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,,https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,"Using aforloop is anunnecessary, inefficient way to accomplish tasks like this in Pine. There are several ways to leverage theexecution modeland the available built-ins to eliminate this loop. Below, we replaced these calculations with a simple call to theta.sma()function. This code is shorter, and it achieves the same result much more efficiently:",https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,,https://www.tradingview.com/pine-script-docs/language/loops
When loops areunnecessary,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
When loops arenecessary,"Although Pine’sexecution model,time series, and availablebuilt-insoften eliminate the need for loops in many cases, not all iterative tasks have loop-free alternatives. Loopsare necessaryfor several types of tasks, including:",https://www.tradingview.com/pine-script-docs/language/loops
When loops arenecessary,"For example, a loop isnecessaryto identify which past bars’highvalues are above the current bar’shighbecause the current value isnotobtainable during a script’s executions on previous bars. The script can only access the current bar’s value while it executes on that bar, and it mustlook backthrough the historical series during that execution to compare the previous values.",https://www.tradingview.com/pine-script-docs/language/loops
When loops arenecessary,"The script below uses aforloop to compare thehighvalues oflengthInputprevious bars with the last historical bar’shigh. Within the loop, it callslabel.new()to draw a circularlabelabove each past bar that has ahighvalue exceeding that of the last historical bar:",https://www.tradingview.com/pine-script-docs/language/loops
When loops arenecessary,,https://www.tradingview.com/pine-script-docs/language/loops
When loops arenecessary,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Commoncharacteristics,"Thefor,while, andfor…inloop statements all have similarities in their structure, syntax, and general behavior. Before we explore each specific loop type, let’s familiarize ourselves with these characteristics.",https://www.tradingview.com/pine-script-docs/language/loops
Structure andsyntax,"In any loop statement, programmers define the criteria under which a script remains in a loop and performsiterations, where an iteration refers toone executionof the code within the loop’slocal block(body). These criteria are part of theloop header. A script evaluates the header’s criteriabeforeeach iteration, only allowing new iterations to occur while they remain valid. When the header’s criteria are no longer valid, the scriptexitsthe loop and skips over its body.",https://www.tradingview.com/pine-script-docs/language/loops
Structure andsyntax,"The specific header syntax varies with each loop statement (for,while, orfor…in) because each usesdistinctcriteria to control its iterations. Effective use of loops entails choosing the structure with control criteria best suited for a script’s required tasks. See the`for` loops,`while` loops, and`for…in` loopssections below for more information on each loop statement and its control criteria.",https://www.tradingview.com/pine-script-docs/language/loops
Structure andsyntax,All loop statements in Pine Script™ follow the same general syntax:,https://www.tradingview.com/pine-script-docs/language/loops
Structure andsyntax,"Code:
[var_declaration =] loop_headerstatements | continue | breakreturn_expression",https://www.tradingview.com/pine-script-docs/language/loops
Structure andsyntax,Where:,https://www.tradingview.com/pine-script-docs/language/loops
Scope,"All code lines that a script will execute within a loop must have an indentation offour spacesor atabrelative to the loop’s header. The indented lines following the header define the loop’s body. This code represents alocal block, meaning that all the definitions within the body are accessible only during the loop’s execution. In other words, the code within the loop’s body is part of itslocal scope.",https://www.tradingview.com/pine-script-docs/language/loops
Scope,"Scripts can modify andreassignmost variables fromouterscopes inside a loop. However, any variables declared within the loop’s body strictly belong to that loop’s local scope. A scriptcannotaccess a loop’s declared variablesoutsideits local block.",https://www.tradingview.com/pine-script-docs/language/loops
Scope,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Scope,"The body of any Pine loop statement can includeconditional structuresandnestedloop statements. When a loop includes nested structures, each structure within the body maintains adistinctlocal scope. For example, variables declared within anouterloop’s scope are accessible to aninnerloop. However, any variables declared within the inner loop’s scope arenotaccessible to the outer loop.",https://www.tradingview.com/pine-script-docs/language/loops
Scope,"The simple example below demonstrates how a loop’s local scope works. This script callslabel.new()within aforloop on the last historical bar to drawlabelsabovelengthInputpast bars. The color of each label depends on thelabelColorvariable declaredwithinthe loop’s local block, and each label’s location depends on the loop counter (i):",https://www.tradingview.com/pine-script-docs/language/loops
Scope,,https://www.tradingview.com/pine-script-docs/language/loops
Scope,"In the above code, theiandlabelColorvariables are only accessible to theforloop’s local scope. They arenotusable within any outer scopes. Here, we added alabel.new()callafterthe loop withbar_index - ias thexargument andlabelColoras thecolorargument. This code causes acompilation errorbecause neitherinorlabelColorare valid variables in the outer scope:",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,Every loop in Pine Script™ implicitlyreturnsa result. The values a loop returns come from thelatestexecution of thelastexpression or nested structure within the loop body as of thefinaliteration. Loops returnnavalues when no iterations occur. A loop’s returned results areusableonly if they are not of thevoidtype and the script assigns a variable or tupledeclarationto the loop statement. The declared variables hold the values from the return expression for use in additional calculations outside the loop’sscope.,https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,"The values a loop returns may come from evaluating the last written expression or nested code block on thefinaliteration. However, a loop’s body can includecontinueandbreakkeywords to control the flow of iterations beyond the criteria the loop header specifies, which can also affect the returned results. Programmers often include these keywords withinconditional structuresto control how iterations behave when certain conditions occur.",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,"Thecontinuekeyword instructs a script toskipthe remaining statements and expressions in the current loop iteration, re-evaluate the loop header’s criteria, and proceed to thenextiteration. The scriptexitsthe loop if the header’s criteria do not allow another iteration.",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,"Thebreakkeyword instructs a script tostopthe loop entirely and immediatelyexitat that point without allowing any subsequent iterations. After breaking the loop, the script skips any remaining code within the loop’s body anddoes notre-evaluate the header’s criteria.",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,"If a loop stopsprematurelydue to acontinueorbreakkeyword, it returns the values from thelast iterationwhere the scriptevaluatedthe return expression. If the scriptdid notevaluate the return expression across any of the loop’s iterations, the loop returnsnaresults.",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,"The example below selectively displays numbers from anarraywithin alabelon the last historical bar. It uses afor…inloop to iterate through the array’s elements and build a “string” to use as the displayed text. The loop’s body contains anifstatement that controls the flow of specific iterations. If thenumberin the current iteration is 8, the script immediatelyexitsthe loop using thebreakkeyword. Otherwise, if thenumberis even, itskipsthe rest of the current iteration and moves to the next one using thecontinuekeyword.",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,"If neither of theifstatement’s conditions occur, the script evaluates thelast expressionwithin the loop’s body (i.e., the return expression), which converts the currentnumberto a “string” and concatenates the result with thetempStringvalue. The loop returns thelast evaluated resultfrom this expression after termination. The script assigns the returned value to thefinalLabelTextvariable and uses that variable as thetextargument in thelabel.new()call:",https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,,https://www.tradingview.com/pine-script-docs/language/loops
Keywords and returnexpressions,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"Theforloop statement creates acount-controlledloop, which uses acountervariable to manage the executions of its local code block over adefined numberof iterations.",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,Pine Script™ uses the following syntax to define aforloop:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"Code:
[var_declaration =] for counter = from_num to to_num [by step_num]statements | continue | breakreturn_expression",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,Where the following parts define theloop header:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"See theCommon characteristicssection above for detailed information about thevar_declaration,statements,continue,break, andreturn_expressionparts of the loop’s syntax.",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,This simple script demonstrates aforloop that draws severallabelsat future bar indices during its execution on the last historical chart bar:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"Aforloop’s local block repeatedly executes for the number of times required for its counter variable’s value to reach the specifiedto_numboundary. The counter’s defined boundaries and step size directly control the number of loop iterations. Therefore, a script establishes the expected number of iterationsbeforethe loop starts. As such,forloops are best suited for iterative tasks where the maximum number of iterations is knowablein advance.",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"The example below calculates and plots thevolume-weighted moving average(VWMA) ofopenprices acrossmaLengthInputchart bars, and it analyzes the differences between the currentvwmaOpenand pastvwmaOpenvalues within aforloop on the last historical chart bar. On each loop iteration, the script retrieves a previous bar’svwmaOpenvalue, takes the difference between that value and the currentvwmaOpen, and displays the result in alabelat the corresponding historical bar’s opening price:",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"Programmers can useforloops to iterate throughcollections, such asarraysandmatrices. The loop’s counter can serve as anindexfor retrieving or modifying a collection’s contents. For example, this code block usesarray.get()inside aforloop to successively retrieve elements from anarray:",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,"The script below calculates theRSIandmomentumofcloseprices over three different lengths (10, 20, and 50) and displays their values within atableon the last chart bar. It stores “string” values for the header title withinarraysand the “float” values of the calculated indicators within a 2x3matrix. The script uses aforloop to access the elements in the arrays and initialize thedisplayTableheader cells. It then usesnestedforloops to iterate over therowandcolumnindices in thetaMatrixto access its elements, convert their values to strings, and populate the remainingtablecells:",https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,,https://www.tradingview.com/pine-script-docs/language/loops
`for`loops,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Thewhileloop statement creates acondition-controlledloop, which uses aconditional expressionto control the executions of its local block. The loop continues its iterations as long as the conditional expression remainstrue.",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,Pine Script™ uses the following syntax to define awhileloop:,https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Code:
[var_declaration =] while conditionstatements | continue | breakreturn_expression",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Where theconditionin the loop’sheadercan be a literal, variable, expression, or function call that returns a “bool” value.",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"See theCommon characteristicssection above for detailed information about thevar_declaration,statements,continue,break, andreturn_expressionparts of the loop’s syntax.",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Awhileloop’s header evaluates itsconditionbefore each iteration. Consequently, when the script modifies the condition within an iteration, the loop’s header reflects those changes on thenextiteration.",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Depending on the specified condition in the loop header, awhileloop can behave similarly to aforloop, continuing iteration until acountervariable reaches a specified limit. For example, the following script uses aforloop andwhileloop to perform the same task. Both loops draw alabeldisplaying their respective counter value on each iteration:",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,,https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Because awhileloop’s execution depends on its condition remainingtrueand the condition may not change on a specific iteration, theprecisenumber of expected iterations maynotbe knowablebeforethe loop begins, unlike aforloop. Therefore,whileloops are advantageous in scenarios where the exact loop boundaries areunknown.",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"The script below tracks when the chart’sclosecrosses outside Keltner Channels with a user-specified length and channel width. When the price crosses outside the current bar’s channel, the script draws aboxhighlighting all the previousconsecutivebars withclosevalues within that price window. The script uses awhileloop to analyze past bars’ prices and incrementally adjust the left side of each newboxuntil the drawing covers all the latest consecutive bars in the current range.",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,"Awhileloop is necessary in this case because the current bar’s channel values arenotknowable in advance, and wecannotpredict the precise number of iterations required to encapsulate all the consecutive bars within the channel’s range:",https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,,https://www.tradingview.com/pine-script-docs/language/loops
`while`loops,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,"Thefor…inloop statement creates acollection-controlledloop, which uses thecontentsof acollectionto control its iterations. This loop structure is often the preferred approach for looping througharrays,matrices, andmaps.",https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,"Afor…inloop traverses a collectionin order, retrieving one of its stored items on each iteration. Therefore, the loop’s boundaries depend directly on the number ofitems(arrayelements,matrixrows, ormapkey-value pairs). As such, similar to aforloop, a script establishes the expected number offor…inloop iterationsbeforethe loop starts.",https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,Pine Script™ featurestwogeneral forms of thefor…inloop statement. Thefirst formuses the following syntax:,https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,"Code:
[var_declaration =] for item in collection_idstatements | continue | breakreturn_expression",https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,Whereitemis avariablethat holds sequential values from the specifiedcollection_id. The variable’s value starts with the collection’sfirst itemand takes on successive items in order after each iteration. This form is convenient when a script must access values from anarrayormatrixiteratively but does not require the item’s index in its calculations.,https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,Thesecond formhas a slightly different syntax that includes atuplein itsheader:,https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,"Code:
[var_declaration =] for [index, item] in collection_idstatements | continue | breakreturn_expression",https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,Whereindexis a variable that contains theindexorkeyof the retrieveditem. This form is convenient when a task requires using a collection’s itemsandtheir indices in iterative calculations. This form of thefor…inloop is required when directly iterating through the contents of amap. Seethis sectionfor more information.,https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,"See theCommon characteristicssection above for detailed information about thevar_declaration,statements,continue,break, andreturn_expressionparts of the loop’s syntax.",https://www.tradingview.com/pine-script-docs/language/loops
`for…in`loops,The iterative behavior of afor…inloop depends on thetypeof collection the header specifies as thecollection_id:,https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"Pine scripts can iterate over the elements ofarraysusing any loop structure. However, thefor…inloop is typically the most convenient because it automatically verifies the size of anarraywhen controlling iterations. With other loop structures, programmers must carefully set the header’s boundaries or conditions topreventthe loop from attempting to access an element at anonexistentindex.",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"For example, one can use aforloop to access an array’s elements using the counter variable as the lookup index in functions such asarray.get(). However, to preventout-of-boundserrors, programmers must ensure the counter always represents avalid index. Additionally, if anarraymight beempty, programmers must set conditions to prevent the loop’s execution entirely.",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"The code below shows aforloop whose counter boundaries depend on the number of elements in anarray. If thearrayis empty, containing 0 elements, the header’s final counter value isna, whichpreventsiteration. Otherwise, the final value isone lessthan the array’ssize(i.e., the index of the last element):",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"In contrast, afor…inloop automatically validates an array’s size anddirectlyaccesses its elements, providing a more convenient solution than a traditionalforloop. The line below achieves thesame effectas the code above without requiring the programmer to define boundaries explicitly or use thearray.get()function to access each element:",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"The following example examines bars on a lower timeframe to gauge the strength ofintrabartrends within each chart bar. The script uses arequest.security_lower_tf()call to retrieve anarrayof intrabarhl2prices from a calculatedlowerTimeframe. Then, it uses afor…inloop to access eachpricewithin theintrabarPricesarray and compare the value to the currentcloseto calculate the bar’sstrength. The script plots thestrengthas columns in a separate pane:",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,,https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,Thesecond formof thefor…inloop is a convenient solution when a script’s calculations require accessing each elementandcorresponding index within anarray:,https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"For example, suppose we want to display anumeratedlist ofarrayelements within alabelwhile excluding values at specific indices. We can use the second form of thefor…inloop structure to accomplish this task. The simple script below declares astringArrayvariable that references anarrayof predefined “string” values. On the last historical bar, the script uses afor…inloop to access eachindexandelementin thestringArrayto construct thelabelText, which it uses in alabel.new()call after the loop ends:",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,,https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"Let’s explore an advanced example demonstrating the utility offor…inloops. The following indicator draws a fixed number of horizontallinesat calculatedpivot highlevels, and it analyzes the lines within a loop to determine which ones represent active (uncrossed) pivots.",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,"Each time the script detects a new pivot high point, it creates a newline,insertsthat line at the beginning of thepivotLinesarray, then removes the oldest element anddeletesits ID. The script accesses eachlinewithin thearrayusing afor…inloop, analyzing andmodifyingthe properties of thepivotLineretrieved on each iteration. When the currenthighcrosses above thepivotLine, the script changes its style to signify that it is no longer an active level. Otherwise, it extends the line’sx2coordinate and uses itspriceto calculate the averageactivepivot value. The script also plots each pivot high value and the average active pivot for visual reference:",https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,,https://www.tradingview.com/pine-script-docs/language/loops
Looping througharrays,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"Pine scripts can iterate over the contents of amatrixin several different ways. Unlikearrays,matricesusetwoindices to reference their elements because they store data in arectangularformat. The first index refers torows, and the second refers tocolumns. If a programmer opts to usefororwhileloops to iterate throughmatricesinstead of usingfor…in, they must carefully define the loop boundaries or conditions to avoidout-of-boundserrors.",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"This code block shows aforloop that performsrow-wiseiteration, looping through eachrow indexin amatrixand using the value in amatrix.row()call to retrieve a rowarray. If thematrixis empty, the loop statement uses a final loop counter value ofnatopreventiteration. Otherwise, the final counter isone lessthan therow count, which represents thelastrow index:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"Thefor…inloop statement is the more convenient approach to loop over and access the rows of amatrixin order, as it automatically validates the number of rows and retrieves anarrayof the current row’s elements on each iteration:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"When a script’s calculations require access to each row from a matrix and its correspondingindex, programmers can use thesecond formof thefor…inloop:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"The following example displays a custom “string” representing the rows of amatrixwith extra information, which it displays within alabel. When the script executes on the last historical bar, it creates a 3x3randomMatrixpopulated withrandomvalues. Then, using thefirst formof thefor…inloop, the script iterates through eachrowin therandomMatrixto create a “string” representing the row’s contents, itsaverage, and whether the average is above 0.5, and it concatenates that “string” with thelabelText. After the loop ends, the script creates alabeldisplaying thelabelTextvalue:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"Working withmatricesoften entails iteratively accessing theirelements, not just their rows and columns, typically usingnested loops. For example, this code block uses an outerforloop to iterate over row indices. The innerforloop iterates over column indices oneachouter loop iteration and callsmatrix.get()to access an element:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"Alternatively, a more convenient approach for this type of task is to use nestedfor…inloops. The outerfor…inloop in this code block retrieves each rowarrayin amatrix, and the innerfor…instatementloops through that array:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"The script below creates a 3x2matrix, then accesses and modifies its elements within nestedfor…inloops. Both loops use thesecond formof thefor…instatement to retrieve index values and corresponding items. The outer loop accesses a row index and rowarrayfrom thematrix. The inner loop accesses each index and respective element from thatarray.",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,"Within the nested loop’s iterations, the script converts eachelementto a “string” and initializes atablecell at therowIndexrow andcolIndexcolumn. Then, it uses the loop header variables withinmatrix.set()to update thematrixelement. After the outer loop terminates, the script displays a “string” representation of theupdatedmatrixwithin alabel:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmatrices,,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"Thefor…inloop statement is the primary, most convenient approach for iterating over the data within Pine Script™maps.",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"Unlikearraysandmatrices, maps areunordered collectionsthat store data inkey-value pairs. Rather than traversing an internal lookup index, a script references thekeysfrom the pairs within amapto access itsvalues. Therefore, when looping through amap, scripts must performpair-wiseiteration, which entails retrieving key-value pairs across iterations rather than indexedelementsorrows.",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"One way to access the data from amapis to use themap.keys()function, which returns anarraycontaining all thekeysfrom the map, sorted in their insertion order. A script can use thefor…instructure toloop through the arrayof keys and callmap.get()to retrieve corresponding values:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"However, the more convenient,recommendedapproach is to loop through amapdirectlywithoutcreating newarrays. To loop through amapdirectly, use thesecond formof thefor…inloop statement. Using this loop with amapcreates atuplecontaining akeyand respectivevalueon each iteration. As when looping through amap.keys()array, thisdirectfor…inloop iterates through a map’s contents in their insertion order:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"Let’s consider a simple example demonstrating how afor…inloop works on amap. When the script below executes on the last historical bar, it declares asimpleMapvariable with an assignedmapof “string” keys and “float” values. The scriptputsthe keys from thenewKeysarray into the collection with correspondingrandomvalues. It then uses afor…inloop to iterate through the key-value pairs from thesimpleMapand construct thedisplayText. After the loop ends, the script shows thedisplayTextwithin alabelto visualize the result:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,Note that:,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,Notice!,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"Scripts can modify the sizes ofarraysandmatriceswhile iterating through them with afor…inloop. However, it’s crucial to note that while a script iterates through amapwith afor…inloop, that map’s sizecannotchange. Attempting toaddorremovekey-value pairs while looping directly through amapwill cause aruntime error.",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,"To modify a map’s size within a loop, programmers can do any of the following:",https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,Previous,https://www.tradingview.com/pine-script-docs/language/loops
Looping throughmaps,Next,https://www.tradingview.com/pine-script-docs/language/loops
Introduction,"The Pine Script™ type system determines the compatibility of a script’s
values with various functions and operations. While it’s possible to
write simple scripts without knowing anything about the type system, a
reasonable understanding of it is necessary to achieve any degree of
proficiency with the language, and an in-depth knowledge of its
subtleties allows programmers to harness its full potential.",https://www.tradingview.com/pine-script-docs/language/type-system
Introduction,"Pine Script™ usestypesto classify all values, and it usesqualifiersto determine whether values and references are constant, established on the first script execution, or dynamic across executions. This system applies to all Pine values and references, including literals, variables, expressions, function returns, and function arguments.",https://www.tradingview.com/pine-script-docs/language/type-system
Introduction,"The type system closely intertwines with Pine’sexecution modelandtime seriesconcepts.
Understanding all three is essential for making the most of the power of
Pine Script™.",https://www.tradingview.com/pine-script-docs/language/type-system
Introduction,"Notice!For the sake of brevity, we often use “type” to refer to a “qualified
type”.",https://www.tradingview.com/pine-script-docs/language/type-system
Qualifiers,"Pine Script™qualifiersidentify when values are accessible to a
script:",https://www.tradingview.com/pine-script-docs/language/type-system
Qualifiers,"Pine Script™ bases the dominance of type qualifiers on the following
hierarchy:const < input < simple < series, where “const” is
theweakestqualifier and “series” is thestrongest. The qualifier
hierarchy translates to this rule: whenever a variable, function, or
operation is compatible with a specific qualified type, values withweakerqualifiers are also allowed.",https://www.tradingview.com/pine-script-docs/language/type-system
Qualifiers,"Scripts always qualify their expressions’ returned types based on thedominant qualifierin their calculations. For example, evaluating an
expression that involves “input” and “series” values will return a
value qualified as “series”. Furthermore, scriptscannotchange a
value’s qualifier to one that’sloweron the hierarchy. If a value
acquires astrongerqualifier (e.g., a value initially inferred as
“simple” becomes “series” later in the script’s executions), that
state is irreversible.",https://www.tradingview.com/pine-script-docs/language/type-system
Qualifiers,"It’s important to note that “series” values are theonlyones
that can change across script executions, including those from various
built-ins, such ascloseandvolume,
as well as the results of expressions involving “series” values. All
values qualified as “const”, “input”, or “simple” remain
consistent across all script executions.",https://www.tradingview.com/pine-script-docs/language/type-system
const,"Values or references qualified as “const” are established atcompile
time, before the script starts its executions. Compilation initially
occurs when saving a script in the Pine Editor, which does not require
it to run on a chart. Values or references with the “const” qualifiernever changebetween script executions, not even on the first
execution.",https://www.tradingview.com/pine-script-docs/language/type-system
const,"Allliteralvalues and the results returned by expressions involving
only values qualified as “const” automatically adopt the “const”
qualifier.",https://www.tradingview.com/pine-script-docs/language/type-system
const,These are some examples of literal values:,https://www.tradingview.com/pine-script-docs/language/type-system
const,"OurStyle guiderecommends using uppercase SNAKE_CASE to name “const” variables for
readability. While not a requirement, one can also use thevarkeyword when declaring “const” variables so the script only
initializes them on thefirst barof the dataset. Seethis sectionof our User Manual for more information.",https://www.tradingview.com/pine-script-docs/language/type-system
const,"Below is an example that uses “const” values within theindicator()andplot()functions, which both require a value of the “const string” qualified
type as theirtitleargument:",https://www.tradingview.com/pine-script-docs/language/type-system
const,"The following example will raise a compilation error since it usessyminfo.ticker,
which returns a “simple” value because it depends on chart information
that’s only accessible after the script’s first execution:",https://www.tradingview.com/pine-script-docs/language/type-system
const,"Theconstkeyword allows the declaration of variables and parameters with constantvalue assignments. Declaring a variable with this keyword instructs
the script to forbid usingreassignmentandcompound assignmentoperations on it. For example, this script declares themyVarvariable
with the keyword, then attempts to assign a new “float” value to the
variable with the addition assignment operator
(+=),
resulting in a compilation error:",https://www.tradingview.com/pine-script-docs/language/type-system
const,"It’s crucial to note that declaring a variable with theconstkeyword forces it to maintain a constant reference to the value returned
by a specific expression, but thatdoes notnecessarily define the
nature of the assigned value. For example, a script can declare aconstvariable that maintains a constant reference to an expression returning
theIDof aspecial type. Although the script cannotreassignthe
variable, the assigned ID is a “series” value:",https://www.tradingview.com/pine-script-docs/language/type-system
input,"Most values qualified as “input” are established after initialization
via theinput.*()functions. These functions produce values that users
can modify within the “Inputs” tab of the script’s settings. When one
changes any of the values in this tab, the scriptrestartsfrom the
beginning of the chart’s history to ensure its inputs are consistent
throughout its executions. Some of Pine’s built-in variables, such aschart.bg_coloralso use the “input” qualifier, even thoughinput.*()functions do
not return them, since the script receives their values atinput time.",https://www.tradingview.com/pine-script-docs/language/type-system
input,"Notice!Theinput.source()andinput.enum()functions are exceptions in theinput.*()namespace, as theydo notreturn values qualified as “input”. Theinput.source()function returns “series” values since built-in variables such asopenandclose,
as well as the values from another script’s plots, have the “series”
qualifier. Theinput.enum()function returns a “simple” result because all values belonging toenumsare
available on the first script execution. See this manual’sInputspage for more
information.",https://www.tradingview.com/pine-script-docs/language/type-system
input,"The following script plots the value of asourceInputfrom thesymbolInputandtimeframeInputcontext. Therequest.security()call is valid in this script since itssymbolandtimeframeparameters allow “series string” arguments by default, meaning they can also accept “input string” values because the “input” qualifier isloweron the hierarchy:",https://www.tradingview.com/pine-script-docs/language/type-system
simple,"Values qualified as “simple” are available on the first script
execution, and they remain consistent across subsequent executions.",https://www.tradingview.com/pine-script-docs/language/type-system
simple,"Users can explicitly define variables and parameters that accept
“simple” values by including thesimplekeyword in their
declaration.",https://www.tradingview.com/pine-script-docs/language/type-system
simple,"Many built-in variables return “simple” qualified values because they
depend on information that a script can only obtain once it starts
running on the chart. Additionally, many built-in functions require
“simple” arguments that do not change over time. Wherever a script
allows “simple” values, it can also accept values qualified as
“input” or “const”.",https://www.tradingview.com/pine-script-docs/language/type-system
simple,"This script highlights the background to warn users that they’re using
a non-standard chart type. It uses the value ofchart.is_standardto calculate theisNonStandardvariable, then uses that variable’s
value to calculate awarningColorthat also references a “simple”
value. Thecolorparameter ofbgcolor()allows a “series color” argument, meaning it can also accept a
“simple color” value since “simple” is lower on the hierarchy:",https://www.tradingview.com/pine-script-docs/language/type-system
series,"Values qualified as “series” provide the most flexibility in scripts
since they can change across executions.",https://www.tradingview.com/pine-script-docs/language/type-system
series,"Users can explicitly define variables and parameters that accept
“series” values by including theserieskeyword in their
declarations.",https://www.tradingview.com/pine-script-docs/language/type-system
series,"Built-in variables such asopen,high,low,close,volume,time,
andbar_index,
and the result from any expression using such built-ins, are qualified
as “series”. The result of any function or operation that returns a
dynamic value will always be a “series”, as will the results from
using the history-referencing operator[]to access historical values. Wherever a script allows “series” values,
it will also accept values with any other qualifier, as “series” is
thehighestqualifier on the hierarchy.",https://www.tradingview.com/pine-script-docs/language/type-system
series,"This script displays thehighestandlowestvalue of asourceInputoverlengthInputbars. The values assigned to
thehighestandlowestvariables are of the “series float”
qualified type, as they can change throughout the script’s execution:",https://www.tradingview.com/pine-script-docs/language/type-system
Types,"Pine Script™typesclassify values and determine the functions and
operations they’re compatible with. They include:",https://www.tradingview.com/pine-script-docs/language/type-system
Types,"Fundamental types refer to the underlying nature of a value, e.g., a
value of 1 is of the “int” type, 1.0 is of the “float” type,
“AAPL” is of the “string” type, etc. Special types and user-defined
types utilizeIDsthat refer to objects of a specific type. For
example, a value of the “label” type contains an ID that acts as apointerreferring to a “label” object. The “void” type refers to
the output from a function ormethodthat does not return a usable value.",https://www.tradingview.com/pine-script-docs/language/type-system
Types,"Pine Script™ can automatically convert values from some types into
others. The auto-casting rules are:int → float → bool. See theType castingsection of this page for more information.",https://www.tradingview.com/pine-script-docs/language/type-system
Types,"In most cases, Pine Script™ can automatically determine a value’s type.
However, we can also use type keywords toexplicitlyspecify types for
readability and for code that requires explicit definitions (e.g.,
declaring a variable assigned tona). For
example:",https://www.tradingview.com/pine-script-docs/language/type-system
int,"Values of the “int” type represent integers, i.e., whole numbers
without any fractional quantities.",https://www.tradingview.com/pine-script-docs/language/type-system
int,"Integer literals are numeric values written indecimalnotation. For
example:",https://www.tradingview.com/pine-script-docs/language/type-system
int,"Built-in variables such asbar_index,time,timenow,dayofmonth,
andstrategy.wintradesall return values of the “int” type.",https://www.tradingview.com/pine-script-docs/language/type-system
float,"Values of the “float” type represent floating-point numbers, i.e.,
numbers that can contain whole and fractional quantities.",https://www.tradingview.com/pine-script-docs/language/type-system
float,"Floating-point literals are numeric values written with a.delimiter.
They may also contain the symboleorE(which means “10 raised to
the power of X”, where X is the number after theeorEsymbol).
For example:",https://www.tradingview.com/pine-script-docs/language/type-system
float,The internal precision of “float” values in Pine Script™ is 1e-16.,https://www.tradingview.com/pine-script-docs/language/type-system
float,"Built-in variables such asclose,hlcc4,volume,ta.vwap,
andstrategy.position_sizeall return values of the “float” type.",https://www.tradingview.com/pine-script-docs/language/type-system
bool,"Values of the “bool” type represent the truth value of a comparison or
condition, which scripts can use inconditional structuresand other expressions.",https://www.tradingview.com/pine-script-docs/language/type-system
bool,There are only two literals that represent boolean values:,https://www.tradingview.com/pine-script-docs/language/type-system
bool,"Aboolvariable can never bena, and anyconditional
structurethat can returnnawill returnfalseinstead. For example, anifcondition returnsboolvalues, when the condition is not met and theelseblock is not specified, it will returnsfalse.",https://www.tradingview.com/pine-script-docs/language/type-system
bool,"Built-in variables such asbarstate.isfirst,chart.is_heikinashi,session.ismarket,
andtimeframe.isdailyall return values of the “bool” type.",https://www.tradingview.com/pine-script-docs/language/type-system
color,"Color literals have the following format:#RRGGBBor#RRGGBBAA. The
letter pairs representhexadecimalvalues between00andFF(0 to
255 in decimal) where:",https://www.tradingview.com/pine-script-docs/language/type-system
color,These are examples of “color” literals:,https://www.tradingview.com/pine-script-docs/language/type-system
color,"Pine Script™ also hasbuilt-in color constants, includingcolor.green,color.red,color.orange,color.blue(the default color inplot*()functions and many of the default
color-related properties indrawing types), etc.",https://www.tradingview.com/pine-script-docs/language/type-system
color,"When using built-in color constants, it is possible to add transparency
information to them via thecolor.new()function.",https://www.tradingview.com/pine-script-docs/language/type-system
color,"Note that when specifying red, green or blue components incolor.*()functions, we use “int” or “float” arguments with values between 0
and 255. When specifying transparency, we use a value between 0 and 100,
where 0 means fully opaque and 100 means completely transparent. For
example:",https://www.tradingview.com/pine-script-docs/language/type-system
color,See the User Manual’s page oncolorsfor more information on using colors in scripts.,https://www.tradingview.com/pine-script-docs/language/type-system
string,"Values of the “string” type represent sequences of letters, numbers,
symbols, spaces, and other characters.",https://www.tradingview.com/pine-script-docs/language/type-system
string,"String literals in Pine are characters enclosed in single or double
quotation marks. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
string,"Single and double quotation marks are functionally equivalent in Pine
Script™. A “string” enclosed within double quotation marks can contain
any number of single quotation marks and vice versa:",https://www.tradingview.com/pine-script-docs/language/type-system
string,"Scripts canescapethe enclosing delimiter in a “string” using the
backslash character (\). For example:",https://www.tradingview.com/pine-script-docs/language/type-system
string,"We can create “string” values containing the new line escape character
(\n) for displaying multi-line text withplot*()andlog.*()functions and objects ofdrawing types. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
string,"We can use the+operator
to concatenate “string” values:",https://www.tradingview.com/pine-script-docs/language/type-system
string,"The built-ins in thestr.*()namespace create “string” values using
specialized operations. For instance, this script creates aformatted
stringto represent “float” price values and displays the result
using a label:",https://www.tradingview.com/pine-script-docs/language/type-system
string,"See our User Manual’s page onText and shapesfor
more information about displaying “string” values from a script.",https://www.tradingview.com/pine-script-docs/language/type-system
string,"Built-in variables such assyminfo.tickerid,syminfo.currency,
andtimeframe.periodreturn values of the “string” type.",https://www.tradingview.com/pine-script-docs/language/type-system
plot andhline,"Pine Script™‘splot()andhline()functions return IDs that respectively reference instances of the
“plot” and “hline” types. These types display calculated values and
horizontal levels on the chart, and one can assign their IDs to
variables for use with the built-infill()function.",https://www.tradingview.com/pine-script-docs/language/type-system
plot andhline,"For example, this script plots two EMAs on the chart and fills the space
between them using afill()call:",https://www.tradingview.com/pine-script-docs/language/type-system
plot andhline,"It’s important to note that unlike other special types, there is noplotorhlinekeyword in Pine to explicitly declare a variable’s
type as “plot” or “hline”.",https://www.tradingview.com/pine-script-docs/language/type-system
plot andhline,"Users can control where their scripts’ plots display via the variables
in thedisplay.*namespace and aplot*()function’sforce_overlayparameter. Additionally, one script can use the values from another
script’s plots asexternal inputsvia theinput.source()function (see our User Manual’s section onsource inputs).",https://www.tradingview.com/pine-script-docs/language/type-system
Drawingtypes,"Pine Script™ drawing types allow scripts to create custom drawings on
charts. They include the following:line,linefill,box,polyline,label,
andtable.",https://www.tradingview.com/pine-script-docs/language/type-system
Drawingtypes,"Each type also has a namespace containing all the built-ins that create
and manage drawing instances. For example, the following*.new()constructors create new objects of these types in a script:line.new(),linefill.new(),box.new(),polyline.new(),label.new(),
andtable.new().",https://www.tradingview.com/pine-script-docs/language/type-system
Drawingtypes,"Each of these functions returns anIDwhich is a reference that
uniquely identifies a drawing object. IDs are always qualified as
“series”, meaning their qualified types are “series line”, “series
label”, etc. Drawing IDs act like pointers, as each ID references a
specific instance of a drawing in all the functions from that drawing’s
namespace. For instance, the ID of a line returned by aline.new()call is used later to refer to that specific object once it’s time to
delete it withline.delete().",https://www.tradingview.com/pine-script-docs/language/type-system
Chartpoints,"Chart points are special types that represent coordinates on the chart.
Scripts use the information fromchart.pointobjects to determine the chart locations oflines,boxes,polylines,
andlabels.",https://www.tradingview.com/pine-script-docs/language/type-system
Chartpoints,"Objects of this type contain threefields:time,index, andprice. Whether a drawing instance uses thetimeorpricefield
from achart.pointas an x-coordinate depends on the drawing’sxlocproperty.",https://www.tradingview.com/pine-script-docs/language/type-system
Chartpoints,"We can use any of the following functions to create chart points in a
script:",https://www.tradingview.com/pine-script-docs/language/type-system
Chartpoints,"This example draws lines connecting the previous bar’shighto the current bar’slowon
each chart bar. It also displays labels at both points of each line. The
line and labels get their information from thefirstPointandsecondPointvariables, which reference chart points created usingchart.point_from_index()andchart.point.now():",https://www.tradingview.com/pine-script-docs/language/type-system
Collections,"Collections in Pine Script™ (arrays,matrices,
andmaps) utilize reference
IDs, much like other special types (e.g., labels). The type of the ID
defines the type ofelementsthe collection will contain. In Pine, we
specify array, matrix, and map types by appending atype templateto thearray,matrix,
ormapkeywords:",https://www.tradingview.com/pine-script-docs/language/type-system
Collections,"For example, one can declare an “int” array with a single element
value of 10 in any of the following, equivalent ways:",https://www.tradingview.com/pine-script-docs/language/type-system
Collections,Note that:,https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,"Thetypekeyword allows the creation ofuser-defined types(UDTs) from which
scripts can createobjects. UDTs are composite types; they contain an arbitrary number
offieldsthat can be of any type, including other user-defined types.",https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,The syntax to declare a user-defined type is:,https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,"Code:
[export ]type <UDT_identifier><field_type> <field_name>[ = <value>]...",https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,where:,https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,"This example declares apivotPointUDT with an “int”pivotTimefield and a “float”priceLevelfield that will respectively hold
time and price information about a calculated pivot:",https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,"User-defined types supporttype recursion, i.e., the fields of a UDT
can reference objects of the same UDT. Here, we’ve added anextPivotfield to our previouspivotPointtype that references anotherpivotPointinstance:",https://www.tradingview.com/pine-script-docs/language/type-system
User-definedtypes,"Scripts can use two built-in methods to create and copy UDTs:new()andcopy(). See our User Manual’s page onObjectsto learn more
about working with UDTs.",https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,"Theenumkeyword allows the creation of anenum, otherwise known as anenumeration,enumerated type, orenum type. An enum is a unique type construct containing distinct, named fields representingmembers(i.e., possible values) of the type. Enums allow programmers to control the values accepted by variables, conditional expressions, andcollections, and they facilitate convenient dropdowninputcreation with theinput.enum()function.",https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,The syntax to declare an enum is as follows:,https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,"Code:
[export ]enum <enumName><field_1>[ = <title_1>]<field_2>[ = <title_2>]...<field_N>[ = <title_N>]",https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,where:,https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,"This example declares anmaChoiceenum. Each field within this
declaration represents a distinct member of themaChoiceenum type:",https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,Note that:,https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,"The script below uses themaChoiceenum within aninput.enum()call to create adropdowninput in the “Settings/Inputs” tab that
displays all the field titles. ThemaInputvalue represents the member
of the enum that corresponds to the user-selected title. The script uses
the selected member within aswitchstructure to determine the built-in moving average it calculates:",https://www.tradingview.com/pine-script-docs/language/type-system
Enumtypes,See theEnumspage and theEnum inputsection of theInputspage to learn more about using enums and enum inputs.,https://www.tradingview.com/pine-script-docs/language/type-system
void,"There is a “void” type in Pine Script™. Functions having only
side-effects and returning no usable result return the “void” type. An
example of such a function isalert();
it does something (triggers an alert event), but it returns no usable
value.",https://www.tradingview.com/pine-script-docs/language/type-system
void,"Scripts cannot use “void” results in expressions or assign them to
variables. Novoidkeyword exists in Pine Script™ since one cannot
declare a variable of the “void” type.",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"There is a special value in Pine Script™ calledna,
which is an acronym fornot available. We usenato
represent an undefined value from a variable or expression. It is
similar tonullin Java andNonein Python.",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"Scripts can automatically castnavalues to almost any type. However, in some cases, the compiler cannot
infer the type associated with annavalue
because more than one type-casting rule may apply. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"The above line of code causes a compilation error because the compiler
cannot determine the nature of themyVarvariable, i.e., whether the
variable will reference numeric values for plotting, string values for
setting text in a label, or other values for some other purpose later in
the script’s execution.",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"To resolve such errors, we must explicitly declare the type associated
with the variable. Suppose themyVarvariable will reference “float”
values in subsequent script iterations. We can resolve the error by
declaring the variable with thefloatkeyword:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"or by explicitly casting thenavalue
to the “float” type via thefloat()function:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"To test if the value from a variable or expression isna, we
call thena()function, which returnstrueif the value is undefined. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"Do not use the==comparison operator to test fornavalues, as scripts cannot determine the equality of an undefined value:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,Best coding practices often involve handlingnavalues to prevent undefined values in calculations.,https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"We can ensure the expression also returns an actionable value on the
first bar by replacing the undefined past value with a value from the
current bar. This line of code uses thenz()function to replace the past bar’sclosewith the current bar’sopenwhen the value isna:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"Protecting scripts againstnainstances helps to prevent undefined values from propagating in a
calculation’s results. For example, this script declares anallTimeHighvariable on the first bar. It then uses themath.max()between theallTimeHighand the bar’shighto update theallTimeHighthroughout its execution:",https://www.tradingview.com/pine-script-docs/language/type-system
`na`value,"This script plots a value ofnaon
all bars, as we have not included anynaprotection in the code. To fix the behavior and plot the intended result
(i.e., the all-time high of the chart’s prices), we can usenz()to
replacenavalues in theallTimeHighseries:",https://www.tradingview.com/pine-script-docs/language/type-system
Typetemplates,"Type templates specify the data types that collections
(arrays,matrices, andmaps) can contain.",https://www.tradingview.com/pine-script-docs/language/type-system
Typetemplates,"Templates forarraysandmatricesconsist of a
single type identifier surrounded by angle brackets, e.g.,<int>,<label>, and<PivotPoint>(wherePivotPointis auser-defined type (UDT)).",https://www.tradingview.com/pine-script-docs/language/type-system
Typetemplates,"Templates formapsconsist of
two type identifiers enclosed in angle brackets, where the first
specifies the type ofkeysin each key-value pair, and the second
specifies thevaluetype. For example,<string, float>is a type
template for a map that holdsstringkeys andfloatvalues.",https://www.tradingview.com/pine-script-docs/language/type-system
Typetemplates,Users can construct type templates from:,https://www.tradingview.com/pine-script-docs/language/type-system
Typetemplates,Note that:,https://www.tradingview.com/pine-script-docs/language/type-system
Typetemplates,"Scripts use type templates to declare variables that reference
collections, and when creating new collection instances. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"Pine Script™ includes an automatic type-casting mechanism thatcasts(converts)“int”values to“float”when necessary. Variables
or expressions requiring “float” values can also use “int” values
because any integer can be represented as a floating point number with
its fractional part equal to 0.",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"It’s sometimes necessary to cast one type to another when auto-casting
rules do not suffice. For such cases, the following type-casting
functions are available:int(),float(),bool(),color(),string(),line(),linefill(),label(),box(),
andtable().",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"The example below shows a code that tries to use a “const float” value
as thelengthargument in theta.sma()function call. The script will fail to compile, as it cannot
automatically convert the “float” value to the required “int” type:",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"The code raises the following error:“Cannot call ‘ta.sma’ with
argument ‘length’=‘LENGTH’. An argument of ‘const float’ type was
used but a ‘series int’ is expected.”",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"The compiler is telling us that the code is using a “float” value
where an “int” is required. There is no auto-casting rule to cast a
“float” to an “int”, so we must do the job ourselves. In this
version of the code, we’ve used theint()function to explicitly convert our “float”LENGTHvalue to the
“int” type within theta.sma()call:",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"Explicit type casting is also handy when declaring variables assigned tona, as
explained in theprevious section.",https://www.tradingview.com/pine-script-docs/language/type-system
Typecasting,"For example, once could explicitly declare a variable with a value ofnaas a
“label” type in either of the following, equivalent ways:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"Atupleis a comma-separated set of expressions enclosed in brackets.
When a function,method,
or other local block returns more than one value, scripts return those
values in the form of a tuple.",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"For example, the followinguser-defined functionreturns the sum and product of two “float” values:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"When we call this function later in the script, we use atuple
declarationto declare multiple variables corresponding to the values
returned by the function call:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"Keep in mind that unlike declaring single variables, we cannot
explicitly define the types the tuple’s variables (hlSumandhlProductin this case), will contain. The compiler automatically
infers the types associated with the variables in a tuple.",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"In the above example, the resulting tuple contains values of the same
type (“float”). However, it’s important to note that tuples can
contain values ofmultiple types. For example, thechartInfo()function below returns a tuple containing “int”, “float”, “bool”,
“color”, and “string” values:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,Tuples are especially handy for requesting multiple values in onerequest.security()call.,https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"For instance, thisroundedOHLC()function returns a tuple containing
OHLC values rounded to the nearest prices that are divisible by the
symbol’sminimum
tickvalue. We call this function as theexpressionargument inrequest.security()to request a tuple containing daily OHLC values:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"We can also achieve the same result by directly passing a tuple of
rounded values as theexpressionin therequest.security()call:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"Local blocks ofconditional structures, includingifandswitchstatements, can return tuples. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,and:,https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"However, ternaries cannot contain tuples, as the return values in a
ternary statement are not considered local blocks:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,"Note that all items within a tuple returned from a function are
qualified as “simple” or “series”, depending on its contents. If a
tuple contains a “series” value, all other elements within the tuple
will also adopt the “series” qualifier. For example:",https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,Previous,https://www.tradingview.com/pine-script-docs/language/type-system
Tuples,Next,https://www.tradingview.com/pine-script-docs/language/type-system
Introduction,"Pine Script™ has hundreds ofbuilt-invariables and functions. They
provide your scripts with valuable information and make calculations for
you, dispensing you from coding them. The better you know the built-ins,
the more you will be able to do with your Pine scripts.",https://www.tradingview.com/pine-script-docs/language/built-ins
Introduction,"In this page we present an overview of some of Pine Script™‘s built-in
variables and functions. They will be covered in more detail in the
pages of this manual covering specific themes.",https://www.tradingview.com/pine-script-docs/language/built-ins
Introduction,"All built-in variables and functions are defined in the Pine Script™v6
Reference
Manual. It is
called a “Reference Manual” because it is the definitive reference on
the Pine Script™ language. It is an essential tool that will accompany
you anytime you code in Pine, whether you are a beginner or an expert.
If you are learning your first programming language, make theReference
Manualyour
friend. Ignoring it will make your programming experience with Pine
Script™ difficult and frustrating — as it would with any other
programming language.",https://www.tradingview.com/pine-script-docs/language/built-ins
Introduction,"Variables and functions in the same family share the samenamespace,
which is a prefix to the function’s name. Theta.sma()function, for example, is in thetanamespace, which stands for
“technical analysis”. A namespace can contain both variables and
functions.",https://www.tradingview.com/pine-script-docs/language/built-ins
Introduction,"Some variables have function versions as well, e.g.:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-invariables,"Built-in variables exist for different purposes. These are a few
examples:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"Many functions are used for the result(s) they return. These are a few
examples:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"Some functions do not return a result but are used for their side
effects, which means they do something, even if they don’t return a
result:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"Other functions return a result, but we don’t always use it, e.g.:hline(),plot(),array.pop(),label.new(),
etc.",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"All built-in functions are defined in the Pine Script™v6 Reference
Manual. You can
click on any of the function names listed here to go to its entry in the
Reference Manual, which documents the function’s signature, i.e., the
list ofparametersit accepts and the qualified type of the value(s)
it returns (a function can return more than one result). The Reference
Manual entry will also list, for each parameter:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"All built-in functions have one or more parameters defined in their
signature. Not all parameters are required for every function.",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"Let’s look at theta.vwma()function, which returns the volume-weighted moving average of a source
value. This is its entry in the Reference Manual:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,,https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,The entry gives us the information we need to use it:,https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"Code:
ta.vwma(source, length) → series float",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"This is a call to the function in a line of code that declares amyVwmavariable and assigns the result ofta.vwma(close, 20)to it:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,Note that:,https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"We can also use the parameter names when calling the function. Parameter
names are calledkeyword argumentswhen used in a function call:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"You can change the position of arguments when using keyword arguments,
but only if you use them for all your arguments. When calling functions
with many parameters such asindicator(),
you can also forego keyword arguments for the first arguments, as long
as you don’t skip any. If you skip some, you must then use keyword
arguments so the Pine Script™ compiler can figure out which parameter
they correspond to, e.g.:",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,Mixing things up this way is not allowed:,https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"When calling built-ins, it is critical to ensure that the arguments
you use are of the required qualified type, which will vary for each
parameter.",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,"To learn how to do this, one needs to understand Pine Script™‘stype system. The
Reference Manual entry for each built-in function includes an
“ARGUMENTS” section which lists the qualified type required for the
argument supplied to each of the function’s parameters.",https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,Previous,https://www.tradingview.com/pine-script-docs/language/built-ins
Built-infunctions,Next,https://www.tradingview.com/pine-script-docs/language/built-ins
Introduction,"User-defined functions are functions that you write, as opposed to the
built-in functions in Pine Script™. They are useful to define
calculations that you must do repetitevely, or that you want to isolate
from your script’s main section of calculations. Think of user-defined
functions as a way to extend the capabilities of Pine Script™, when no
built-in function will do what you need.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Introduction,You can write your functions in two ways:,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Introduction,Functions can be located in two places:,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Introduction,"Whether they use one line or multiple lines, user-defined functions have
the following characteristics:",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Single-linefunctions,"Simple functions can often be written in one line. This is the formal
definition of single-line functions:",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Single-linefunctions,"Code:
<function_declaration><identifier>(<parameter_list>) => <return_value><parameter_list>{<parameter_definition>{, <parameter_definition>}}<parameter_definition>[<identifier> = <default_value>]<return_value><statement> | <expression> | <tuple>",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Single-linefunctions,Here is an example:,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Single-linefunctions,"After the functionf()has been declared, it’s possible to call it
using different types of arguments:",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Single-linefunctions,"In the example above, the type of variableaisseriesbecause the
arguments are bothseries. The type of variablebisintegerbecause arguments are bothliteral integers. The type of variablecisseriesbecause the addition of aseriesandliteral integerproduces aseriesresult.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,"Pine Script™ also supports multi-line functions with the following
syntax:",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,"Code:
<identifier>(<parameter_list>) =><local_block><identifier>(<list of parameters>) =><variable declaration>...<variable declaration or expression>",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,where:,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,"Code:
<parameter_list>{<parameter_definition>{, <parameter_definition>}}<parameter_definition>[<identifier> = <default_value>]",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,"The body of a multi-line function consists of several statements. Each
statement is placed on a separate line and must be preceded by 1
indentation (4 spaces or 1 tab). The indentation before the statement
indicates that it is a part of the body of the function and not part of
the script’s global scope. After the function’s code, the first
statement without an indent indicates the body of the function has
ended.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,"Either an expression or a declared variable should be the last statement
of the function’s body. The result of this expression (or variable)
will be the result of the function’s call. For example:",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Multi-linefunctions,"The functiongeom_averagehas two arguments and creates two variables
in the body:aandb. The last statement calls the functionmath.sqrt(an extraction of the square root). Thegeom_averagecall
will return the value of the last expression:(math.sqrt(a + b)).",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Scopes in thescript,"Variables declared outside the body of a function or of other local
blocks belong to theglobalscope. User-declared and built-in
functions, as well as built-in variables also belong to the global
scope.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Scopes in thescript,"Each function has its ownlocalscope. All the variables declared
within the function, as well as the function’s arguments, belong to the
scope of that function, meaning that it is impossible to reference them
from outside --- e.g., from the global scope or the local scope of
another function.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Scopes in thescript,"On the other hand, since it is possible to refer to any variable or
function declared in the global scope from the scope of a function
(except for self-referencing recursive calls), one can say that the
local scope is embedded into the global scope.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Scopes in thescript,"In Pine Script™, nested functions are not allowed, i.e., one cannot
declare a function inside another one. All user functions are declared
in the global scope. Local scopes cannot intersect with each other.",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Functions that return multipleresults,"In most cases a function returns only one result, but it is possible to
return a list of results (atuple-like result):",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Functions that return multipleresults,Special syntax is required for calling such functions:,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Limitations,"User-defined functions can use any of the Pine Script™ built-ins,
except:barcolor(),fill(),hline(),indicator(),library(),plot(),plotbar(),plotcandle(),plotchar(),plotshape()andstrategy().",https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Limitations,Previous,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Limitations,Next,https://www.tradingview.com/pine-script-docs/language/user-defined-functions
Objects,"Notice!This page contains advanced material. If you are a beginning Pine
Script™ programmer, we recommend you become familiar with other, more
accessible Pine Script™ features before you venture here.",https://www.tradingview.com/pine-script-docs/language/objects
Introduction,"Pine Script™ objects are instances ofuser-defined types(UDTs). They
are the equivalent of variables containing parts calledfields, each
able to hold independent values that can be of various types.",https://www.tradingview.com/pine-script-docs/language/objects
Introduction,"Experienced programmers can think of UDTs as methodless classes. They
allow users to create custom types that organize different values under
one logical entity.",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"Before an object can be created, its type must be defined. TheUser-defined typessection of theType systempage
explains how to do so.",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,Let’s define apivotPointtype to hold pivot information:,https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,Note that:,https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"Now that ourpivotPointUDT is defined, we can proceed to create
objects from it. We create objects using the UDT’snew()built-in
method. To create a newfoundPointobject from ourpivotPointUDT,
we use:",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"We can also specify field values for the created object using the
following:",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,Or the equivalent:,https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"At this point, thefoundPointobject’sxfield will contain the
value of thetimebuilt-in when it is created,ywill contain the value ofhighand thexlocfield will contain its default value ofxloc.bar_timebecause no value was defined for it when creating the object.",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,Object placeholders can also be created by declaringnaobject names using the following:,https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"This example displays a label where high pivots are detected. The pivots
are detectedlegsInputbars after they occur, so we must plot the
label in the past for it to appear on the pivot:",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,Take note of this line from the above example:,https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,This could also be written using the following:,https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"When using thevarkeyword while declaring a variable assigned to an object of auser-defined type, the keyword automatically applies to all the object’s
fields:",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,"It’s important to note that assigning an object to a variable that uses
thevaripkeyword doesnotautomatically allow the object’s fields to persist
without rolling back on eachintrabarupdate. One must apply the
keyword to each desired field in the type declaration to achieve this
behavior. For example:",https://www.tradingview.com/pine-script-docs/language/objects
Creatingobjects,Note that:,https://www.tradingview.com/pine-script-docs/language/objects
Changing fieldvalues,The value of an object’s fields can be changed using the:=reassignment operator.,https://www.tradingview.com/pine-script-docs/language/objects
Changing fieldvalues,This line of our previous example:,https://www.tradingview.com/pine-script-docs/language/objects
Changing fieldvalues,Could be written using the following:,https://www.tradingview.com/pine-script-docs/language/objects
Collectingobjects,"Pine Script™ collections (arrays,matrices, andmaps) can contain
objects, allowing users to add virtual dimensions to their data
structures. To declare a collection of objects, pass a UDT name into itstype template.",https://www.tradingview.com/pine-script-docs/language/objects
Collectingobjects,This example declares an emptyarraythat will hold objects of apivotPointuser-defined type:,https://www.tradingview.com/pine-script-docs/language/objects
Collectingobjects,"To explicitly declare the type of a variable as anarray,matrix,
ormapof auser-defined type, use the collection’s type keyword followed by itstype template. For example:",https://www.tradingview.com/pine-script-docs/language/objects
Collectingobjects,"Let’s use what we have learned to create a script that detects high
pivot points. The script first collects historical pivot information in
anarray.
It then loops through the array on the last historical bar, creating a
label for each pivot and connecting the pivots with lines:",https://www.tradingview.com/pine-script-docs/language/objects
Collectingobjects,,https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"In Pine, objects are assigned by reference. When an existing object is
assigned to a new variable, both point to the same object.",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"In the example below, we create apivot1object and set itsxfield
to 1000. Then, we declare apivot2variable containing the reference
to thepivot1object, so both point to the same instance. Changingpivot2.xwill thus also changepivot1.x, as both refer to thexfield of the same object:",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"To create a copy of an object that is independent of the original, we
can use the built-incopy()method in this case.",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"In this example, we declare thepivot2variable referring to a copied
instance of thepivot1object. Now, changingpivot2.xwill not
changepivot1.x, as it refers to thexfield of a separate object:",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"It’s important to note that the built-incopy()method produces ashallow copyof an object. If an object has fields withspecial
types(array,matrix,map,line,linefill,box,polyline,label,table,
orchart.point),
those fields in a shallow copy of the object will point to the same
instances as the original.",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"In the following example, we have defined anInfoLabeltype with a
label as one of its fields. The script instantiates ashallowcopy of
theparentobject, then calls a user-definedset()methodto update theinfoandlblfields of each object. Since thelblfield of both
objects points to the same label instance, changes to this field in
either object affect the other:",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"To produce adeep copyof an object with all of its special type
fields pointing to independent instances, we must explicitly copy those
fields as well.",https://www.tradingview.com/pine-script-docs/language/objects
Copyingobjects,"In this example, we have defined adeepCopy()method that instantiates
a newInfoLabelobject with itslblfield pointing to a copy of the
original’s field. Changes to thedeepcopy’slblfield will not
affect theparentobject, as it points to a separate instance:",https://www.tradingview.com/pine-script-docs/language/objects
Shadowing,"To avoid potential conflicts in the eventuality where namespaces added
to Pine Script™ in the future would collide with UDTs or object names in
existing scripts; as a rule, UDTs and object names shadow the
language’s namespaces. For example, a UDT or object can use the name of
built-in types, such aslineortable.",https://www.tradingview.com/pine-script-docs/language/objects
Shadowing,"Only the language’s five primitive types cannot be used to name UDTs or
objects:int,float,string,bool,
andcolor.",https://www.tradingview.com/pine-script-docs/language/objects
Shadowing,Previous,https://www.tradingview.com/pine-script-docs/language/objects
Shadowing,Next,https://www.tradingview.com/pine-script-docs/language/objects
Enums,"Notice!This page contains advanced material. If you are a beginning Pine
Script™ programmer, we recommend you become familiar with other, more
accessible Pine Script™ features before you venture here.",https://www.tradingview.com/pine-script-docs/language/enums
Introduction,"Pine Script™ Enums, otherwise known asenumerations,enumerated
types, orenum types, are unique data types with all possible values (members)
explicitly defined by the programmer. They provide a human-readable,
expressive way to declare distinct sets ofpredefined valuesthat
variables, conditional expressions, andcollectionscan accept, allowing more strict control over the values
used in a script’s logic.",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"To declare an enum, use theenumkeyword with the following syntax:",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"Code:
[export ]enum <enumName><field_1>[ = <title_1>]<field_2>[ = <title_2>]...<field_N>[ = <title_N>]",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"Eachfieldin the enum represents a unique,named member(value)
of theenum type. Users can specify optional “const string”titlesfor
enum fields to add extra information about what their values represent.
If the programmer does not specify a field’s title, its title is the
“string” representation of its name.Enum inputsdisplay enum field titles within their dropdown menus in a
script’s “Settings/Inputs” tab. Scripts can also retrieve enum field
titles using thestr.tostring()function, allowing their use in additional calculations. Seethis sectionbelow for more information.",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"While the above syntax may look similar to the syntax for declaringuser-defined types (UDTs), it’s crucial to understand thatenum typesandUDTsserve different purposes. Scripts useUDTsto createobjectswith
“series” fields that can hold values ofanyspecified type. In
contrast, enums are distinct groups of “simple” fields representing
the specific,predefined valuesof the sameuniquetype that
variables, expressions, andcollectionscan accept.",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"For example, this code block declares aSignalenum with three fields:buy,sell, andneutral. Each field represents a distinct member
(possible value) of theSignalenum type:",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,Note that:,https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"To retrieve a member of an enum, reference its field name usingdot
notationsyntax, i.e.:",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"As with other types, scripts can assign enum members to variables,
function parameters, andUDTfields, allowing strict control over their allowed values.",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"For instance, this line of code declares amySignalvariable whose
value is theneutralmember of theSignalenum. Any value assigned
to this variable later must also be of the sameenum type:",https://www.tradingview.com/pine-script-docs/language/enums
Declaring anenum,"Note that the above line does not require declaring the variable’stypeasSignalbecause the compiler can automatically infer that
information from the assigned value. If we usenaas
the initial value instead, we must useSignalas the type keyword to
specify thatmySignalwill accept aSignalmember:",https://www.tradingview.com/pine-script-docs/language/enums
Usingenums,"Scripts can compare enum members with the==and!=operators and use them inconditional structures, allowing the convenient creation of logical patterns with a
reduced risk of unintended values or operations.",https://www.tradingview.com/pine-script-docs/language/enums
Usingenums,"The following example declares anOscTypeenum with three fields
representing different oscillator choices:rsi,mfi, andcci. ThecalcOscillator()function usesOscTypemembers within aswitchstructure to determine which oscillator it calculates. The script calls
this function using the value from anenum inputas theselectionargument and plots the
resulting oscillator:",https://www.tradingview.com/pine-script-docs/language/enums
Usingenums,,https://www.tradingview.com/pine-script-docs/language/enums
Usingenums,Note that:,https://www.tradingview.com/pine-script-docs/language/enums
Usingenums,"It’s crucial to note that each declared enum represents auniquetype. Scriptscannotcompare members of different enums or use such
members in expressions requiring a specificenum type, even if the fields have identical names and titles.",https://www.tradingview.com/pine-script-docs/language/enums
Usingenums,"In this example, we added anOscType2enum to the above script and
changed theoscInputvariable to use a member of that enum. The script
now raises acompilation errorbecause it can’t use a member of theOscType2enum as theselectionargument in thecalcOscillator()call:",https://www.tradingview.com/pine-script-docs/language/enums
Utilizing fieldtitles,"The “string” titles of an enum’s fields allow programmers to add
extra information to each member. These field titles appear within a
dropdown in the script’s “Settings/Inputs” tab when calling theinput.enum()function.",https://www.tradingview.com/pine-script-docs/language/enums
Utilizing fieldtitles,"Scripts can also utilize enum field titles in their calculations and
logic. Use the string conversion function
(str.tostring())
on an enum field to access its title.",https://www.tradingview.com/pine-script-docs/language/enums
Utilizing fieldtitles,"The following example combines different enum field titles to construct
a ticker ID for requesting data fromanother context. The script declares two enums,ExchangeandPair, whose
respective fields representexchangeandcurrency pairnames. It
usesinput.enum()to assign user-specified enum members to theexchangeInputandpairInputvariables, then retrieves the “string” titles from those
variables withstr.tostring()and concatenates them to form an “Exchange:Symbol” pair for use in arequest.security()call:",https://www.tradingview.com/pine-script-docs/language/enums
Utilizing fieldtitles,,https://www.tradingview.com/pine-script-docs/language/enums
Utilizing fieldtitles,Note that:,https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,"Pine Script™collections(arrays,matrices, andmaps) can store enum members, allowing strict control over the values they can contain. To declare a collection of enum members, include the enum’snamein the collection’stype template.",https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,"For example, this code block creates an emptyarrayto hold members of theFooBarenum. The only values this array can
allow as elements areFooBar.foo,FooBar.bar,FooBar.baz, andna:",https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,"Enums are particularly helpful when working withmaps, as unlike othernon-fundamentaltypes, scripts can declaremapswithkeysof anenum type, enabling strict control over all possible keys allowed in
their key-value pairs.",https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,"The following example uses amapwith enum keys and “int” values to track and count signal states
across chart bars. The script’sSignalenum contains five fields
representing specific named states. ThesignalCountersmapuses theSignalname as thefirst keywordin itstype templateto specify that it can only acceptSignalmembers as keys.",https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,"The script uses aswitchstructure to calculate asignalStatevariable whose value is a member
of theSignalenum, which it uses to determine the counter value to
update in thesignalCountersmap. It constructs a “string” to
represent the key-value pairs of themapand displays the result in a single-celltableon the last chart bar:",https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,,https://www.tradingview.com/pine-script-docs/language/enums
Collecting enummembers,Note that:,https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,"To avoid potential conflicts where namespaces added to Pine Script™ in
the future would conflict with the names of enums in existing scripts,
enum names canshadowsome of Pine’s namespaces.",https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,"For example, one can declare an enum like the following, whose name
shadows thesyminfo.*namespace:",https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,"However, using such a name for an enum is only allowed if the enum’s
fieldsdo nothave names matching any of the namespace’s built-ins.
Otherwise, Pine will not be able to determine which value the script is
supposed to use, resulting in a compilation error:",https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,"Additionally, one cannot use any of Pine’s built-intypenames as the name of an
enum.",https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,"Notice!While it is possible for some enum names to shadow language namespaces,
as shown above, we recommend choosinguniquenames for enums
wherever possible for more readable code that’s easier to maintain.",https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,Previous,https://www.tradingview.com/pine-script-docs/language/enums
Shadowing,Next,https://www.tradingview.com/pine-script-docs/language/enums
Methods,"Notice!This page contains advanced material. If you are a beginning Pine
Script™ programmer, we recommend you become familiar with other, more
accessible Pine Script™ features before you venture here.",https://www.tradingview.com/pine-script-docs/language/methods
Introduction,"Pine Script™ methods are specialized functions associated with values of specificbuilt-in types,user-defined types, orenum types.
They behave the same as regular functions in most regards while offering a shorter, more convenient syntax.
Users can access methods usingdot notationsyntax on variables of the associated type, similar to accessing the fields
of a Pine Script™object.",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"Pine Script™ includes built-in methods for allspecial types,
includingarray,matrix,map,line,linefill,box,polyline,label,
andtable.
These methods provide users with a more concise way to call specialized
routines for these types within their scripts.",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"When using these special types, the expressions:",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"Code:
<namespace>.<functionName>([paramName =] <objectName>, …)",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,and:,https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"Code:
<objectName>.<functionName>(…)",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"are equivalent. For example, rather than using:",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"to get the value from an arrayidat the specifiedindex, we can
simply use:",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"to achieve the same effect. This notation eliminates the need for users
to reference the function’s namespace, asget()is a method ofidin this context.",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"Written below is a practical example to demonstrate the usage of
built-in methods in place of functions.",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"The following script computes Bollinger Bands over a specified number of
prices sampled once everynbars. It callsarray.push()andarray.shift()to queuesourceInputvalues through thesourceArray, thenarray.avg()andarray.stdev()to compute thesampleMeanandsampleDev. The script then uses these
values to calculate thehighBandandlowBand, which it plots on the
chart along with thesampleMean:",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,,https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,"Let’s rewrite this code to utilize methods rather than built-in
functions. In this version, we have replaced all built-inarray.*functions in the script with equivalent methods:",https://www.tradingview.com/pine-script-docs/language/methods
Built-inmethods,Note that:,https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"Pine Script™ allows users to define custom methods for use with objects
of any built-in or user-defined type. Defining a method is essentially
the same as defining a function, but with two key differences:",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"Code:
[export] method <functionName>(<paramType> <paramName> [= <defaultValue>], …) =><functionBlock>",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"Let’s apply user-defined methods to our previous Bollinger Bands
example to encapsulate operations from the global scope, which will
simplify the code and promote reusability. See this portion from the
example:",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"We will start by defining a simple method to queue values through an
array in a single call.",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"ThismaintainQueue()method invokes thepush()andshift()methods on asrcArraywhentakeSampleis true and returns the
object:",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,Note that:,https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,Now we can replacesourceArray.push()andsourceArray.shift()withsourceArray.maintainQueue()in our example:,https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"From here, we will further simplify our code by defining a method that
handles all Bollinger Band calculations within its scope.",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"ThiscalcBB()method invokes theavg()andstdev()methods on asrcArrayto updatemeananddevvalues whencalculateis true. The method uses these values to return a tuple
containing the basis, upper band, and lower band values respectively:",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"With this method, we can now remove Bollinger Band calculations from the
global scope and improve code readability:",https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,Note that:,https://www.tradingview.com/pine-script-docs/language/methods
User-definedmethods,"Here is how the full script example looks now that we’ve applied our
user-defined methods:",https://www.tradingview.com/pine-script-docs/language/methods
Methodoverloading,"User-defined methods can override and overload existing built-in and
user-defined methods with the same identifier. This capability allows
users to define multiple routines associated with different parameter
signatures under the same method name.",https://www.tradingview.com/pine-script-docs/language/methods
Methodoverloading,"As a simple example, suppose we want to define a method to identify a
variable’s type. Since we must explicitly specify the type of object
associated with a user-defined method, we will need to define overloads
for each type that we want it to recognize.",https://www.tradingview.com/pine-script-docs/language/methods
Methodoverloading,"Below, we have defined agetType()method that returns a string
representation of a variable’s type with overloads for the five
primitive types:",https://www.tradingview.com/pine-script-docs/language/methods
Methodoverloading,"Now we can use these overloads to inspect some variables. This script
usesstr.format()to format the results from calling thegetType()method on five
different variables into a singleresultsstring, then displays the
string in thelbllabel using the built-inset_text()method:",https://www.tradingview.com/pine-script-docs/language/methods
Methodoverloading,,https://www.tradingview.com/pine-script-docs/language/methods
Methodoverloading,Note that:,https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"Let’s apply what we’ve learned to construct a script that estimates
the cumulative distribution of elements in an array, meaning the
fraction of elements in the array that are less than or equal to any
given value.",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"There are many ways in which we could choose to tackle this objective.
For this example, we will start by defining a method to replace elements
of an array, which will help us count the occurrences of elements within
a range of values.",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"Written below is an overload of the built-infill()method forarray<float>instances. This overload replaces elements in
asrcArraywithin the range between thelowerBoundandupperBoundwith aninnerValue, and replaces all elements outside the range with
anouterValue:",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"With this method, we can filter an array by value ranges to produce an
array of occurrences. For example, the expression:",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"copies thesrcArrayobject, replaces all elements betweenminandvalwith 1.0, then replaces all elements abovevalwith 0.0. From
here, it’s easy to estimate the output of the cumulative distribution
function at theval, as it’s simply the average of the resulting
array:",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,Note that:,https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"We can now use this to define a method that will calculate our empirical
distribution values. The followingeCDF()method estimates a number of
evenly spaced ascendingstepsfrom the cumulative distribution
function of asrcArrayand pushes the results into acdfArray:",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"Lastly, to ensure that oureCDF()method functions properly for arrays
containing small and large values, we will define a method to normalize
our arrays.",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"ThisfeatureScale()method uses arraymin()andrange()methods to produce a rescaled copy of asrcArray. We will use this to
normalize our arrays prior to invoking theeCDF()method:",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,Note that:,https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,"The full example below queues asourceArrayof sizelengthwithsourceInputvalues using our previousmaintainQueue()method,
normalizes the array’s elements using thefeatureScale()method, then
calls theeCDF()method to get an array of estimates fornevenly
spaced steps on the distribution. The script then calls a user-definedmakeLabel()function to display the estimates and prices in a label on
the right side of the chart:",https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,,https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,Previous,https://www.tradingview.com/pine-script-docs/language/methods
Advancedexample,Next,https://www.tradingview.com/pine-script-docs/language/methods
Arrays,"Notice!This page contains advanced material. If you are a beginning Pine
Script™ programmer, we recommend you become familiar with other, more
accessible Pine Script™ features before you venture here.",https://www.tradingview.com/pine-script-docs/language/arrays
Introduction,"Pine Script™ Arrays are one-dimensional collections that can hold
multiple value references. Think of them as a better way to handle cases
where one would otherwise need to explicitly declare a set of similar
variables (e.g.,price00,price01,price02, …).",https://www.tradingview.com/pine-script-docs/language/arrays
Introduction,"All elements in an array must be of the samebuilt-in type,user-defined type, orenum type.",https://www.tradingview.com/pine-script-docs/language/arrays
Introduction,"Scripts reference arrays using array IDs similar to the IDs oflines,labels, and otherspecial types. Pine Script™ does not use an indexing operator to reference individual array elements.
Instead, functions includingarray.get()andarray.set()read and write the values of array elements.",https://www.tradingview.com/pine-script-docs/language/arrays
Introduction,"Scripts reference the elements of an array using anindex, which
starts at 0 and extends to the number of elements in the array minus
one. Arrays in Pine Script™ can have a dynamic size that varies across
bars, as one can change the number of elements in an array on each
iteration of a script. Scripts can contain multiple array instances. The
size of arrays is limited to 100,000 elements.",https://www.tradingview.com/pine-script-docs/language/arrays
Introduction,"Notice!We will usebeginningof an array to designate index 0, andendof
an array to designate the array’s element with the highest index value.
We will also extend the meaning ofarrayto include array IDs, for the
sake of brevity.",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,Pine Script™ uses the following syntax to declare arrays:,https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"Code:
[var/varip ][array<type>/<type[]> ]<identifier> = <expression>",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"Where<type>is atype templatefor the array that declares the type of values it will
contain, and the<expression>returns either an array of the specified
type orna.",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"When declaring a variable as an array, we can use thearraykeyword followed by atype template. Alternatively, we can use thetypename followed by the[]modifier (not to be confused with the[]history-referencing operator).",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"Since Pine always uses type-specific functions to create arrays, thearray<type>/type[]part of the declaration is redundant, except when
declaring an array variable assigned tona. Even when not required,
explicitly declaring the array type helps clearly state the intention to
readers.",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"This line of code declares an array variable namedpricesthat points
tona. In this case, we must specify the type to declare that the
variable can reference arrays containing “float” values:",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,We can also write the above example in this form:,https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"When declaring an array and the<expression>is notna, use one of
the following functions:array.new<type>(size, initial_value),array.from(),
orarray.copy().
Forarray.new<type>(size, initial_value)functions, the arguments of
thesizeandinitial_valueparameters can be “series” to allow
dynamic sizing and initialization of array elements. The following
example creates an array containing zero “float” elements, and this
time, the array ID returned by thearray.new<float>()function call is assigned toprices:",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"Notice!Thearray.*namespace also contains type-specific functions for
creating arrays, includingarray.new_int(),array.new_float(),array.new_bool(),array.new_color(),array.new_string(),array.new_line(),array.new_linefill(),array.new_label(),array.new_box()andarray.new_table().
Thearray.new<type>()function can create an array of any type, includinguser-defined types.",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"Theinitial_valueparameter ofarray.new*functions allows users to
set all elements in the array to a specified value. If no argument is
provided forinitial_value, the array is filled withnavalues.",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"This line declares an array ID namedpricespointing to an array
containing two elements, each assigned to the bar’sclosevalue:",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"To create an array and initialize its elements with different values,
usearray.from().
This function infers the array’s size and the type of elements it will
hold from the arguments in the function call. As witharray.new*functions, it accepts “series” arguments. All values supplied to the
function must be of the same type.",https://www.tradingview.com/pine-script-docs/language/arrays
Declaringarrays,"For example, all three of these lines of code will create identical
“bool” arrays with the same two elements:",https://www.tradingview.com/pine-script-docs/language/arrays
Using `var` and `varip`keywords,"Users can utilizevarandvaripkeywords to instruct a script to declare an array variable only once on
the first iteration of the script on the first chart bar. Array
variables declared using these keywords point to the same array
instances until explicitly reassigned, allowing an array and its element
references to persist across bars.",https://www.tradingview.com/pine-script-docs/language/arrays
Using `var` and `varip`keywords,"When declaring an array variable using these keywords and pushing a new
value to the end of the referenced array on each bar, the array will
grow by one on each bar and be of sizebar_index + 1(bar_indexstarts at zero) by the time the script executes on the last bar, as this
code demonstrates:",https://www.tradingview.com/pine-script-docs/language/arrays
Using `var` and `varip`keywords,"The same code without thevarkeyword would re-declare the array on each bar. In this case, after
execution of thearray.push()call, thea.size()call would return a value of 1.",https://www.tradingview.com/pine-script-docs/language/arrays
Using `var` and `varip`keywords,"Notice!Array variables declared usingvaripbehave as ones usingvaron
historical data, but they update their values for realtime bars (i.e.,
the bars since the script’s last compilation) on each new price tick.
Arrays assigned tovaripvariables can only holdint,float,bool,color,
orstringtypes oruser-defined typesthat exclusively contain within their fields these types or
collections (arrays,matrices) of
these types.",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"Scripts can write values to existing individual array elements usingarray.set(id, index,
value),
and read usingarray.get(id,
index).
When using these functions, it is imperative that theindexin the
function call is always less than or equal to the array’s size (because
array indices start at zero). To get the size of an array, use thearray.size(id)function.",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"The following example uses theset()method to populate afillColorsarray with instances of one base color
using different transparency levels. It then usesarray.get()to retrieve one of the colors from the array based on the location of
the bar with the highest price within the lastlookbackInputbars:",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,,https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"Another technique for initializing the elements in an array is to create
anempty array(an array with no elements), then usearray.push()to appendnewelements to the end of the array, increasing the size
of the array by one on each call. The following code is functionally
identical to the initialization section from the preceding script:",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"This code is equivalent to the one above, but it usesarray.unshift()to insert new elements at thebeginningof thefillColorsarray:",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,We can also usearray.from()to create the samefillColorsarray with a single function call:,https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"Thearray.fill(id, value, index_from,
index_to)function points all array elements, or the elements within theindex_fromtoindex_torange, to a specifiedvalue. Without the
last two optional parameters, the function fills the whole array, so:",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,and:,https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"are equivalent, but:",https://www.tradingview.com/pine-script-docs/language/arrays
Reading and writing arrayelements,"only fills the second and third elements (at index 1 and 2) of the array
withclose. Note howarray.fill()‘s
last parameter,index_to, must be one greater than the last index the
function will fill. The remaining elements will holdnavalues, as thearray.new()function call does not contain aninitial_valueargument.",https://www.tradingview.com/pine-script-docs/language/arrays
Looping through arrayelements,"When looping through an array’s element indices and the array’s size
is unknown, one can use thearray.size()function to get the maximum index value. For example:",https://www.tradingview.com/pine-script-docs/language/arrays
Looping through arrayelements,Note that:,https://www.tradingview.com/pine-script-docs/language/arrays
Looping through arrayelements,"An alternative method to loop through an array is to use afor…inloop. This approach is a variation of the standard for loop that can
iterate over the value references and indices in an array. Here is an
example of how we can write the code example from above using afor...inloop:",https://www.tradingview.com/pine-script-docs/language/arrays
Looping through arrayelements,Note that:,https://www.tradingview.com/pine-script-docs/language/arrays
Looping through arrayelements,Awhileloop statement can also be used:,https://www.tradingview.com/pine-script-docs/language/arrays
Scope,"Users can declare arrays within the global scope of a script, as well as
the local scopes offunctions,methods, andconditional structures. Unlike some of the other built-in types, namelyfundamentaltypes, scripts can modify globally-assigned arrays from
within local scopes, allowing users to implement global variables that
any function in the script can directly interact with. We use the
functionality here to calculate progressively lower or higher price
levels:",https://www.tradingview.com/pine-script-docs/language/arrays
Scope,,https://www.tradingview.com/pine-script-docs/language/arrays
Historyreferencing,"Pine Script™‘s history-referencing operator[
]can
access the history of array variables, allowing scripts to interact with
past array instances previously assigned to a variable.",https://www.tradingview.com/pine-script-docs/language/arrays
Historyreferencing,"To illustrate this, let’s create a simple example to show how one can
fetch the previous bar’sclosevalue in two equivalent ways. This
script uses the[
]operator to get the array instance assigned toaon the previous bar,
then uses theget()method to retrieve the value of the first element (previousClose1).
ForpreviousClose2, we use the history-referencing operator on theclosevariable directly to retrieve the value. As we see from the
plots,previousClose1andpreviousClose2both return the same value:",https://www.tradingview.com/pine-script-docs/language/arrays
Historyreferencing,,https://www.tradingview.com/pine-script-docs/language/arrays
Inserting,The following three functions can insert new elements into an array.,https://www.tradingview.com/pine-script-docs/language/arrays
Inserting,"array.unshift()inserts a new element at the beginning of an array (index 0) and
increases the index values of any existing elements by one.",https://www.tradingview.com/pine-script-docs/language/arrays
Inserting,"array.insert()inserts a new element at the specifiedindexand increases the index
of existing elements at or after theindexby one.",https://www.tradingview.com/pine-script-docs/language/arrays
Inserting,,https://www.tradingview.com/pine-script-docs/language/arrays
Inserting,array.push()adds a new element at the end of an array.,https://www.tradingview.com/pine-script-docs/language/arrays
Removing,"These four functions remove elements from an array. The first three also
return the value of the removed element.",https://www.tradingview.com/pine-script-docs/language/arrays
Removing,"array.remove()removes the element at the specifiedindexand returns that element’s
value.",https://www.tradingview.com/pine-script-docs/language/arrays
Removing,array.shift()removes the first element from an array and returns its value.,https://www.tradingview.com/pine-script-docs/language/arrays
Removing,array.pop()removes the last element of an array and returns its value.,https://www.tradingview.com/pine-script-docs/language/arrays
Removing,"array.clear()removes all elements from an array. Note that clearing an array won’t
delete any objects its elements referenced. See the example below that
illustrates how this works:",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as astack,"Stacks are LIFO (last in, first out) constructions. They behave somewhat
like a vertical pile of books to which books can only be added or
removed one at a time, always from the top. Pine Script™ arrays can be
used as a stack, in which case we use thearray.push()andarray.pop()functions to add and remove elements at the end of the array.",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as astack,"array.push(prices, close)will add a new element to the end of thepricesarray, increasing the array’s size by one.",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as astack,"array.pop(prices)will remove the end element from thepricesarray,
return its value and decrease the array’s size by one.",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as astack,See how the functions are used here to track successive lows in rallies:,https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as astack,,https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as aqueue,"Queues are FIFO (first in, first out) constructions. They behave
somewhat like cars arriving at a red light. New cars are queued at the
end of the line, and the first car to leave will be the first one that
arrived to the red light.",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as aqueue,"In the following code example, we let users decide through the script’s
inputs how many labels they want to have on their chart. We use that
quantity to determine the size of the array of labels we then create,
initializing the array’s elements tona.",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as aqueue,"When a new pivot is detected, we create a label for it, saving the
label’s ID in thepLabelvariable. We then queue the ID of that label
by usingarray.push()to append the new label’s ID to the end of the array, making our array
size one greater than the maximum number of labels to keep on the chart.",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as aqueue,"Lastly, we de-queue the oldest label by removing the array’s first
element usingarray.shift()and deleting the label referenced by that array element’s value. As we
have now de-queued an element from our queue, the array containspivotCountInputelements once again. Note that on the dataset’s first
bars we will be deletingnalabel IDs until the maximum number of
labels has been created, but this does not cause runtime errors. Let’s
look at our code:",https://www.tradingview.com/pine-script-docs/language/arrays
Using an array as aqueue,,https://www.tradingview.com/pine-script-docs/language/arrays
Negativeindexing,"Thearray.get(),array.set(),array.insert(), andarray.remove()functions supportnegative indexing, which references elements starting from the end of the array. An index of-1refers to the last element in the array, an index of-2refers to the second to last element, and so on.",https://www.tradingview.com/pine-script-docs/language/arrays
Negativeindexing,"When using apositiveindex, functions traverse the arrayforwardsfrom the beginning of the array (first to lastelement). The first element’s index is0, and the last element’s index isarray.size() - 1. When using anegativeindex, functions traverse the arraybackwardsfrom the end of the array (last to firstelement). The last element’s index is-1, and the first element’s index is–array.size():",https://www.tradingview.com/pine-script-docs/language/arrays
Negativeindexing,"Like positive indexing, negative indexing is bound by the size of the array. For example, functions operating on an array of 5 elements only accept indices of 0 to 4 (first to last element) or -1 to -5 (last to first element). Any other indices areout of boundsand will raise a runtime error.",https://www.tradingview.com/pine-script-docs/language/arrays
Negativeindexing,"We can use negative indices to retrieve, update, add, and remove array elements. This simple script creates an “int”countingArrayand calls thearray.get(),array.set(),array.insert(), andarray.remove()functions to perform various array operations using negative indices. It displays each array operation and its corresponding result in atable:",https://www.tradingview.com/pine-script-docs/language/arrays
Negativeindexing,,https://www.tradingview.com/pine-script-docs/language/arrays
Negativeindexing,"Note that not all array operations can use negative indices. For example,search functionslikearray.indexof()andarray.binary_search()return thepositiveindex of an element if it’s found in the array. If the value is not found, the functions return-1. However, this returned value isnota negative index, and using it as one would incorrectly reference the last array element. If a script needs to use a search function’s returned index in subsequent array operations, it must appropriately differentiate between this-1result and other valid indices.",https://www.tradingview.com/pine-script-docs/language/arrays
Calculations onarrays,"While series variables can be viewed as a horizontal set of values
stretching back in time, Pine Script™‘s one-dimensional arrays can be
viewed as vertical structures residing on each bar. As an array’s set
of elements is not atime series,
Pine Script™‘s usual mathematical functions are not allowed on them.
Special-purpose functions must be used to operate on all of an array’s
values. The available functions are:array.abs(),array.avg(),array.covariance(),array.min(),array.max(),array.median(),array.mode(),array.percentile_linear_interpolation(),array.percentile_nearest_rank(),array.percentrank(),array.range(),array.standardize(),array.stdev(),array.sum(),array.variance().",https://www.tradingview.com/pine-script-docs/language/arrays
Calculations onarrays,"Note that contrary to the usual mathematical functions in Pine Script™,
those used on arrays do not returnnawhen some of the values they
calculate on havenavalues. There are a few exceptions to this rule:",https://www.tradingview.com/pine-script-docs/language/arrays
Concatenation,"Two arrays can be merged — or concatenated — usingarray.concat().
When arrays are concatenated, the second array is appended to the end of
the first, so the first array is modified while the second one remains
intact. The function returns the array ID of the first array:",https://www.tradingview.com/pine-script-docs/language/arrays
Concatenation,,https://www.tradingview.com/pine-script-docs/language/arrays
Copying,"You can copy an array usingarray.copy().
Here we copy the arrayato a new array named_b:",https://www.tradingview.com/pine-script-docs/language/arrays
Copying,,https://www.tradingview.com/pine-script-docs/language/arrays
Copying,"Note that simply using_b = ain the previous example would not have
copied the array, but only its ID. From thereon, both variables would
point to the same array, so using either one would affect the same
array.",https://www.tradingview.com/pine-script-docs/language/arrays
Joining,"Usearray.join()to concatenate all of the elements in the array into a string and
separate these elements with the specified separator:",https://www.tradingview.com/pine-script-docs/language/arrays
Sorting,"Arrays containing “int” or “float” elements can be sorted in either
ascending or descending order usingarray.sort().
Theorderparameter is optional and defaults toorder.ascending.
As allarray.*()function arguments, it is qualified as “series”, so
can be determined at runtime, as is done here. Note that in the example,
which array is sorted is also determined at runtime:",https://www.tradingview.com/pine-script-docs/language/arrays
Sorting,,https://www.tradingview.com/pine-script-docs/language/arrays
Sorting,"Another useful option for sorting arrays is to use thearray.sort_indices()function, which takes a reference to the original array and returns an
array containing the indices from the original array. Please note that
this function won’t modify the original array. Theorderparameter is
optional and defaults toorder.ascending.",https://www.tradingview.com/pine-script-docs/language/arrays
Reversing,Usearray.reverse()to reverse an array:,https://www.tradingview.com/pine-script-docs/language/arrays
Slicing,"Slicing an array usingarray.slice()creates a shallow copy of a subset of the parent array. You determine
the size of the subset to slice using theindex_fromandindex_toparameters. Theindex_toargument must be one greater than the end of
the subset you want to slice.",https://www.tradingview.com/pine-script-docs/language/arrays
Slicing,"The shallow copy created by the slice acts like a window on the parent
array’s content. The indices used for the slice define the window’s
position and size over the parent array. If, as in the example below, a
slice is created from the first three elements of an array (indices 0 to
2), then regardless of changes made to the parent array, and as long as
it contains at least three elements, the shallow copy will always
contain the parent array’s first three elements.",https://www.tradingview.com/pine-script-docs/language/arrays
Slicing,"Additionally, once the shallow copy is created, operations on the copy
are mirrored on the parent array. Adding an element to the end of the
shallow copy, as is done in the following example, will widen the window
by one element and also insert that element in the parent array at index
3. In this example, to slice the subset from index 0 to index 2 of arraya, we must use_sliceOfA = array.slice(a, 0, 3):",https://www.tradingview.com/pine-script-docs/language/arrays
Slicing,,https://www.tradingview.com/pine-script-docs/language/arrays
Searchingarrays,"We can test if a value is part of an array with thearray.includes()function, which returns true if the element is found. We can find the
first occurrence of a value in an array by using thearray.indexof()function. The first occurence is the one with the lowest index. We can
also find the last occurrence of a value witharray.lastindexof():",https://www.tradingview.com/pine-script-docs/language/arrays
Searchingarrays,"We can also perform a binary search on an array but note that performing
a binary search on an array means that the array will first need to be
sorted in ascending order only. Thearray.binary_search()function will return the value’s index if it was found or -1 if it
wasn’t. If we want to always return an existing index from the array
even if our chosen value wasn’t found, then we can use one of the other
binary search functions available. Thearray.binary_search_leftmost()function, which returns an index if the value was found or the first
index to the left where the value would be found. Thearray.binary_search_rightmost()function is almost identical and returns an index if the value was found
or the first index to the right where the value would be found.",https://www.tradingview.com/pine-script-docs/language/arrays
Searchingarrays,"Notice!Search functions likearray.index_of()andarray.binary_search()return an array index if the requested element is found, or-1if it’s not present. Note that these functions only returnpositive indices, while other functions likearray.get()acceptbothpositive andnegative indexing. Ensure that scripts donotmisconstrue a search function’s returned-1result as a negative index in their subsequent logic.",https://www.tradingview.com/pine-script-docs/language/arrays
Errorhandling,"Malformedarray.*()call syntax in Pine scripts will cause the usualcompilererror messages to appear in Pine Editor’s console, at the
bottom of the window, when you save a script. Refer to the Pine Script™v6 Reference
Manualwhen in
doubt regarding the exact syntax of function calls.",https://www.tradingview.com/pine-script-docs/language/arrays
Errorhandling,"Scripts using arrays can also throwruntimeerrors, which appear as
an exclamation mark next to the indicator’s name on the chart. We
discuss those runtime errors in this section.",https://www.tradingview.com/pine-script-docs/language/arrays
Index xx is out of bounds. Array size isyy,"This will most probably be the most frequent error you encounter. It
will happen when you reference an nonexistent array index. The “xx”
value will be the value of the faulty index you tried to use, and “yy”
will be the size of the array. Recall that array indices start at
zero — not one — and end at the array’s size, minus one. An array of
size 3’s last valid index is thus2.",https://www.tradingview.com/pine-script-docs/language/arrays
Index xx is out of bounds. Array size isyy,"To avoid this error, you must make provisions in your code logic to
prevent using an index lying outside of the array’s index boundaries.
This code will generate the error because the last index we use in the
loop is outside the valid index range for the array:",https://www.tradingview.com/pine-script-docs/language/arrays
Index xx is out of bounds. Array size isyy,The correctforstatement is:,https://www.tradingview.com/pine-script-docs/language/arrays
Index xx is out of bounds. Array size isyy,"To loop on all array elements in an array of unknown size, use:",https://www.tradingview.com/pine-script-docs/language/arrays
Index xx is out of bounds. Array size isyy,"When you size arrays dynamically using a field in your script’sSettings/Inputstab, protect the boundaries of that value usinginput.int()‘sminvalandmaxvalparameters:",https://www.tradingview.com/pine-script-docs/language/arrays
Index xx is out of bounds. Array size isyy,See theLooping through array elementssection of this page for more information.,https://www.tradingview.com/pine-script-docs/language/arrays
Cannot call array methods when ID of array is‘na’,"When an array ID is initialized tona, operations on it are not
allowed, since no array exists. All that exists at that point is an
array variable containing thenavalue rather that a valid array ID
pointing to an existing array. Note that an array created with no
elements in it, as you do when you usea = array.new_int(0), has a
valid ID nonetheless. This code will throw the error we are discussing:",https://www.tradingview.com/pine-script-docs/language/arrays
Cannot call array methods when ID of array is‘na’,"To avoid it, create an array with size zero using:",https://www.tradingview.com/pine-script-docs/language/arrays
Cannot call array methods when ID of array is‘na’,or:,https://www.tradingview.com/pine-script-docs/language/arrays
Array is too large. Maximum size is100000,"This error will appear if your code attempts to declare an array with a
size greater than 100,000. It will also occur if, while dynamically
appending elements to an array, a new element would increase the
array’s size past the maximum.",https://www.tradingview.com/pine-script-docs/language/arrays
Cannot create an array with a negativesize,"We haven’t found any use for arrays of negative size yet, but if you
ever do, we may allow them :)",https://www.tradingview.com/pine-script-docs/language/arrays
Cannot use shift() if array isempty.,This error will occur ifarray.shift()is called to remove the first element of an empty array.,https://www.tradingview.com/pine-script-docs/language/arrays
Cannot use pop() if array isempty.,This error will occur ifarray.pop()is called to remove the last element of an empty array.,https://www.tradingview.com/pine-script-docs/language/arrays
Index ‘from’ should be less than index‘to’,"When two indices are used in functions such asarray.slice(),
the first index must always be smaller than the second one.",https://www.tradingview.com/pine-script-docs/language/arrays
Slice is out of bounds of the parentarray,"This message occurs whenever the parent array’s size is modified in
such a way that it makes the shallow copy created by a slice point
outside the boundaries of the parent array. This code will reproduce it
because after creating a slice from index 3 to 4 (the last two elements
of our five-element parent array), we remove the parent’s first
element, making its size four and its last index 3. From that moment on,
the shallow copy which is still poiting to the “window” at the parent
array’s indices 3 to 4, is pointing out of the parent array’s
boundaries:",https://www.tradingview.com/pine-script-docs/language/arrays
Slice is out of bounds of the parentarray,Previous,https://www.tradingview.com/pine-script-docs/language/arrays
Slice is out of bounds of the parentarray,Next,https://www.tradingview.com/pine-script-docs/language/arrays
Matrices,"Notice!This page contains advanced material. If you are a beginning Pine
Script™ programmer, we recommend you become familiar with other, more
accessible Pine Script™ features before you venture here.",https://www.tradingview.com/pine-script-docs/language/matrices
Introduction,"Pine Script™ Matrices arecollectionsthat store value references in a
rectangular format. They are the equivalent of two-dimensionalarrayobjects with functions and methods for inspection, modification, and specialized calculations. As witharrays, all matrix elements must be of the sametype,user-defined type, orenum type.",https://www.tradingview.com/pine-script-docs/language/matrices
Introduction,"Matrices reference their elements usingtwoindices: one index for theirrowsand the other for theircolumns. Each index starts at 0 and extends
to the number of rows/columns in the matrix minus one. Matrices in Pine
can have dynamic numbers of rows and columns that vary across bars. Thetotal number of
elementswithin a matrix is theproductof the number ofrowsandcolumns(e.g., a 5x5 matrix has a total of 25). Likearrays, the total number of
elements in a matrix cannot exceed 100,000.",https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,Pine Script™ uses the following syntax for matrix declaration:,https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,"Code:
[var/varip ][matrix<type> ]<identifier> = <expression>",https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,"Where<type>is atype templatefor the matrix that declares the type of values it will
contain, and the<expression>returns either a matrix instance of the
type orna.",https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,"When declaring a matrix variable asna, users must specify that the
identifier will reference matrices of a specific type by including thematrixkeyword followed by atype template.",https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,"This line declares a newmyMatrixvariable with a value ofna. It
explicitly declares the variable asmatrix<float>, which tells the
compiler that the variable can only acceptmatrixobjects containingfloatvalues:",https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,"When a matrix variable is not assigned tona, thematrixkeyword and its type template are optional, as the compiler will use the
type information from the object the variable references.",https://www.tradingview.com/pine-script-docs/language/matrices
Declaring amatrix,"Here, we declare amyMatrixvariable referencing a newmatrix<float>instance with two rows, two columns, and aninitial_valueof 0. The
variable gets its type information from the new object in this case, so
it doesn’t require an explicit type declaration:",https://www.tradingview.com/pine-script-docs/language/matrices
Using `var` and `varip`keywords,"As with other variables, users can include thevarorvaripkeywords to instruct a script to declare a matrix variable only once
rather than on every bar. A matrix variable declared with this keyword
will point to the same instance throughout the span of the chart unless
the script explicitly assigns another matrix to it, allowing a matrix
and its element references to persist between script iterations.",https://www.tradingview.com/pine-script-docs/language/matrices
Using `var` and `varip`keywords,"This script declares anmvariable assigned to a matrix that holds a
single row of twointelements using thevarkeyword. On every 20th bar, the script adds 1 to the first element on
the first row of themmatrix. Theplot()call displays this element on the chart. As we see from the plot, the
value ofm.get(0,
0)persists between bars, never returning to the initial value of 0:",https://www.tradingview.com/pine-script-docs/language/matrices
Using `var` and `varip`keywords,,https://www.tradingview.com/pine-script-docs/language/matrices
Using `var` and `varip`keywords,"Notice!Matrix variables declared usingvaripbehave as ones usingvaron
historical data, but they update their values for realtime bars (i.e.,
the bars since the script’s last compilation) on each new price tick.
Matrices assigned tovaripvariables can only holdint,float,bool,color,
orstringtypes oruser-defined typesthat exclusively contain within their fields these types or
collections (arrays,
matrices, ormaps) of these
types.",https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.get()` and`matrix.set()`,"To retrieve the value from a matrix at a specifiedrowandcolumnindex, usematrix.get().
This function locates the specified matrix element and returns its
value. Similarly, to overwrite a specific element’s value, usematrix.set()to assign the element at the specifiedrowandcolumnto a newvalue.",https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.get()` and`matrix.set()`,"The example below defines a square matrixmwith two rows and columns
and aninitial_valueof 0 for all elements on the first bar. The
script adds 1 to each element’s value on different bars using them.get()andm.set()methods. It updates the first row’s first value once every 11 bars, the
first row’s second value once every seven bars, the second row’s first
value once every five bars, and the second row’s second value once
every three bars. The script plots each element’s value on the chart:",https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.get()` and`matrix.set()`,,https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.fill()`,"To overwrite all matrix elements with a specific value, usematrix.fill().
This function points all items in the entire matrix or within thefrom_row/columnandto_row/columnindex range to thevaluespecified in the call. For example, this snippet declares a 4x4 square
matrix, then fills its elements with arandomvalue:",https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.fill()`,"Note when usingmatrix.fill()with matrices containing special types
(line,linefill,box,polyline,label,table,
orchart.point)
orUDTs, all replaced elements will point to the same object passed
in the function call.",https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.fill()`,"This script declares a matrix with four rows and columns oflabelreferences, which it fills with a newlabelobject on the first bar. On each bar, the script sets thexattribute
of the label referenced at row 0, column 0 tobar_index,
and thetextattribute of the one referenced at row 3, column 3 to the
number of labels on the chart. Although the matrix can reference 16
(4x4) labels, each element points to thesameinstance, resulting in
only one label on the chart that updates itsxandtextattributes
on each bar:",https://www.tradingview.com/pine-script-docs/language/matrices
`matrix.fill()`,,https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,"Matrices facilitate the retrieval of all values from a specific row or
column via thematrix.row()andmatrix.col()functions. These functions return the values as anarrayobject sized according to the other dimension of the matrix, i.e., the
size of amatrix.row()array equals thenumber of
columnsand the size of amatrix.col()array equals thenumber of
rows.",https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,"The script below populates a 3x2mmatrix with the values 1 - 6 on the
first chart bar. It calls them.row()andm.col()methods to access the first row and column arrays from the matrix and
displays them on the chart in a label along with the array sizes:",https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,,https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,"matrix.row()andmatrix.col()copy the references in a row/column to a newarray.
Modifications to thearraysreturned by these functions do not directly affect the elements or the
shape of a matrix.",https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,"Here, we’ve modified the previous script to set the first element ofrow0to 10 via thearray.set()method before displaying the label. This script also plots the value
from row 0, column 0. As we see, the label shows that the first element
of therow0array is 10. However, theplotshows that the corresponding matrix element still has a value of 1:",https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,,https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,"Although changes to anarrayreturned bymatrix.row()ormatrix.col()do not directly affect a parent matrix, it’s important to note the
resulting array from a matrix containingUDTsor special types, includingline,linefill,box,polyline,label,table,
orchart.point,
behaves as ashallow copyof a row/column, i.e., the elements within
an array returned from these functions point to the same objects as the
corresponding matrix elements.",https://www.tradingview.com/pine-script-docs/language/matrices
Retrieving,"This script contains a custommyUDTtype containing avaluefield
with an initial value of 0. It declares a 1x1mmatrix to hold a
singlemyUDTinstance on the first bar, then callsm.row(0)to copy
the first row of the matrix as anarray.
On every chart bar, the script adds 1 to thevaluefield of the firstrowarray element. In this case, thevaluefield of the matrix
element increases on every bar as well since both elements reference the
same object:",https://www.tradingview.com/pine-script-docs/language/matrices
Inserting,"Scripts can add new rows and columns to a matrix viamatrix.add_row()andmatrix.add_col().
These functions insert the value references from anarrayinto a matrix at the specifiedrow/columnindex. If theidmatrix is
empty (has no rows or columns), thearray_idin the call can be of any
size. If a row/column exists at the specified index, the matrix
increases the index value for the existing row/column and all after it
by 1.",https://www.tradingview.com/pine-script-docs/language/matrices
Inserting,"The script below declares an emptymmatrix and inserts rows and
columns using them.add_row()andm.add_col()methods. It first inserts an array with three elements at row 0, turningminto a 1x3 matrix, then another at row 1, changing the shape to 2x3.
After that, the script inserts another array at row 0, which changes the
shape ofmto 3x3 and shifts the index of all rows previously at index
0 and higher. It inserts another array at the last column index,
changing the shape to 3x4. Finally, it adds an array with four values at
the end row index.",https://www.tradingview.com/pine-script-docs/language/matrices
Inserting,"The resulting matrix has four rows and columns and contains values 1-16
in ascending order. The script displays the rows ofmafter each
row/column insertion with a user-defineddebugLabel()function to
visualize the process:",https://www.tradingview.com/pine-script-docs/language/matrices
Inserting,,https://www.tradingview.com/pine-script-docs/language/matrices
Inserting,"Notice!Just as the row or column arraysretrievedfrom a matrix ofline,linefill,box,polyline,label,table,chart.point,
orUDTinstances behave as shallow copies, the elements of matrices containing
such types reference the same objects as thearraysinserted into them.
Modifications to the element values in either object affect the other in
such cases.",https://www.tradingview.com/pine-script-docs/language/matrices
Removing,"To remove a specific row or column from a matrix, usematrix.remove_row()andmatrix.remove_col().
These functions remove the specified row/column and decrease the index
values of all rows/columns after it by 1.",https://www.tradingview.com/pine-script-docs/language/matrices
Removing,"For this example, we’ve added these lines of code to our “Rows and
columns demo” script from thesection above:",https://www.tradingview.com/pine-script-docs/language/matrices
Removing,"This code removes the first row and the last column of themmatrix
using them.remove_row()andm.remove_col()methods and displays the rows in a label atbar_index + 30. As we can
see,mhas a 3x3 shape after executing this block, and the index
values for all existing rows are reduced by 1:",https://www.tradingview.com/pine-script-docs/language/matrices
Removing,,https://www.tradingview.com/pine-script-docs/language/matrices
Swapping,"To swap the rows and columns of a matrix without altering its
dimensions, usematrix.swap_rows()andmatrix.swap_columns().
These functions swap the locations of the elements at therow1/column1androw2/column2indices.",https://www.tradingview.com/pine-script-docs/language/matrices
Swapping,"Let’s add the following lines to theprevious example, which swap the first and last rows ofmand display the
changes in a label atbar_index + 40:",https://www.tradingview.com/pine-script-docs/language/matrices
Swapping,"In the new label, we see the matrix has the same number of rows as
before, and the first and last rows have traded places:",https://www.tradingview.com/pine-script-docs/language/matrices
Swapping,,https://www.tradingview.com/pine-script-docs/language/matrices
Replacing,"It may be desirable in some cases to completelyreplacea row or
column in a matrix. To do so,insertthe new array at the desiredrow/columnandremovethe old elements previously at that index.",https://www.tradingview.com/pine-script-docs/language/matrices
Replacing,"In the following code, we’ve defined areplaceRow()method that uses
theadd_row()method to insert the newvaluesat therowindex and uses theremove_row()method to remove the old row that moved to therow + 1index. This
script uses thereplaceRow()method to fill the rows of a 3x3 matrix
with the numbers 1-9. It draws a label on the chart before and after
replacing the rows using the customdebugLabel()method:",https://www.tradingview.com/pine-script-docs/language/matrices
Replacing,,https://www.tradingview.com/pine-script-docs/language/matrices
`for`,"When a script only needs to iterate over the row/column indices in a
matrix, the most common method is to useforloops. For example, this line creates a loop with arowvalue that
starts at 0 and increases by one until it reaches one less than the
number of rows in themmatrix (i.e., the last row index):",https://www.tradingview.com/pine-script-docs/language/matrices
`for`,"To iterate over all index values in themmatrix, we can create anestedloop that iterates over eachcolumnindex on eachrowvalue:",https://www.tradingview.com/pine-script-docs/language/matrices
`for`,"Let’s use this nested structure to create amethodthat visualizes
matrix elements. In the script below, we’ve defined atoTable()method that displays the elements of a matrix within atableobject. It iterates over eachrowindex and over eachcolumnindex
on everyrow. Within the loop, it converts each element to astringto display in the corresponding table cell.",https://www.tradingview.com/pine-script-docs/language/matrices
`for`,"On the first bar, the script creates an emptymmatrix, populates it
with rows, and callsm.toTable()to display its elements:",https://www.tradingview.com/pine-script-docs/language/matrices
`for`,,https://www.tradingview.com/pine-script-docs/language/matrices
`for…in`,"When a script needs to iterate over and retrieve the rows of a matrix,
using thefor…instructure is often preferred over the standardforloop. This
structure directly references the rowarraysin a matrix, making
it a more convenient option for such use cases. For example, this line
creates a loop that returns arowarray for each row in themmatrix:",https://www.tradingview.com/pine-script-docs/language/matrices
`for…in`,"The following indicator calculates the moving average of OHLC data with
an inputlengthand displays the values on the chart. The customrowWiseAvg()method loops through the rows of a matrix using afor...instructure to produce an array containing thearray.avg()of eachrow.",https://www.tradingview.com/pine-script-docs/language/matrices
`for…in`,"On the first chart bar, the script creates a newmmatrix with four
rows andlengthcolumns, which it queues a new column of OHLC data
into via them.add_col()andm.remove_col()methods on each subsequent bar. It usesm.rowWiseAvg()to calculate
the array of row-wiseaverages, then it plots the element values on
the chart:",https://www.tradingview.com/pine-script-docs/language/matrices
`for…in`,,https://www.tradingview.com/pine-script-docs/language/matrices
`for…in`,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Shallowcopies,"Pine scripts can copy matrices viamatrix.copy().
This function returns ashallow copyof a matrix that does not affect
the shape of the original matrix or its references.",https://www.tradingview.com/pine-script-docs/language/matrices
Shallowcopies,"For example, this script assigns a new matrix to themyMatrixvariable
and adds two columns. It creates a newmyCopymatrix frommyMatrixusing themyMatrix.copy()method, then adds a new row. It displays the rows of both matrices in
labels via the user-defineddebugLabel()function:",https://www.tradingview.com/pine-script-docs/language/matrices
Shallowcopies,,https://www.tradingview.com/pine-script-docs/language/matrices
Shallowcopies,"It’s important to note that the elements within shallow copies of a
matrix point to the same values as the original matrix. When matrices
contain special types
(line,linefill,box,polyline,label,table,
orchart.point)
oruser-defined types, the elements of a shallow copy reference the same objects
as the original.",https://www.tradingview.com/pine-script-docs/language/matrices
Shallowcopies,"This script declares amyMatrixvariable with anewLabelas the
initial value. It then copiesmyMatrixto amyCopyvariable viamyMatrix.copy()and plots the number of labels. As we see below, there’s only onelabelon the chart, as the element inmyCopyreferences the same object as
the element inmyMatrix. Consequently, changes to the element values
inmyCopyaffect the values in both matrices:",https://www.tradingview.com/pine-script-docs/language/matrices
Shallowcopies,,https://www.tradingview.com/pine-script-docs/language/matrices
Deepcopies,"One can produce adeep copyof a matrix (i.e., a matrix whose elements
point to copies of the original values) by explicitly copying each
object the matrix references.",https://www.tradingview.com/pine-script-docs/language/matrices
Deepcopies,"Here, we’ve added adeepCopy()user-defined method to our previous
script. The method creates a new matrix and usesnested for loopsto assign all elements to copies of the originals. When the
script calls this method instead of the built-incopy(),
we see that there are now two labels on the chart, and any changes to
the label frommyCopydo not affect the one frommyMatrix:",https://www.tradingview.com/pine-script-docs/language/matrices
Deepcopies,,https://www.tradingview.com/pine-script-docs/language/matrices
Submatrices,"In Pine, asubmatrixis ashallow copyof an existing matrix that only includes the rows and
columns specified by thefrom_row/columnandto_row/columnparameters. In essence, it is a sliced copy of a matrix.",https://www.tradingview.com/pine-script-docs/language/matrices
Submatrices,"For example, the script below creates anmSubmatrix from themmatrix via them.submatrix()method, then calls our user-defineddebugLabel()function to display
the rows of both matrices in labels:",https://www.tradingview.com/pine-script-docs/language/matrices
Submatrices,,https://www.tradingview.com/pine-script-docs/language/matrices
Scope andhistory,"Matrix variables leave historical trails on each bar, allowing scripts
to use the history-referencing operator[]to interact with past matrix instances previously assigned to a
variable. Additionally, scripts can modify matrices assigned to global
variables from within the scopes offunctions,methods, andconditional structures.",https://www.tradingview.com/pine-script-docs/language/matrices
Scope andhistory,"This script calculates the average ratios of body and wick distances
relative to the bar range overlengthbars. It displays the data along
with values fromlengthbars ago in a table. The user-definedaddData()function adds columns of current and historical ratios to
theglobalMatrix, and thecalcAvg()function referencespreviousmatrices assigned toglobalMatrixusing the[]operator to calculate a matrix of averages:",https://www.tradingview.com/pine-script-docs/language/matrices
Scope andhistory,,https://www.tradingview.com/pine-script-docs/language/matrices
Scope andhistory,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Inspecting amatrix,"The ability to inspect the shape of a matrix and patterns within its
elements is crucial, as it helps reveal important information about a
matrix and its compatibility with various calculations and
transformations. Pine Script™ includes several built-ins for matrix
inspection, includingmatrix.is_square(),matrix.is_identity(),matrix.is_diagonal(),matrix.is_antidiagonal(),matrix.is_symmetric(),matrix.is_antisymmetric(),matrix.is_triangular(),matrix.is_stochastic(),matrix.is_binary(),
andmatrix.is_zero().",https://www.tradingview.com/pine-script-docs/language/matrices
Inspecting amatrix,"To demonstrate these features, this example contains a custominspect()method that uses conditional blocks withmatrix.is_*()functions to return information about a matrix. It displays a string
representation of anmmatrix and the description returned fromm.inspect()in labels on the chart:",https://www.tradingview.com/pine-script-docs/language/matrices
Inspecting amatrix,,https://www.tradingview.com/pine-script-docs/language/matrices
Reshaping,"The shape of a matrix can determine its compatibility with various
matrix operations. In some cases, it is necessary to change the
dimensions of a matrix without affecting the number of elements or the
values they reference, otherwise known asreshaping. To reshape a
matrix in Pine, use thematrix.reshape()function.",https://www.tradingview.com/pine-script-docs/language/matrices
Reshaping,"This example demonstrates the results of multiple reshaping operations
on a matrix. The initialmmatrix has a 1x8 shape (one row and eight
columns). Through successive calls to them.reshape()method, the script changes the shape ofmto 2x4, 4x2, and 8x1. It
displays each reshaped matrix in a label on the chart using the customdebugLabel()method:",https://www.tradingview.com/pine-script-docs/language/matrices
Reshaping,,https://www.tradingview.com/pine-script-docs/language/matrices
Reshaping,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Reversing,"One can reverse the order of all elements in a matrix usingmatrix.reverse().
This function moves the references of an m-by-n matrixidat the i-th
row and j-th column to the m - 1 - i row and n - 1 - j column.",https://www.tradingview.com/pine-script-docs/language/matrices
Reversing,"For example, this script creates a 3x3 matrix containing the values 1-9
in ascending order, then uses thereverse()method to reverse its contents. It displays the original and modified
versions of the matrix in labels on the chart viam.debugLabel():",https://www.tradingview.com/pine-script-docs/language/matrices
Reversing,,https://www.tradingview.com/pine-script-docs/language/matrices
Transposing,"Transposing a matrix is a fundamental operation that flips all rows and
columns in a matrix about itsmain diagonal(the diagonal vector of
all values in which the row index equals the column index). This process
produces a new matrix with reversed row and column dimensions, known as
thetranspose. Scripts can calculate the transpose of a matrix usingmatrix.transpose().",https://www.tradingview.com/pine-script-docs/language/matrices
Transposing,"For any m-row, n-column matrix, the matrix returned frommatrix.transpose()will have n rows and m columns. All elements in a matrix at the i-th row
and j-th column correspond to the elements in its transpose at the j-th
row and i-th column.",https://www.tradingview.com/pine-script-docs/language/matrices
Transposing,"This example declares a 2x4mmatrix, calculates its transpose using
them.transpose()method, and displays both matrices on the chart using our customdebugLabel()method. As we can see below, the transposed matrix has a
4x2 shape, and the rows of the transpose match the columns of the
original:",https://www.tradingview.com/pine-script-docs/language/matrices
Transposing,,https://www.tradingview.com/pine-script-docs/language/matrices
Sorting,"Scripts can sort the contents of a matrix viamatrix.sort().
Unlikearray.sort(),
which sortselements, this function organizes allrowsin a matrix
in a specifiedorder(order.ascendingby default) based on the values in a specifiedcolumn.",https://www.tradingview.com/pine-script-docs/language/matrices
Sorting,"This script declares a 3x3mmatrix, sorts the rows of them1copy
in ascending order based on the first column, then sorts the rows of them2copy in descending order based on the second column. It displays
the original matrix and sorted copies in labels using ourdebugLabel()method:",https://www.tradingview.com/pine-script-docs/language/matrices
Sorting,,https://www.tradingview.com/pine-script-docs/language/matrices
Sorting,"It’s important to note thatmatrix.sort()does not sort the columns of a matrix. However, onecanuse this
function to sort matrix columns with the help ofmatrix.transpose().",https://www.tradingview.com/pine-script-docs/language/matrices
Sorting,"As an example, this script contains asortColumns()method that uses
thesort()method to sort thetransposeof a matrix using the column corresponding to therowof the original
matrix. The script uses this method to sort themmatrix based on the
contents of its first row:",https://www.tradingview.com/pine-script-docs/language/matrices
Sorting,,https://www.tradingview.com/pine-script-docs/language/matrices
Concatenating,"Scripts canconcatenatetwo matrices usingmatrix.concat().
This function appends the rows of anid2matrix to the end of anid1matrix with the same number of columns.",https://www.tradingview.com/pine-script-docs/language/matrices
Concatenating,"To create a matrix with elements representing thecolumnsof a matrix
appended to another,transposeboth matrices, usematrix.concat()on the transposed matrices, thentranspose()the result.",https://www.tradingview.com/pine-script-docs/language/matrices
Concatenating,"For example, this script appends the rows of them2matrix to them1matrix and appends their columns usingtransposed copiesof the
matrices. It displays them1andm2matrices and the results after
concatenating their rows and columns in labels using the customdebugLabel()method:",https://www.tradingview.com/pine-script-docs/language/matrices
Concatenating,,https://www.tradingview.com/pine-script-docs/language/matrices
Element-wisecalculations,"Pine scripts can calculate theaverage,minimum,maximum, andmodeof all elements within a matrix viamatrix.avg(),matrix.min(),matrix.max(),
andmatrix.mode().
These functions operate the same as theirarray.*equivalents,
allowing users to run element-wise calculations on a matrix, itssubmatrices, and itsrows and columnsusing the same syntax. For example, the built-in*.avg()functions called on a 3x3 matrix with values 1-9 and anarraywith the same nine elements will both return a value of 5.",https://www.tradingview.com/pine-script-docs/language/matrices
Element-wisecalculations,"The script below uses*.avg(),*.max(), and*.min()methods to
calculate developing averages and extremes of OHLC data in a period. It
adds a new column ofopen,high,low,
andclosevalues to the end of theohlcDatamatrix wheneverqueueColumnistrue. Whenfalse, the script uses theget()andset()matrix methods to adjust the elements in the last column for developing
HLC values in the current period. It uses theohlcDatamatrix, asubmatrix(),
androw()andcol()arrays to calculate the developing OHLC4 and HL2 averages overlengthperiods, the maximum high and minimum low overlengthperiods, and the
current period’s developing OHLC4 price:",https://www.tradingview.com/pine-script-docs/language/matrices
Element-wisecalculations,,https://www.tradingview.com/pine-script-docs/language/matrices
Element-wisecalculations,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Pine Script™ features several built-in functions for performing
essential matrix arithmetic and linear algebra operations, includingmatrix.sum(),matrix.diff(),matrix.mult(),matrix.pow(),matrix.det(),matrix.inv(),matrix.pinv(),matrix.rank(),matrix.trace(),matrix.eigenvalues(),matrix.eigenvectors(),
andmatrix.kron().
These functions are advanced features that facilitate a variety of
matrix calculations and transformations.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Below, we explain a few fundamental functions with some basic examples.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Scripts can perform addition and subtraction of two matrices with the
same shape or a matrix and a scalar value using thematrix.sum()andmatrix.diff()functions. These functions use the values from theid2matrix or
scalar to add to or subtract from the elements inid1.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"This script demonstrates a simple example of matrix addition and
subtraction in Pine. It creates a 3x3 matrix, calculates itstranspose, then calculates thematrix.sum()andmatrix.diff()of the two matrices. This example displays the original matrix, itstranspose,
and the resulting sum and difference matrices in labels on the chart:",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Scripts can multiply two matrices via thematrix.mult()function. This function also facilitates the multiplication of a matrix
by anarrayor a scalar value.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"In the case of multiplying two matrices, unlike addition and
subtraction, matrix multiplication does not require two matrices to
share the same shape. However, the number of columns in the first matrix
must equal the number of rows in the second one. The resulting matrix
returned bymatrix.mult()will contain the same number of rows asid1and the same number of
columns asid2. For instance, a 2x3 matrix multiplied by a 3x4 matrix
will produce a matrix with two rows and four columns, as shown below.
Each value within the resulting matrix is thedot
productof the corresponding
row inid1and column inid2:",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"When multiplying a matrix and anarray,
this function treats the operation the same as multiplyingid1by a
single-column matrix, but it returns anarraywith the same number of elements as the number of rows inid1. Whenmatrix.mult()passes a scalar as itsid2value, the function returns a new matrix
whose elements are the elements inid1multiplied by theid2value.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Adeterminantis a scalar value associated with asquarematrix that describes some of its characteristics, namely its
invertibility. If a matrix has aninverse,
its determinant is nonzero. Otherwise, the matrix issingular(non-invertible). Scripts can calculate the determinant of a matrix viamatrix.det().",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Programmers can use determinants to detect similarities between
matrices, identifyfull-rankandrank-deficientmatrices, and solve
systems of linear equations, among other applications.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"For example, this script utilizes determinants to solve a system of
linear equations with a matching number of unknown values usingCramer’s rule. The
user-definedsolve()function returns anarraycontaining solutions for each unknown value in the system, where the
n-th element of the array is the determinant of the coefficient matrix
with the n-th column replaced by the column of constants divided by the
determinant of the original coefficients.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"In this script, we’ve defined the matrixmthat holds coefficients
and constants for these three equations:",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Code:
3 * x0 + 4 * x1 - 1 * x2 = 85 * x0 - 2 * x1 + 1 * x2 = 42 * x0 - 2 * x1 + 1 * x2 = 1",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"The solution to this system is(x0 = 1, x1 = 2, x2 = 3). The script
calculates these values frommviam.solve()and plots them on the
chart:",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"For any non-singularsquarematrix, there is an inverse matrix that yields theidentitymatrix whenmultipliedby the original. Inverses have utility in various matrix
transformations and solving systems of equations. Scripts can calculate
the inverse of a matrixwhen one existsvia thematrix.inv()function.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"For singular (non-invertible) matrices, one can calculate a generalized
inverse
(pseudoinverse),
regardless of whether the matrix is square or has a nonzerodeterminant <_PageMatrices_MatrixCalculations_SpecialCalculations_MatrixDet>, via thematrix.pinv()function. Keep in mind that unlike a true inverse, the product of a
pseudoinverse and the original matrix does not necessarily equal the
identity matrix unless the original matrixis invertible.",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"The following example forms a 2x2mmatrix from user inputs, then uses
them.inv()andm.pinv()methods to calculate the inverse or pseudoinverse ofm. The script
displays the original matrix, its inverse or pseudoinverse, and their
product in labels on the chart:",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"Therankof a matrix represents the number of linearly independent
vectors (rows or columns) it contains. In essence, matrix rank measures
the number of vectors one cannot express as a linear combination of
others, or in other words, the number of vectors that containuniqueinformation. Scripts can calculate the rank of a matrix viamatrix.rank().",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,"This script identifies the number of linearly independent vectors in two
3x3 matrices (m1andm2) and plots the values in a separate pane. As
we see on the chart, them1.rank()value is 3 because each vector is unique. Them2.rank()value, on the other hand, is 1 because it has just one unique vector:",https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,,https://www.tradingview.com/pine-script-docs/language/matrices
Specialcalculations,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Errorhandling,"In addition to usualcompilererrors, which occur during a script’s
compilation due to improper syntax, scripts using matrices can raise
specificruntimeerrors during their execution. When a script raises
a runtime error, it displays a red exclamation point next to the script
title. Users can view the error message by clicking this icon.",https://www.tradingview.com/pine-script-docs/language/matrices
Errorhandling,"In this section, we discuss runtime errors that users may encounter
while utilizing matrices in their scripts.",https://www.tradingview.com/pine-script-docs/language/matrices
"The row/column index (xx) is out of bounds, row/column size is(yy).","This runtime error occurs when trying to access indices outside the
matrix dimensions with functions includingmatrix.get(),matrix.set(),matrix.fill(),
andmatrix.submatrix(),
as well as some of the functions relating to therows and columnsof a matrix.",https://www.tradingview.com/pine-script-docs/language/matrices
"The row/column index (xx) is out of bounds, row/column size is(yy).","For example, this code contains two lines that will produce this runtime
error. Them.set()method references arowindex that doesn’t exist (2). Them.submatrix()method references all column indices up toto_column - 1. Ato_columnvalue of 4 results in a runtime error because the last
column index referenced (3) does not exist inm:",https://www.tradingview.com/pine-script-docs/language/matrices
"The row/column index (xx) is out of bounds, row/column size is(yy).","Users can avoid this error in their scripts by ensuring their function
calls do not reference indices greater than or equal to the number of
rows/columns.",https://www.tradingview.com/pine-script-docs/language/matrices
The array size does not match the number of rows/columns in thematrix.,"When usingmatrix.add_row()andmatrix.add_col()functions toinsertrows and columns into a non-empty matrix, the size of the
inserted array must align with the matrix dimensions. The size of an
inserted row must match the number of columns, and the size of an
inserted column must match the number of rows. Otherwise, the script
will raise this runtime error. For example:",https://www.tradingview.com/pine-script-docs/language/matrices
The array size does not match the number of rows/columns in thematrix.,Note that:,https://www.tradingview.com/pine-script-docs/language/matrices
Cannot call matrix methods when the ID of matrix is‘na’.,"When a matrix variable is assigned tona, it means that the variable
doesn’t reference an existing object. Consequently, one cannot use
built-inmatrix.*()functions and methods with it. For example:",https://www.tradingview.com/pine-script-docs/language/matrices
Cannot call matrix methods when the ID of matrix is‘na’.,"To resolve this error, assignmto a valid matrix instance before
usingmatrix.*()functions.",https://www.tradingview.com/pine-script-docs/language/matrices
"Matrix is too large. Maximum size of the matrix is 100,000elements.","The total number of elements in a matrix
(matrix.elements_count())
cannot exceed100,000, regardless of its shape. For example, this
script will raise an error because itinserts1000 rows with 101 elements into themmatrix:",https://www.tradingview.com/pine-script-docs/language/matrices
The row/column index must be 0 <= from_row/column < to_row/column.,"When usingmatrix.*()functions withfrom_row/columnandto_row/columnindices, thefrom_*values must be less than the
correspondingto_*values, with the minimum possible value being 0.
Otherwise, the script will raise a runtime error.",https://www.tradingview.com/pine-script-docs/language/matrices
The row/column index must be 0 <= from_row/column < to_row/column.,"For example, this script shows an attempt to declare asubmatrixfrom a 4x4mmatrix with afrom_rowvalue of 2 and ato_rowvalue of 2, which will result in an error:",https://www.tradingview.com/pine-script-docs/language/matrices
Matrices ‘id1’ and ‘id2’ must have an equal number of rows and columns to beadded.,"When usingmatrix.sum() and matrix.diff()functions, theid1andid2matrices must have the same
number of rows and the same number of columns. Attempting to add or
subtract two matrices with mismatched dimensions will raise an error, as
demonstrated by this code:",https://www.tradingview.com/pine-script-docs/language/matrices
The number of columns in the ‘id1’ matrix must equal the number of rows in the matrix (or the number of elements in the array)‘id2’.,"When usingmatrix.mult()to multiply anid1matrix by anid2matrix or array, thematrix.rows()orarray.size()ofid2must equal thematrix.columns()inid1. If they don’t align, the script will raise this error.",https://www.tradingview.com/pine-script-docs/language/matrices
The number of columns in the ‘id1’ matrix must equal the number of rows in the matrix (or the number of elements in the array)‘id2’.,"For example, this script tries to multiply two 2x3 matrices. Whileaddingthese matrices is possible,multiplyingthem is not:",https://www.tradingview.com/pine-script-docs/language/matrices
Operation not available for non-squarematrices.,"Some matrix operations, includingmatrix.inv(),matrix.det(),matrix.eigenvalues(),
andmatrix.eigenvectors()only work withsquarematrices, i.e., matrices with the same number
of rows and columns. When attempting to execute such functions on
non-square matrices, the script will raise an error stating the
operation isn’t available or that it cannot calculate the result for
the matrixid. For example:",https://www.tradingview.com/pine-script-docs/language/matrices
Operation not available for non-squarematrices.,Previous,https://www.tradingview.com/pine-script-docs/language/matrices
Operation not available for non-squarematrices.,Next,https://www.tradingview.com/pine-script-docs/language/matrices
Maps,"Notice!This page contains advanced material. If you are a beginning Pine
Script™ programmer, we recommend you become familiar with other, more
accessible Pine Script™ features before you venture here.",https://www.tradingview.com/pine-script-docs/language/maps
Introduction,"Pine Script™ Maps are collections that store elements inkey-value
pairs. They allow scripts to collect multiple value references
associated with unique identifiers (keys).",https://www.tradingview.com/pine-script-docs/language/maps
Introduction,"Unlikearraysandmatrices, maps areunorderedcollections. Scripts quickly access a map’s
values by referencing the keys from the key-value pairs put into them
rather than traversing an internal index.",https://www.tradingview.com/pine-script-docs/language/maps
Introduction,"A map’s keys can be of anyfundamental typeorenum type,
and its values can be of any available type. Maps cannot directly use othercollections(maps,arrays, ormatrices) as values, but they can holdUDTinstances containing these data structures within their fields. Seethis sectionfor more information.",https://www.tradingview.com/pine-script-docs/language/maps
Introduction,"As with other collections, maps can contain up to 100,000 elements in
total. Since each key-value pair in a map consists of two elements (a
uniquekeyand its associatedvalue), the maximum number of
key-value pairs a map can hold is 50,000.",https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,Pine Script™ uses the following syntax to declare maps:,https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,"Code:
[var/varip ][map<keyType, valueType> ]<identifier> = <expression>",https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,"Where<keyType, valueType>is the map’stype templatethat declares the types of keys and values it will contain,
and the<expression>returns either a map instance orna.",https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,"When declaring a map variable assigned tona, users must include themapkeyword followed by atype templateto tell the compiler that the variable can accept maps withkeyTypekeys andvalueTypevalues.",https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,"For example, this line of code declares a newmyMapvariable that can
accept map instances holding pairs ofstringkeys andfloatvalues:",https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,"When the<expression>is notna, the compiler does not require
explicit type declaration, as it will infer the type information from
the assigned map object.",https://www.tradingview.com/pine-script-docs/language/maps
Declaring amap,"This line declares amyMapvariable assigned to an empty map withstringkeys andfloatvalues. Any maps assigned to this variable later must have the same key
and value types:",https://www.tradingview.com/pine-script-docs/language/maps
Using `var` and `varip`keywords,"Users can include thevarorvaripkeywords to instruct their scripts to declare map variables only on the
first chart bar. Variables that use these keywords point to the same map
instances on each script iteration until explicitly reassigned.",https://www.tradingview.com/pine-script-docs/language/maps
Using `var` and `varip`keywords,"For example, this script declares acolorMapvariable assigned to a
map that holds pairs ofstringkeys andcolorvalues on the first chart bar. The script displays anoscillatoron
the chart and uses the values itputinto thecolorMapon thefirstbar to color the plots onallbars:",https://www.tradingview.com/pine-script-docs/language/maps
Using `var` and `varip`keywords,,https://www.tradingview.com/pine-script-docs/language/maps
Using `var` and `varip`keywords,"Notice!Map variables declared usingvaripbehave as ones usingvaron
historical data, but they update their key-value pairs for realtime bars
(i.e., the bars since the script’s last compilation) on each new price
tick. Maps assigned tovaripvariables can only hold values ofint,float,bool,color,
orstringtypes oruser-defined typesthat exclusively contain within their fields these types or
collections (arrays,matrices, or maps) of
these types.",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"Themap.put()function is one that map users will utilize quite often, as it’s the
primary method to put a new key-value pair into a map. It associates thekeyargument with thevalueargument in the call and adds the pair
to the mapid.",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"If thekeyargument in themap.put()call already exists in the map’skeys,
the new pair passed into the function willreplacethe existing one.",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"To retrieve the value from a mapidassociated with a givenkey, usemap.get().
This function returns the value if theidmapcontainsthekey. Otherwise, it returnsna.",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"The following example calculates the difference between thebar_indexvalues from whenclosewas lastrisingandfallingover a givenlengthwith the help ofmap.put()andmap.get()methods. The script puts a(""Rising"", bar_index)pair into thedatamap when the price is rising and puts a(""Falling"", bar_index)pair
into the map when the price is falling. It then puts a pair containing
the “Difference” between the “Rising” and “Falling” values into
the map and plots its value on the chart:",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,,https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,Note that:,https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"Similar to working with other collections, when putting a value of aspecial type(line,linefill,box,polyline,label,table,
orchart.point)
or auser-defined typeinto a map, it’s important to note the inserted pair’svaluepoints to that same object without copying it. Modifying the
value referenced by a key-value pair will also affect the original
object.",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"For example, this script contains a customChartDatatype witho,h,l, andcfields. On the first chart bar, the script declares amyMapvariable and adds the pair(""A"", myData), wheremyDatais aChartDatainstance with initial field values ofna. It adds the pair(""B"", myData)tomyMapand updates the object from this pair on
every bar via the user-definedupdate()method.",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,"Each change to the object with the “B” key affects the one referenced
by the “A” key, as shown by the candle plot of the “A” object’s
fields:",https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,,https://www.tradingview.com/pine-script-docs/language/maps
Putting and getting key-valuepairs,Note that:,https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"To retrieve all keys and values put into a map, usemap.keys()andmap.values().
These functions copy all key/value references within a mapidto a newarrayobject. Modifying the array returned from either of these functions does
not affect theidmap.",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"Although maps areunorderedcollections, Pine Script™ internally
maintains theinsertion orderof a map’s key-value pairs. As a
result, themap.keys()andmap.values()functions always returnarrayswith their elements ordered based on theidmap’s
insertion order.",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"The script below demonstrates this by displaying the key and value
arrays from anmmap in alabelonce every 50 bars. As we see on the chart, the order of elements in
each array returned bym.keys()andm.values()aligns with the
insertion order of the key-value pairs inm:",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,,https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,Note that:,https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"It’s important to note a map’s internal insertion orderdoes notchange when replacing its key-value pairs. The locations of the new
elements in thekeys()andvalues()arrays will be the same as the old elements in such cases. The only
exception is if the script completelyremovesthe key beforehand.",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"Below, we’ve added a line of code toputa new value with the “Second” key into themmap, overwriting the
previous value associated with that key. Although the script puts this
new pair into the mapafterthe one with the “Third” key, the
pair’s key and value are still second in thekeysandvaluesarrays
since the key was already present inmbeforethe change:",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,,https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"Notice!The elements in amap.values()array point to the same values as the mapid. Consequently, when the
map’s values are ofreference types, includingline,linefill,box,polyline,label,table,chart.point,
orUDTs, modifying the instances referenced by themap.values()array will also affect those referenced by the mapidsince the
contents of both collections point to identical objects.",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"To check if a specifickeyexists within a mapid, usemap.contains().
This function is a convenient alternative to callingarray.includes()on thearrayreturned frommap.keys().",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,"For example, this script checks if various keys exist within anmmap,
then displays the results in alabel:",https://www.tradingview.com/pine-script-docs/language/maps
Inspecting keys andvalues,,https://www.tradingview.com/pine-script-docs/language/maps
Removing key-valuepairs,"To remove a specific key-value pair from a mapid, usemap.remove().
This function removes thekeyand its associated value from the map
while preserving the insertion order of other key-value pairs. It
returns the removed value if the mapcontainedthekey. Otherwise, it returnsna.",https://www.tradingview.com/pine-script-docs/language/maps
Removing key-valuepairs,"To remove all key-value pairs from a mapidat once, usemap.clear().",https://www.tradingview.com/pine-script-docs/language/maps
Removing key-valuepairs,"The following script creates a newmmap,putskey-value pairs into the map, usesm.remove()within a loop to remove each validkeylisted in theremoveKeysarray, then callsm.clear()to remove all remaining key-value pairs. It uses a customdebugLabel()method to display thesize,keys,
andvaluesofmafter each change:",https://www.tradingview.com/pine-script-docs/language/maps
Removing key-valuepairs,,https://www.tradingview.com/pine-script-docs/language/maps
Removing key-valuepairs,Note that:,https://www.tradingview.com/pine-script-docs/language/maps
Combiningmaps,"Scripts can combine two maps viamap.put_all().
This function putsallkey-value pairs from theid2map, in their
insertion order, into theid1map. As withmap.put(),
if any keys inid2are also present inid1, this functionreplacesthe key-value pairs that contain those keys without
affecting their initial insertion order.",https://www.tradingview.com/pine-script-docs/language/maps
Combiningmaps,"This example contains a user-definedhexMap()function that maps
decimalintkeys tostringrepresentations of theirhexadecimalforms. The
script uses this function to create two maps,mapAandmapB, then
usesmapA.put_all(mapB)to put all key-value pairs frommapBintomapA.",https://www.tradingview.com/pine-script-docs/language/maps
Combiningmaps,"The script uses a customdebugLabel()function to display labels
showing thekeysandvaluesofmapAandmapB, then another label displaying the contents ofmapAafter putting all key-value pairs frommapBinto it:",https://www.tradingview.com/pine-script-docs/language/maps
Combiningmaps,,https://www.tradingview.com/pine-script-docs/language/maps
Looping through amap,"There are several ways scripts can iteratively access the keys and
values in a map. For example, one could loop through a map’skeys()array andget()the value for eachkey, like so:",https://www.tradingview.com/pine-script-docs/language/maps
Looping through amap,"However, we recommend using afor...inloop directly on a map, as it
iterates over the map’s key-value pairs in their insertion order,
returning a tuple containing the next pair’s key and value on each
iteration.",https://www.tradingview.com/pine-script-docs/language/maps
Looping through amap,"For example, this line of code loops through eachkeyandvalueinthisMap, starting from the first key-value pair put into it:",https://www.tradingview.com/pine-script-docs/language/maps
Looping through amap,"Let’s use this structure to write a script that displays a map’s
key-value pairs in atable.
In the example below, we’ve defined a customtoTable()method that
creates atable,
then uses afor...inloop to iterate over the map’s key-value pairs
and populate the table’s cells. The script uses this method to
visualize a map containinglength-baraveragesof price and volume
data:",https://www.tradingview.com/pine-script-docs/language/maps
Looping through amap,,https://www.tradingview.com/pine-script-docs/language/maps
Shallowcopies,Scripts can make ashallow copyof a mapidusing themap.copy()function. Modifications to a shallow copy do not affect the originalidmap or its internal insertion order.,https://www.tradingview.com/pine-script-docs/language/maps
Shallowcopies,"For example, this script constructs anmmap with the keys “A”,
“B”, “C”, and “D” assigned to fourrandomvalues between 0 and 10. It then creates anmCopymap as a shallow
copy ofmand updates the values associated with its keys. The script
displays the key-value pairs inmandmCopyon the chart using our
customdebugLabel()method:",https://www.tradingview.com/pine-script-docs/language/maps
Shallowcopies,,https://www.tradingview.com/pine-script-docs/language/maps
Deepcopies,"While ashallow copywill suffice when copying maps that have values of afundamental typeorenum type, it’s crucial to understand that shallow copies of a map holding values of aspecial type(line,linefill,box,polyline,label,table,chart.pointor aUDT) point to the same objects as the original. Modifying the
objects referenced by a shallow copy will affect the instances
referenced by the original map and vice versa.",https://www.tradingview.com/pine-script-docs/language/maps
Deepcopies,"To ensure changes to objects referenced by a copied map do not affect
instances referenced in other locations, one can make adeep copyby
creating a new map with key-value pairs containing copies of each value
in the original map.",https://www.tradingview.com/pine-script-docs/language/maps
Deepcopies,"This example creates anoriginalmap ofstringkeys andlabelvalues andputsa key-value pair into it. The script copies the map to ashallowvariable via the built-incopy()method, then to adeepvariable using a customdeepCopy()method.",https://www.tradingview.com/pine-script-docs/language/maps
Deepcopies,"As we see from the chart, changes to the label retrieved from theshallowcopy also affect the instance referenced by theoriginalmap, but changes to the one from thedeepcopy do not:",https://www.tradingview.com/pine-script-docs/language/maps
Deepcopies,,https://www.tradingview.com/pine-script-docs/language/maps
Deepcopies,Note that:,https://www.tradingview.com/pine-script-docs/language/maps
Scope andhistory,"As with other collections in Pine, map variables leave historical trails
on each bar, allowing a script to access past map instances assigned to
a variable using the history-referencing operator[].
Scripts can also assign maps to global variables and interact with them
from the scopes offunctions,methods, andconditional structures.",https://www.tradingview.com/pine-script-docs/language/maps
Scope andhistory,"As an example, this script uses a global map and its history to
calculate an aggregate set ofEMAs. It
declares aglobalDatamap ofintkeys andfloatvalues, where each key in the map corresponds to the length of each EMA
calculation. The user-definedupdate()function calculates eachkey-length EMA by mixing the values from thepreviousmap assigned
toglobalDatawith the currentsourcevalue.",https://www.tradingview.com/pine-script-docs/language/maps
Scope andhistory,"The script plots themaximumandminimumvalues in the global map’svalues()array and the value fromglobalData.get(50)(i.e., the 50-bar EMA):",https://www.tradingview.com/pine-script-docs/language/maps
Scope andhistory,,https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,"Maps cannot directly use other maps,arrays, ormatricesas values, but
they can hold values of auser-defined typethat contains collections within its fields.",https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,"For example, suppose we want to create a “2D” map that usesstringkeys to accessnested mapsthat hold pairs ofstringkeys andfloatvalues. Since maps cannot use other collections as values, we will first
create awrapper typewith a field to hold amap<string, float>instance, like so:",https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,"With ourWrappertype defined, we can create maps ofstringkeys andWrappervalues, where thedatafield of each value in the
map points to amap<string, float>instance:",https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,"The script below uses this concept to construct a map containing maps
that hold OHLCV data requested from multiple tickers. The user-definedrequestData()function requests price and volume data from a ticker,
creates a<string, float>map,putsthe data into it, then returns aWrapperinstance containing the new
map.",https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,"The scriptputsthe results from each call torequestData()into themapOfMaps, then
creates astringrepresentation of the nested maps with a user-definedtoString()method, which it displays on the chart in alabel:",https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,,https://www.tradingview.com/pine-script-docs/language/maps
Maps of othercollections,Previous,https://www.tradingview.com/pine-script-docs/language/maps
Introduction,"TradingView alerts run 24x7 on our servers and do not require users to
be logged in to execute. Alerts are created from the charts user
interface (UI). You will find all the information necessary to
understand how alerts work and how to create them from the charts UI in
the Help Center’sAbout TradingView
alertspage.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Introduction,"Some of the alert types available on TradingView (generic alerts,drawing alertsandscript alertson order fill events) are created
from symbols or scripts loaded on the chart and do not require specific
coding. Any user can create these types of alerts from the charts UI.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Introduction,"Other types of alerts (script alertstriggering onalert() function
calls, andalertcondition() alerts) require specific Pine Script™
code to be present in a script to create analert eventbefore script
users can create alerts from them using the charts UI. Additionally,
while script users can createscript alertstriggering onorder fill
eventsfrom the charts UI on any strategy loaded on their chart,
Programmers can specify explicit order fill alert messages in their
script for each type of order filled by the broker emulator.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Introduction,"This page covers the different ways Pine Script™ programmers can code
their scripts to create alert events from which script users will in
turn be able to create alerts from the charts UI. We will cover:",https://www.tradingview.com/pine-script-docs/concepts/alerts
Introduction,Keep in mind that:,https://www.tradingview.com/pine-script-docs/concepts/alerts
Background,"The different methods Pine programmers can use today to create alert
events in their script are the result of successive enhancements
deployed throughout Pine Script™‘s evolution. Thealertcondition()function, which works in indicators only, was the first feature allowing
Pine Script™ programmers to create alert events. Then came order fill
alerts for strategies, which trigger when the broker emulator createsorder fill events.Order fill eventsrequire no special code for
script users to create alerts on them, but by way of thealert_messageparameter for order-generatingstrategy.*()functions, programmers can
customize the message of alerts triggering onorder fill eventsby
defining a distinct alert message for any number of order fulfillment
events.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Background,"Thealert()function is the most recent addition to Pine Script™. It more or less
supersedesalertcondition(),
and when used in strategies, provides a useful complement to alerts onorder fill events.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Which type of alert isbest?,"For Pine Script™ programmers, thealert()function will generally be easier and more flexible to work with.
Contrary toalertcondition(),
it allows for dynamic alert messages, works in both indicators and
strategies and the programmer decides on the frequency ofalert()events.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Which type of alert isbest?,"Whilealert()calls can be generated on any logic programmable in Pine, including when
orders aresentto the broker emulator in strategies, they cannot be
coded to trigger when orders areexecuted(orfilled) because
after orders are sent to the broker emulator, the emulator controls
their execution and does not report fill events back to the script
directly.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Which type of alert isbest?,"When a script user wants to generate an alert on a strategy’s order
fill events, he must include those events when creating ascript alerton the strategy in the “Create Alert” dialog box. No special code is
required in scripts for users to be able to do this. The message sent
with order fill events can, however, be customized by programmers
through use of thealert_messageparameter in order-generatingstrategy.*()function calls. A combination ofalert()calls and the use of customalert_messagearguments in
order-generatingstrategy.*()calls should allow programmers to
generate alert events on most conditions occurring in their script’s
execution.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Which type of alert isbest?,"Thealertcondition()function remains in Pine Script™ for backward compatibility, but it can
also be used advantageously to generate distinct alerts available for
selection as individual items in the “Create Alert” dialog box’s
“Condition” field.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Scriptalerts,"When a script user creates ascript alertusing the “Create Alert”
dialog box, the events able to trigger the alert will vary depending on
whether the alert is created from an indicator or a strategy.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Scriptalerts,Ascript alertcreated from anindicatorwill trigger when:,https://www.tradingview.com/pine-script-docs/concepts/alerts
Scriptalerts,"Ascript alertcreated from astrategycan trigger onalert()
function calls, onorder fill events, or both. The script user
creating an alert on a strategy decides which type of events he wishes
to include in hisscript alert. While users can create ascript
alertonorder fill eventswithout the need for a strategy to include
special code, it must containalert()calls for users to includealert() function callsin theirscript
alert.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,Thealert()function has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"Code:
alert(message, freq)",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,message,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"A “series string” representing the message text sent when the
alert triggers. Because this argument allows “series” values, it
can be generated at runtime and differ bar to bar, making it
dynamic.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,freq,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"An “input string” specifying the triggering frequency of the
alert. Valid arguments are:",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"Thealert()function can be used in both indicators and strategies. For analert()call to trigger ascript alertconfigured onalert() function calls,
the script’s logic must allow thealert()call to execute,andthe frequency determined by thefreqparameter must allow the alert to trigger.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"Note that by default, strategies are recalculated at the bar’s close,
so if thealert()function with the frequencyalert.freq_alloralert.freq_once_per_baris used in a strategy, then it will be called
no more often than once at the bar’s close. In order to enable thealert()function to be called during the bar construction process, you need to
enable thecalc_on_every_tickoption.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,Let’s look at an example where we detect crosses of the RSI centerline:,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,If ascript alertis created from this script:,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,Note that:,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"Lastly, becausealert()messages can be constructed dynamically at runtime, we could have used
the following code to generate our alert events:",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"When users create ascript alertonalert() function calls, the
alert will trigger on any call the script makes to thealert()function, provided its frequency constraints are met. If you want to
allow your script’s users to select whichalert()function call in your script will trigger ascript alert, you will
need to provide them with the means to indicate their preference in your
script’s inputs, and code the appropriate logic in your script. This
way, script users will be able to create multiplescript alertsfrom a
single script, each behaving differently as per the choices made in the
script’s inputs prior to creating the alert in the charts UI.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"Suppose, for our next example, that we want to provide the option of
triggering alerts on only longs, only shorts, or both. You could code
your script like this:",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,Note how:,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"alert()function calls can be used in strategies also, with the provision that
strategies, by default, only execute on thecloseof realtime bars. Unlesscalc_on_every_tick = trueis used in thestrategy()declaration statement, allalert()calls will use thealert.freq_once_per_bar_closefrequency, regardless
of the argument used forfreq.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"Whilescript alertson strategies will useorder fill eventsto
trigger alerts when the broker emulator fills orders,alert()can be used advantageously to generate other alert events in strategies.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"This strategy createsalert() function callswhen RSI moves against
the trade for three consecutive bars:",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alert()` functionevents,"If a user created ascript alertfrom this strategy and included bothorder fill eventsandalert() function callsin his alert, the alert
would trigger whenever an order is executed, or when one of thealert()calls was executed by the script on the realtime bar’s closing
iteration, i.e., whenbarstate.isrealtimeandbarstate.isconfirmedare both true. Thealert() function eventsin the script would only
trigger the alert when the realtime bar closes becausealert.freq_once_per_bar_closeis the argument used for thefreqparameter in thealert()calls.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,"When ascript alertis created from an indicator, it can only trigger
onalert() function calls. However, when ascript alertis created
from a strategy, the user can specify thatorder fill eventsalso
trigger thescript alert. Anorder fill eventis any event generated
by the broker emulator which causes a simulated order to be executed. It
is the equivalent of a trade order being filled by a broker/exchange.
Orders are not necessarily executed when they are placed. In a strategy,
the execution of orders can only be detected indirectly and after the
fact, by analyzing changes in built-in variables such asstrategy.opentradesorstrategy.position_size.Script alertsconfigured onorder fill eventsare thus useful in
that they allow the triggering of alerts at the precise moment of an
order’s execution, before a script’s logic can detect it.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,"Pine Script™ programmers can customize the alert message sent when
specific orders are executed. While this is not a pre-requisite fororder fill eventsto trigger, custom alert messages can be useful
because they allow custom syntax to be included with alerts in order to
route actual orders to a third-party execution engine, for example.
Specifying custom alert messages for specificorder fill eventsis
done by means of thealert_messageparameter in functions which can
generate orders:strategy.close(),strategy.entry(),strategy.exit()andstrategy.order().",https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,"The argument used for thealert_messageparameter is a “series
string”, so it can be constructed dynamically using any variable
available to the script, as long as it is converted to string format.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,"Let’s look at a strategy where we use thealert_messageparameter in
both ourstrategy.entry()calls:",https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,Note that:,https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,"When thealert_messageparameter is used in a strategy’s
order-generatingstrategy.*()function calls, script users must
include the{{strategy.order.alert_message}}placeholder in the
“Create Alert” dialog box’s “Message” field when creatingscript
alertsonorder fill events. This is required so thealert_messageargument used in the order-generatingstrategy.*()function calls is
used in the message of alerts triggering on eachorder fill event.
When only using the{{strategy.order.alert_message}}placeholder in
the “Message” field and thealert_messageparameter is present in
only some of the order-generatingstrategy.*()function calls in your
strategy, an empty string will replace the placeholder in the message of
alerts triggered by any order-generatingstrategy.*()function call
not using thealert_messageparameter.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Order fillevents,"While other placeholders can be used in the “Create Alert” dialog
box’s “Message” field by users creating alerts onorder fill
events, they cannot be used in the argument ofalert_message.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"Thealertcondition()function allows programmers to create individualalertcondition eventsin their indicators. One indicator may contain more than onealertcondition()call. Each call toalertcondition()in a script will create a corresponding alert selectable in the
“Condition” dropdown menu of the “Create Alert” dialog box.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"While the presence ofalertcondition()calls in astrategyscript will not cause a compilation error,
alerts cannot be created from them.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,Thealertcondition()function has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"Code:
alertcondition(condition, title, message)",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,condition,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"A “series bool” value (trueorfalse) which determines when
the alert will trigger. It is a required argument. When the value istruethe alert will trigger. When the value isfalsethe alert
will not trigger. Contrary toalert()function calls,alertcondition()calls must start at column zero of a line, so cannot be placed in
conditional blocks.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,title,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"A “const string” optional argument that sets the name of the alert
condition as it will appear in the “Create Alert” dialog box’s
“Condition” field in the charts UI. If no argument is supplied,
“Alert” will be used.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,message,https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"A “const string” optional argument that specifies the text message
to display when the alert triggers. The text will appear in the
“Message” field of the “Create Alert” dialog box, from where
script users can then modify it when creating an alert.As this
argument must be a “const string”, it must be known at compilation
time and thus cannot vary bar to bar.It can, however, contain
placeholders which will be replaced at runtime by dynamic values
that may change bar to bar. See this page’sPlaceholderssection for a list.",https://www.tradingview.com/pine-script-docs/concepts/alerts
`alertcondition()`events,"Thealertcondition()function does not include afreqparameter. The frequency ofalertcondition() alertsis determined by users in the “Create Alert”
dialog box.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Using onecondition,Here is an example of code creatingalertcondition() events:,https://www.tradingview.com/pine-script-docs/concepts/alerts
Using onecondition,"Because we have twoalertcondition()calls in our script, two different alerts will be available in the
“Create Alert” dialog box’s “Condition” field: “Long Alert” and
“Short Alert”.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Using onecondition,"If we wanted to include the value of RSI when the cross occurs, we could
not simply add its value to themessagestring usingstr.tostring(r), as we could in analert()call or in analert_messageargument in a strategy. We can, however,
include it using a placeholder. This shows two alternatives:",https://www.tradingview.com/pine-script-docs/concepts/alerts
Using onecondition,Note that:,https://www.tradingview.com/pine-script-docs/concepts/alerts
Using compoundconditions,"If we want to offer script users the possiblity of creating a single
alert from an indicator using multiplealertcondition()calls, we will need to provide options in the script’s inputs through
which users will indicate the conditions they want to trigger their
alert before creating it.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Using compoundconditions,This script demonstrates one way to do it:,https://www.tradingview.com/pine-script-docs/concepts/alerts
Using compoundconditions,"Note how thealertcondition()call is allowed to trigger on one of two conditions. Each condition can
only trigger the alert if the user enables it in the script’s inputs
before creating the alert.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"These placeholders can be used in themessageargument ofalertcondition()calls. They will be replaced with dynamic values when the alert
triggers. They are the only way to include dynamic values (values that
can vary bar to bar) inalertcondition()messages.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Note that users creatingalertcondition() alertsfrom the “Create
Alert” dialog box in the charts UI are also able to use these
placeholders in the dialog box’s “Message” field.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,{{exchange}},https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Exchange of the symbol used in the alert (NASDAQ, NYSE, MOEX, etc.).
Note that for delayed symbols, the exchange will end with “_DL” or
“_DLY.” For example, “NYMEX_DL.”",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,{{interval}},https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Returns the timeframe of the chart the alert is created on. Note
that Range charts are calculated based on 1m data, so the
placeholder will always return “1” on any alert created on a Range
chart.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"{{open}},{{high}},{{low}},{{close}},{{volume}}",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Corresponding values of the bar on which the alert has been
triggered.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"{{plot_0}},{{plot_1}}, […],{{plot_19}}",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Value of the corresponding plot number. Plots are numbered from zero
to 19 in order of appearance in the script, so only one of the first
20 plots can be used. For example, the built-in “Volume” indicator
has two output series: Volume and Volume MA, so you could use the
following:",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"{{plot(""[plot_title]"")}}",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"This placeholder can be used when one needs to refer to a plot using
thetitleargument used in aplot()call. Note that double quotation marks ("")mustbe used inside
the placeholder to wrap thetitleargument. This requires that a
single quotation mark (') be used to wrap themessagestring:",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,{{ticker}},https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Ticker of the symbol used in the alert (AAPL, BTCUSD, etc.).",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,{{time}},https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Returns the time at the beginning of the bar. Time is UTC, formatted
asyyyy-MM-ddTHH:mm:ssZ, so for example:2019-08-27T09:56:00Z.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,{{timenow}},https://www.tradingview.com/pine-script-docs/concepts/alerts
Placeholders,"Current time when the alert triggers, formatted in the same way as{{time}}. The precision is to the nearest second, regardless of
the chart’s timeframe.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Avoiding repainting withalerts,"The most common instances of repainting traders want to avoid with
alerts are ones where they must prevent an alert from triggering at some
point during the realtime bar when it wouldnothave triggered at
its close. This can happen when these conditions are met:",https://www.tradingview.com/pine-script-docs/concepts/alerts
Avoiding repainting withalerts,"The simplest way to avoid this type of repainting is to configure the
triggering frequency of alerts so they only trigger on the close of the
realtime bar. There is no panacea; avoiding this type of repaintingalwaysentails waiting for confirmed information, which means the
trader must sacrifice immediacy to achieve reliability.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Avoiding repainting withalerts,"Note that other types of repainting such as those documented in ourRepaintingsection may
not be preventable by simply triggering alerts on the close of realtime
bars.",https://www.tradingview.com/pine-script-docs/concepts/alerts
Avoiding repainting withalerts,Next,https://www.tradingview.com/pine-script-docs/concepts/alerts
Backgrounds,"Thebgcolor()function changes the color of the script’s background. If the script is
running inoverlay = truemode, then it will color the chart’s
background.",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,The function’s signature is:,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,"Code:
bgcolor(color, offset, editable, show_last, title, force_overlay) → void",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,"Itscolorparameter allows a “series color” to be used for its
argument, so it can be dynamically calculated in an expression.",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,"If the correct transparency is not part of the color to be used, it can
be be generated using thecolor.new()function.",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,"Here is a script that colors the background of trading sessions (try it
on 30min EURUSD, for example):",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,Note that:,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,"In our next example, we generate a gradient for the background of a CCI
line:",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,Note that:,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,"See theColorspage for
more examples of backgrounds.",https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,Previous,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Backgrounds,Next,https://www.tradingview.com/pine-script-docs/concepts/backgrounds
Barcoloring,"Thebarcolor()function colors bars on the main chart, regardless of whether the script is running in the main chart pane or a separate pane.",https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,The function’s signature is:,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,"Code:
barcolor(color, offset, editable, show_last, title, display) → void",https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,The coloring can be conditional because thecolorparameter accepts “series color” arguments.,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,The following script rendersinsideandoutsidebars in different colors:,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,Note that:,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,Previous,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Barcoloring,Next,https://www.tradingview.com/pine-script-docs/concepts/bar-coloring
Introduction,Theplotcandle()built-in function is used to plot candles.plotbar()is used to plot conventional bars.,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Introduction,"Both functions require four arguments that will be used for the OHLC
prices
(open,high,low,close)
of the bars they will be plotting. If one of those isna, no
bar is plotted.",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,The signature ofplotcandle()is:,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,"Code:
plotcandle(open, high, low, close, title, color, wickcolor, editable, show_last, bordercolor, display) → void",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,"This plots simple candles, all in blue, using the habitual OHLC values,
in a separate pane:",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,"To color them green or red, we can use the following code:",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,"Note that thecolorparameter accepts “series color” arguments, so
constant values such ascolor.red,color.lime,""#FF9090"", as well
as expressions that calculate colors at runtime, as is done with thepaletteColorvariable here, will all work.",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,"You can build bars or candles using values other than the actual OHLC
values. For example you could calculate and plot smoothed candles using
the following code, which also colors wicks depending on the position ofcloserelative to the smoothed close (c) of our indicator:",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,"You may find it useful to plot OHLC values taken from a higher
timeframe. You can, for example, plot daily bars on an intraday chart:",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting candles with`plotcandle()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,The signature ofplotbar()is:,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,"Code:
plotbar(open, high, low, close, title, color, editable, show_last, display, force_overlay) → void",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,"Note thatplotbar()has no parameter forbordercolororwickcolor, as there are no
borders or wicks on conventional bars.",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,"This plots conventional bars using the same coloring logic as in the
second example of the previous section:",https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,Previous,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Plotting bars with`plotbar()`,Next,https://www.tradingview.com/pine-script-docs/concepts/bar-plotting
Introduction,"A set of built-in variables in thebarstatenamespace allow your
script to detect different properties of the bar on which the script is
currently executing.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
Introduction,"These states can be used to restrict the execution or the logic of your
code to specific bars.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
Introduction,"Some built-ins return information on the trading session the current bar
belongs to. They are explained in theSession statessection.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
Bar state built-invariables,"Note that while indicators and libraries run on all price or volume
updates in real time, strategies not usingcalc_on_every_tickwill
not; they will only execute when the realtime bar closes. This will
affect the detection of bar states in that type of script. On open
markets, for example, this code will not display a background until the
realtime closes because that is when the strategy runs:",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isfirst`,"barstate.isfirstis onlytrueon the dataset’s first bar, i.e., whenbar_indexis zero.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isfirst`,"It can be useful to initialize variables on the first bar only, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.islast`,"barstate.islastistrueif the current bar is the last one on the chart, whether that
bar is a realtime bar or not.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.islast`,"It can be used to restrict the execution of code to the chart’s last
bar, which is often useful when drawing lines, labels or tables. Here,
we use it to determine when to update a label which we want to appear
only on the last bar. We create the label only once and then update its
properties usinglabel.set_*()functions because it is more efficient:",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.ishistory`,"barstate.ishistoryistrueon all historical bars. It can never betrueon a bar whenbarstate.isrealtimeis alsotrue, and it does not becometrueon a realtime bar’s
closing update, whenbarstate.isconfirmedbecomestrue. On closed markets, it can betrueon the same bar
wherebarstate.islastis alsotrue.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isrealtime`,"barstate.isrealtimeistrueif the current data update is a real-time bar update,falseotherwise (thus it is historical). Note thatbarstate.islastis alsotrueon all realtime bars.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isnew`,"barstate.isnewistrueon all historical bars and on the realtime bar’s first
(opening) update.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isnew`,"All historical bars are considerednewbars because the Pine Script™
runtime executes your script on each bar sequentially, from the chart’s
first bar in time, to the last. Each historical bar is thusdiscoveredby your script as it executes, bar to bar.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isnew`,"barstate.isnewcan be useful to resetvaripvariables when a new realtime bar comes in. The following code will
resetupdateNoto 1 on all historical bars and at the beginning of
each realtime bar. It calculates the number of realtime updates during
each realtime bar:",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isconfirmed`,"barstate.isconfirmedistrueon all historical bars and on the last (closing) update of a
realtime bar.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isconfirmed`,"It can be useful to avoid repainting by requiring the realtime bar to be
closed before a condition can becometrue. We use it here to hold
plotting of our RSI until the realtime bar closes and becomes an elapsed
realtime bar. It will plot on historical bars becausebarstate.isconfirmedis alwaystrueon them:",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.isconfirmed`,barstate.isconfirmedwill not work when used in arequest.security()call.,https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.islastconfirmedhistory`,"barstate.islastconfirmedhistoryistrueif the script is executing on the dataset’s last bar when the
market is closed, or on the bar immediately preceding the realtime bar
if the market is open.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
`barstate.islastconfirmedhistory`,"It can be used to detect the first realtime bar withbarstate.islastconfirmedhistory[1], or to postpone server-intensive
calculations until the last historical bar, which would otherwise be
undetectable on open markets.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,Here is an example of a script usingbarstate.*variables:,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,Note that:,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,"We begin by adding the indicator to the chart of an open market, but
before any realtime update is received. Note how the last confirmed
history bar is identified in #1, and how the last bar is identified as
the last one, but is still considered a historical bar because no
realtime updates have been received.",https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,Let’s look at what happens when realtime updates start coming in:,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,Note that:,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,"This last example shows how the realtime bar’s label will turn yellow
after the first execution on the bar. This is the way the label will
usually appear on realtime bars:",https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,Previous,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Example,Next,https://www.tradingview.com/pine-script-docs/concepts/bar-states
Introduction,"The way scripts can obtain information about the chart and symbol they
are currently running on is through a subset of Pine Script™‘sbuilt-in variables. The ones we cover here allow scripts to access information
relating to:",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Prices andvolume,The built-in variables for OHLCV values are:,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Prices andvolume,Other values are available through:,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Prices andvolume,"On historical bars, the values of the above variables do not vary during
the bar because only OHLCV information is available on them. When
running on historical bars, scripts execute on the bar’sclose,
when all the bar’s information is known and cannot change during the
script’s execution on the bar.",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Prices andvolume,"Realtime bars are another story altogether. When indicators (or
strategies usingcalc_on_every_tick = true) run in realtime, the
values of the above variables (exceptopen)
will vary between successive iterations of the script on the realtime
bar, because they represent theircurrentvalue at one point in time
during the progress of the realtime bar. This may lead to one form ofrepainting. See the
page on Pine Script™‘sexecution modelfor
more details.",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Prices andvolume,"The[]history-referencing operatorcan be used to refer to past values of the built-in
variables, e.g.,close[1]refers to the value ofcloseon the previous bar, relative to the particular bar the script is
executing on.",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Symbolinformation,"Built-in variables in thesyminfonamespace provide scripts with
information on the symbol of the chart the script is running on. This
information changes every time a script user changes the chart’s
symbol. The script then re-executes on all the chart’s bars using the
new values of the built-in variables:",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Symbolinformation,"This script displays these built-in variables and their values for the current symbol in atableon the
chart:",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Symbolinformation,,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Charttimeframe,"A script can obtain information on the type of timeframe used on the
chart using these built-ins, which all return a “simple bool” result:",https://www.tradingview.com/pine-script-docs/concepts/chart-information
Charttimeframe,Additional built-ins return more specific timeframe information:,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Charttimeframe,See the page onTimeframesfor more information.,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Sessioninformation,Session information is available in different forms:,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Sessioninformation,Previous,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Sessioninformation,Next,https://www.tradingview.com/pine-script-docs/concepts/chart-information
Introduction,"Script visuals can play a critical role in the usability of the indicators we write in Pine Script™. Well-designed plots and drawings make indicators easier to use and understand. Good visual designs establish a visual hierarchy that allows the more important information to stand out, and the less important one to not get in the way.",https://www.tradingview.com/pine-script-docs/concepts/colors
Introduction,"Using colors in Pine can be as simple as you want, or as involved as your concept requires. The 4,294,967,296 possible assemblies of color and transparency available in Pine Script™ can be applied to:",https://www.tradingview.com/pine-script-docs/concepts/colors
Introduction,A script can only color the elements it places in its own visual space. The only exception to this rule is that a pane indicator can color chart bars or candles.,https://www.tradingview.com/pine-script-docs/concepts/colors
Introduction,"Pine Script™ has built-in colors such ascolor.green, as well as functions likecolor.rgb()which allow you to dynamically generate any color in the RGBA color space.",https://www.tradingview.com/pine-script-docs/concepts/colors
Transparency,Each color in Pine Script™ is defined by four values:,https://www.tradingview.com/pine-script-docs/concepts/colors
Transparency,"The transparency of a color defines how opaque it is: zero is fully opaque, 100 makes the color — whichever it is — invisible. Modulating transparency can be crucial in more involved color visuals or when using backgrounds, to control which colors dominate the others, and how they mix together when superimposed.",https://www.tradingview.com/pine-script-docs/concepts/colors
Z-index,"When you place elements in a script’s visual space, they have relative depth on thezaxis; some will appear on top of others. Thez-indexis a value that represents the position of elements on thezaxis. Elements with the highest z-index appear on top.",https://www.tradingview.com/pine-script-docs/concepts/colors
Z-index,"Elements drawn in Pine Script™ are divided in groups. Each group has its own position in thezspace, andwithin the same group, elements created last in the script’s logic will appear on top of other elements from the same group. An element of one group cannot be placed outside the region of thezspace attributed to its group, so a plot can never appear on top of a table, for example, because tables have the highest z-index.",https://www.tradingview.com/pine-script-docs/concepts/colors
Z-index,"This list contains the groups of visual elements, ordered by increasing z-index, so background colors are always at the bottom ofzspace, and tables will always appear on top of all other elements:",https://www.tradingview.com/pine-script-docs/concepts/colors
Z-index,"Note that by usingexplicit_plot_zorder = trueinindicator()orstrategy(), you can control the relative z-index ofplot*(),hline()andfill()visuals using their sequential order in the script.",https://www.tradingview.com/pine-script-docs/concepts/colors
Constantcolors,"There are 17 built-in colors in Pine Script™. This table lists their names, hexadecimal equivalent, and RGB values as arguments tocolor.rgb():",https://www.tradingview.com/pine-script-docs/concepts/colors
Constantcolors,"In the following script, all plots use the samecolor.olivecolor with a transparency of 40, but expressed in different ways. All five methods are functionally equivalent:",https://www.tradingview.com/pine-script-docs/concepts/colors
Constantcolors,,https://www.tradingview.com/pine-script-docs/concepts/colors
Constantcolors,"Notice!The last twoplot()calls specify transparency using thetranspparameter. This use should
be avoided as thetranspis deprecated in Pine Script™ v5. Using thetranspparameter to define transparency is not as flexible because it
requires an argument ofinput integertype, which entails it must be
known before the script is executed, and so cannot be calculated
dynamically, as your script executes bar to bar. Additionally, if you
use acolorargument that already includes transparency information,
as is done in the next threeplot()calls, any argument used for thetranspparameter would have no
effect. This is also true for other functions with atranspparameter.",https://www.tradingview.com/pine-script-docs/concepts/colors
Constantcolors,"The colors in the previous script do not vary as the script executes bar to bar. Sometimes, however, colors need to be created as the script executes on each bar because they depend on conditions that are unknown at compile time, or when the script begins execution on bar zero. For those cases, programmers have two options:",https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,"Let’s say you want to color a moving average in different colors, depending on some conditions you define. To do so, you can use a conditional statement that will select a different color for each of your states. Let’s start by coloring a moving average in a bull color when it’s rising, and in a bear color when it’s not:",https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,,https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,Note that:,https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,"You can also use conditional colors to avoid plotting under certain conditions. Here, we plot high and low pivots using a line, but we do not want to plot anything when a new pivot comes in, to avoid the joints that would otherwise appear in pivot transitions. To do so, we test for pivot changes and usenaas the color value when a change is detected, so that no line is plotted on that bar:",https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,,https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,"To undertand how this code works, one must first know thatta.pivothigh()andta.pivotlow(), used as they are here without an argument to thesourceparameter, will return a value when they find ahigh/lowpivot, otherwise they returnna.",https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,"When we test the value returned by the pivot function fornausing thenz()function, we allow the value returned to be assigned to thepHiorpLovariables only when it is notna, otherwise the previous value of the variable is simply reassigned to it, which has no impact on its value. Keep in mind that previous values ofpHiandpLoare preserved bar to bar because we use thevarkeyword when initializing them, which causes the initialization to only occur on the first bar.",https://www.tradingview.com/pine-script-docs/concepts/colors
Conditionalcoloring,"All that’s left to do next is, when we plot our lines, to insert a ternary conditional statement that will yieldnafor the color when the pivot value changes, or the color selected in the script’s inputs when the pivot level does not change.",https://www.tradingview.com/pine-script-docs/concepts/colors
Calculatedcolors,"Using functions likecolor.new(),color.rgb()andcolor.from_gradient(), one can build colors on the fly, as the script executes bar to bar.",https://www.tradingview.com/pine-script-docs/concepts/colors
Calculatedcolors,color.new()is most useful when you need to generate different transparency levels from a base color.,https://www.tradingview.com/pine-script-docs/concepts/colors
Calculatedcolors,"color.rgb()is useful when you need to build colors dynamically from red, green, blue, or tranparency components. Whilecolor.rgb()creates a color, its sister functionscolor.r(),color.g(),color.b()andcolor.t()can be used to extract the red, green, blue or transparency values from a color, which can in turn be used to generate a variant.",https://www.tradingview.com/pine-script-docs/concepts/colors
Calculatedcolors,color.from_gradient()is useful to create linear gradients between two base colors. It determines which intermediary color to use by evaluating a source value against minimum and maximum values.,https://www.tradingview.com/pine-script-docs/concepts/colors
color.new(),"Let’s putcolor.new(color, transp)to use to create different transparencies for volume columns using one of two bull/bear base colors:",https://www.tradingview.com/pine-script-docs/concepts/colors
color.new(),,https://www.tradingview.com/pine-script-docs/concepts/colors
color.new(),Note that:,https://www.tradingview.com/pine-script-docs/concepts/colors
color.rgb(),"In our next example we usecolor.rgb(red, green, blue, transp)to build colors from RGBA values. We use the result in a holiday season gift for our friends, so they can bring their TradingView charts to parties:",https://www.tradingview.com/pine-script-docs/concepts/colors
color.rgb(),,https://www.tradingview.com/pine-script-docs/concepts/colors
color.rgb(),Note that:,https://www.tradingview.com/pine-script-docs/concepts/colors
color.from_gradient(),"Our last examples of color calculations will usecolor.from_gradient(value, bottom_value, top_value, bottom_color, top_color). Let’s first use it in its simplest form, to color a CCI signal in a version of the indicator that otherwise looks like the built-in:",https://www.tradingview.com/pine-script-docs/concepts/colors
color.from_gradient(),,https://www.tradingview.com/pine-script-docs/concepts/colors
color.from_gradient(),Note that:,https://www.tradingview.com/pine-script-docs/concepts/colors
color.from_gradient(),"The argument used forvalueincolor.from_gradient()does not necessarily have to be the value of the line we are calculating. Anything we want can be used, as long as arguments forbottom_valueandtop_valuecan be supplied. Here, we enhance our CCI indicator by coloring the band using the number of bars since the signal has been above/below the centerline:",https://www.tradingview.com/pine-script-docs/concepts/colors
color.from_gradient(),,https://www.tradingview.com/pine-script-docs/concepts/colors
color.from_gradient(),Note that:,https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,"In this example we take our CCI indicator in another direction. We will build dynamically adjusting extremes zone buffers using a Donchian Channel (historical highs/lows) calculated from the CCI. We build the top/bottom bands by making them 1/4 the height of the DC. We will use a dynamically adjusting lookback to calculate the DC. To modulate the lookback, we will calculate a simple measure of volatility by keeping a ratio of a short-period ATR to a long one. When that ratio is higher than 50 of its last 100 values, we consider the volatility high. When the volatility is high/low, we decrease/increase the lookback.",https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,Our aim is to provide users of our indicator with:,https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,This is what our indicator looks like using the light theme:,https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,,https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,And with the dark theme:,https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,,https://www.tradingview.com/pine-script-docs/concepts/colors
Mixingtransparencies,Note that:,https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"Under certain conditions, PineScript can automatically display all of the colors used in script’s plots in the “Settings/Styles” menu. These plots are graphics created by allplot*()functions,barcolor(), andbgcolor(). The user can change the colors using a color picker. This feature allows colors in scripts to be customized without any extra code.",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"For example, this simple script has aplot()that is colored either teal or red, depending on the relationship between the bar’scloseandopen. The script does not specify that these colors should be editable, nor does it create any color-related inputs. Nevertheless, PineScript automatically displays the colors in the “Settings/Styles” menu and allows the user to change them, along with the style of the plot:",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,,https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"TipTo prevent the user from changing the color or the type of the plot via the “Styles” tab, includeeditable = falsein theplot()call.",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,The colors in the above script can be automatically displayed in this way because they are already knownduring compilation. Colors that are known during compilation are of type“const”or“input”only.,https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"However, ifeven asingle calculated coloris of type “simple color” or “series color”,allcolors are calculated in the script’s runtime, and no color pickers are available in the “Style” section.",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"In practice, the creation of“simple”or“series”colors is most often due to usingcolor.new()andcolor.rgb()functions. The qualifier of the color that they return is the strongest qualifier of the values passed to these functions. If each call to these functions passes only“const”or“input”values, the resulting colors are also“const”or“input”, and the scriptdoesdisplay them in the “Styles” menu.",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"WarningThecolor.from_gradient()function always returns a “series color” value, regardless of the parameters passed to it. If it’s used in a script, all that script’s colors are calculated at runtime.",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"For example, let’s try to make the plots in the script above semi-transparent by adding a transparency of50to its colors viacolor.new(). The easiest way to do this is to wrap theplotColorvariable withcolor.new(), like in the example below:",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"Unfortunately, with these changes the “Style” tab does not display a color picker any longer. This is because we use the “series bool” conditionclose > opento decide the color, and then pass the result of this expression to a singlecolor.new()call. The qualified type of the calculated color that it returns is “series color”.",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,,https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,,https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"To avoid this, we can ensure that every calculated color created bycolor.new()is a “const color”. Below, we wrap teal and red separately withcolor.new()– creating two constant calculated colors in the process – and then decide which one to assign toplotColorbased on the condition. And while theplotColorvariable is a “series color”, eachcolor.new()call returns a constant color, so the script displays a color picker n the “Style” tab:",https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,,https://www.tradingview.com/pine-script-docs/concepts/colors
Maintaining automatic colorselectors,"To calculate the colors at runtime, create custom color inputs for all of the colors that are to be editable. This approach requires more effort, but allows significantly more control over what the user can affect. Learn more about creating color inputs on the Inputs page.",https://www.tradingview.com/pine-script-docs/concepts/colors
Designing usable colorsschemes,"If you write scripts intended for other traders, try to avoid colors that will not work well in some environments, whether it be for plots, labels, tables or fills. At a minimum, test your visuals to ensure they perform satisfactorily with both the light and dark TradingView themes; they are the most commonly used. Colors such as black and white, for example, should be avoided.",https://www.tradingview.com/pine-script-docs/concepts/colors
Designing usable colorsschemes,Build the appropriate inputs to provide script users the flexibility to adapt your script’s visuals to their particular environments.,https://www.tradingview.com/pine-script-docs/concepts/colors
Designing usable colorsschemes,"Take care to build a visual hierarchy of the colors you use that matches the relative importance of your script’s visual components. Good designers understand how to achieve the optimal balance of color and weight so the eye is naturally drawn to the most important elements of the design. When you make everything stand out, nothing does. Make room for some elements to stand out by toning down the visuals surrounding it.",https://www.tradingview.com/pine-script-docs/concepts/colors
Designing usable colorsschemes,Providing a selection of color presets in your inputs — rather than a single color that can be changed — can help color-challenged users. OurTechnical Ratingsdemonstrates one way of achieving this.,https://www.tradingview.com/pine-script-docs/concepts/colors
Plot crisplines,"It is best to use zero transparency to plot the important lines in your visuals, to keep them crisp. This way, they will show through fills more precisely. Keep in mind that fills have a higher z-index than plots, so they are placed on top of them. A slight increase of a line’s width can also go a long way in making it stand out.",https://www.tradingview.com/pine-script-docs/concepts/colors
Plot crisplines,"If you want a special plot to stand out, you can also give it more importance by using multiple plots for the same line. These are examples where we modulate the successive width and transparency of plots to achieve this:",https://www.tradingview.com/pine-script-docs/concepts/colors
Plot crisplines,,https://www.tradingview.com/pine-script-docs/concepts/colors
Customizegradients,"When building gradients, adapt them to the visuals they apply to. If you are using a gradient to color candles, for example, it is usually best to limit the number of steps in the gradient to ten or less, as it is more difficult for the eye to perceive intensity variations of discrete objects. As we did in our examples, cap minimum and maximum transparency levels so your visual elements remain visible and do not overwhelm when it’s not necessary.",https://www.tradingview.com/pine-script-docs/concepts/colors
Customizegradients,Previous,https://www.tradingview.com/pine-script-docs/concepts/colors
Customizegradients,Next,https://www.tradingview.com/pine-script-docs/concepts/colors
Introduction,"Some of Pine Script’s visual outputs, includingplots,hlines,lines,boxes, andpolylines,
allow one to fill the chart space they occupy with colors. Three
different mechanisms facilitate filling the space between such outputs:",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"Thefill()function fills the space between two plots or horizontal lines. It has
the following two signatures:",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"Code:
fill(plot1, plot2, color, title, editable, show_last, fillgaps) → voidfill(hline1, hline2, color, title, editable, fillgaps) → void",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"Theplot1,plot2,hline1, andhline2parameters acceptplotorhlineIDs returned byplot()andhline()function calls. Thefill()function is the only built-in that can use these IDs.",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"This simple example demonstrates how thefill()function works withplot and hlineIDs. It callsplot()andhline()three times to display arbitrary values on the chart. Each of these
calls returns an ID, which the script assigns to variables for use in
thefill()function. The values ofp1,p2, andp3are “plot” IDs, whereash1,h2, andh3reference “hline” IDs:",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,,https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"It’s important to note that thefill()function requireseithertwo “plot” IDs or two “hline” IDs. Onecannotmix and match these types in the function call. Consequently,
programmers will sometimes need to useplot()where they otherwise might have usedhline()if they want to fill the space between a consistent level and a
fluctuating series.",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"For example, this script calculates anoscillatorbased on the
percentage distance between the chart’scloseprice and a 10-barSMA,
then plots it on the chart pane. In this case, we wanted to fill the
area between theoscillatorand zero. Although we can display the zero
level withhline()since its value does not change, we cannot pass a “plot” and “hline”
ID to thefill()function. Therefore, we must use aplot()call for the level to allow the script to fill the space:",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,,https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,"Thecolorparameter of thefill()function accepts a “series color” argument, meaning the fill’s color
can change across chart bars. For example, this code fills the space
between two moving average plots with 90% transparent green or red
colors based on whetherma1is abovema2:",https://www.tradingview.com/pine-script-docs/concepts/fills
`plot()` and `hline()`fills,,https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,"While thefill()function allows a script to fill the space between twoplots or hlines, it does not work withlineobjects. When a script needs to fill the space betweenlines, it
requires alinefillobject created by thelinefill.new()function. The function has the following signature:",https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,"Code:
linefill.new(line1, line2, color) → series linefill",https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,Theline1andline2parameters acceptlineIDs. These IDs determine the chart region that thelinefillobject will fill with its specifiedcolor. A script can update thecolorproperty of alinefillID returned by this function by callinglinefill.set_color()with the ID as itsidargument.,https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,"The behavior of linefills depends on the lines they reference. Scripts
cannot move linefills directly, as the lines that a linefill uses
determine the space it will fill. To retrieve the IDs of thelinesreferenced by alinefillobject, use thelinefill.get_line1()andlinefill.get_line2()functions.",https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,Any pair oflineinstances can only haveonelinefillbetween them. Successive calls tolinefill.new()using the sameline1andline2arguments will create a newlinefillID thatreplacesthe previous one associated with them.,https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,"The example below demonstrates a simple use case for linefills. The
script calculates apivotHighandpivotLowseries using the built-inta.pivothigh()andta.pivotlow()functions with constantleftbarsandrightbarsarguments. On the
last confirmed historical bar, the script draws two extended lines. The
first line connects the two most recent non-napivotHighvalues, and
the second connects the most recent non-napivotLowvalues.",https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,"To emphasize the “channel” formed by these lines, the script fills the
space between them usinglinefill.new():",https://www.tradingview.com/pine-script-docs/concepts/fills
Linefills,,https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,"Theboxandpolylinetypes allow scripts to draw geometric shapes and other formations on the
chart. Scripts createboxesandpolylineswith thebox.new()andpolyline.new()functions, which include parameters that allow the drawings to fill
their visual spaces.",https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,"To fill the space inside the borders of aboxwith a specified color, include abgcolorargument in thebox.new()function. To fill a polyline’s visual space, pass afill_colorargument to thepolyline.new()function.",https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,"For example, this script draws an octagon with apolylineand an inscribed rectangle with aboxon
the last confirmed historical bar. It determines the size of the
drawings using the value from theradiusvariable, which corresponds
to approximately one-fourth of the number of bars visible on the chart.
We includedfill_color = color.new(color.blue, 60)in thepolyline.new()call to fill the octagon with a translucent blue color, and we usedbgcolor = color.purplein thebox.new()call to fill the inscribed rectangle with opaque purple:",https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,,https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,"See this manual’sLines and boxespage
to learn more about working with these types.",https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,Previous,https://www.tradingview.com/pine-script-docs/concepts/fills
Box and polylinefills,Next,https://www.tradingview.com/pine-script-docs/concepts/fills
Introduction,"Inputs receive values that users can change from a script’s
“Settings/Inputs” tab. By utilizing inputs, programmers can write
scripts that users can more easily adapt to their preferences.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,"The following script plots a 20-periodsimple moving average
(SMA)usingta.sma(close,
20).
While it is straightforward to write, the code is not veryflexiblebecause the function call uses specificsourceandlengtharguments
that users cannot change without modifying the code:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,"If we write our script this way instead, it becomes much more flexible,
as users can select thesourceand thelengthvalues they want to
use from the “Settings/Inputs” tab without changing the source code:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,"Inputs are only accessible while a script runs on a chart. Users can
access script inputs from the “Settings” dialog box. To open this
dialog, users can:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,"The “Settings” dialog always contains the “Style” and “Visibility”
tabs, which allow users to specify their preferences about the script’s
visuals and the chart timeframes that can display its outputs.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,"When a script contains calls toinput.*()functions, an “Inputs” tab
also appears in the “Settings” dialog box.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Introduction,"Scripts process inputs when users add them to the chart or change the
values in the script’s “Settings/Inputs” tab. Any changes to a
script’s inputs prompt it to re-execute across all available data using
the new specified values.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputfunctions,Pine Script™ features the following input functions:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputfunctions,"Scripts create inputwidgetsin the “Inputs” tab that accept
different types of inputs based on theirinput.*()function calls. By
default, each input appears on a new line of the “Inputs” tab in the
order of theinput.*()calls. Programmers can also organize inputs in
different ways by using theinput.*()functions’groupandinlineparameters. Seethis sectionbelow for more information.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputfunctions,OurStyle guiderecommends placinginput.*()calls at the beginning of the script.,https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputfunctions,"Input functions typically contain several parameters that allow
programmers to define their default values, value limits, their
organization in the “Inputs” tab, and other properties.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputfunctions,"Since aninput.*()call is simply another function call in Pine
Script™, programmers can combine them witharithmetic,comparison,logical, andternaryoperators to assign expressions to variables. This simple script
compares the result from a call toinput.string()to the “On” string and assigns the result to theplotDisplayInputvariable. This variable is of the “input bool” type because the==operator returns a “bool” value:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputfunctions,"All values returned byinput.*()functions except “source” ones are
“input” qualified values. See our User Manual’s section ontype qualifiersfor more information.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Input functionparameters,"The parameters common to all input functions are:defval,title,tooltip,inline,group, anddisplay. Some input functions also
include other parameters:options,minval,maxval,stepandconfirm.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Input functionparameters,"All these parameters expect “const” arguments. The only exceptions are
for thedefvalandoptionsparameters of thesourceandenuminputs, asinput.source()uses “series float” value, andinput.enum()usesmembersof anenum type.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Input functionparameters,"Sinceinput.*()parameters accept “const” arguments in most cases
and the “input” and otherqualifiersare stronger than “const”, it follows that one cannot use the result
from oneinput.*()call as an argument in anotherinput.*()call.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Input functionparameters,Let’s go over each parameter:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Input functionparameters,"Theminval,maxvalandstepparameters are only present in the
signature of theinput.int()andinput.float()functions.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Inputtypes,"The next sections explain what each input function does. As we proceed,
we will explore the different ways you can use input functions and
organize their display.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Genericinput,"input()is a simple, generic function that supports the fundamental Pine Script™
types: “int”, “float”, “bool”, “color” and “string”. It also
supports “source” inputs, which are price-related values such asclose,hl2,hlc3,
andhlcc4,
or which can be used to receive the output value of another script.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Genericinput,Its signature is:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Genericinput,"Code:
input(defval, title, tooltip, inline, group) → input int/float/bool/color/string | series float",https://www.tradingview.com/pine-script-docs/concepts/inputs
Genericinput,"The function automatically detects the type of input by analyzing the
type of thedefvalargument used in the function call. This script
shows all the supported types and the qualified type returned by the
function when used withdefvalarguments of different types:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Genericinput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Integerinput,"Two signatures exist for theinput.int()function; one whenoptionsis not used, the other when it is:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Integerinput,"Code:
input.int(defval, title, minval, maxval, step, tooltip, inline, group, confirm) → input intinput.int(defval, title, options, tooltip, inline, group, confirm) → input int",https://www.tradingview.com/pine-script-docs/concepts/inputs
Integerinput,"This call uses theoptionsparameter to propose a pre-defined list of
lengths for the MA:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Integerinput,This one uses theminvalparameter to limit the length:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Integerinput,"The version with theoptionslist uses a dropdown menu for its widget.
When theoptionsparameter is not used, a simple input widget is used
to enter the value:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Integerinput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Floatinput,"Two signatures exist for theinput.float()function; one whenoptionsis not used, the other when it is:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Floatinput,"Code:
input.float(defval, title, minval, maxval, step, tooltip, inline, group, confirm) → input intinput.float(defval, title, options, tooltip, inline, group, confirm) → input int",https://www.tradingview.com/pine-script-docs/concepts/inputs
Floatinput,"Here, we use a “float” input for the factor used to multiple the
standard deviation, to calculate Bollinger Bands:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Floatinput,"The input widgets for floats are similar to the ones used for integer
inputs:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Floatinput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Booleaninput,"Let’s continue to develop our script further, this time by adding a
boolean input to allow users to toggle the display of the BBs:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Booleaninput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Booleaninput,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Colorinput,"As explained inthissection of theColorspage, selecting the colors of a script’s outputs via the
“Settings/Style” tab is not always possible. In the case where one
cannot choose colors from the “Style” tab, programmers can create
color inputs with theinput.color()function to allow color customization from the “Settings/Inputs” tab.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Colorinput,"Suppose we wanted to plot our BBs with a ligther transparency when thehighandlowvalues are higher/lower than the BBs. We can use a code like this to
create the colors:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Colorinput,"When using dynamic (“series”) color components like thetransparguments in the above code, the color widgets in the “Settings/Style”
tab will no longer appear. Let’s create our own input for color
selection, which will appear in the “Settings/Inputs” tab:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Colorinput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Colorinput,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeframeinput,"Theinput.timeframe()function creates a dropdown input containingtimeframe choices. It returns a “string” value representing the selected timeframe in ourspecification format, which scripts can use inrequest.*()calls to retrieve data from user-selected timeframes.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeframeinput,"The following script usesrequest.security()on each bar to fetch the value of ata.sma()call from a user-specified higher timeframe, then plots the result on the chart:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeframeinput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeframeinput,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Symbolinput,"Theinput.symbol()function creates an input widget that mirrors the chart’s “Symbol Search” widget. It returns a “string”ticker identifierrepresenting the chosen symbol and exchange, which scripts can use inrequest.*()calls to retrieve data from other contexts.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Symbolinput,The script below usesrequest.security()to retrieve the value of ata.rsi()call evaluated on a user-specified symbol’s prices. It plots the requested result on the chart in a separate pane:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Symbolinput,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Sessioninput,"Session inputs are useful to gather start-stop values for periods of
time. Theinput.session()built-in function creates an input widget allowing users to specify the
beginning and end time of a session. Selections can be made using a
dropdown menu, or by entering time values in “hh:mm” format.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Sessioninput,"The value returned byinput.session()is a valid string in session format. See the manual’s page onsessionsfor more
information.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Sessioninput,"Session information can also contain information on the days where the
session is valid. We use aninput.string()function call here to input that day information:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Sessioninput,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Sessioninput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Sourceinput,Source inputs are useful to provide a selection of two types of sources:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Sourceinput,This script simply plots the user’s selection of source. We propose thehighas the default value:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Sourceinput,"This shows a chart where, in addition to our script, we have loaded an
“Arnaud Legoux Moving Average” indicator. See here how we use our
script’s source input widget to select the output of the ALMA script as
an input into our script. Because our script plots that source in a
light-purple thick line, you see the plots from the two scripts overlap
because they plot the same value:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Sourceinput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeinput,"Time inputs use theinput.time()function. The function returns a Unix time in milliseconds (see theTimepage for more
information). This type of data also contains date information, so theinput.time()function returns a timeanda date. That is the reason why its
widget allows for the selection of both.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeinput,"Here, we test the bar’s time against an input value, and we plot an
arrow when it is greater:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Timeinput,Note that thedefvalvalue we use is a call to thetimestamp()function.,https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,"Theinput.enum()function creates a dropdown input that displaysfield titlescorresponding to distinctmembers(possible values) of anenum type. The function returns one of the unique, named values from a
declaredenum, which scripts
can use in calculations and logic requiring more strict control over
allowed values and operations. Supply a list of enum members to theoptionsparameter to specify the members users can select from the
dropdown. If one does not specify an enum field’s title, its title is
the “string” representation of itsname.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,"This example declares aSignalTypeenum with four fields representing
named signal display modes:long,short,both, andnone. The
script uses a member of thisenum typeas thedefvalargument in theinput.enum()call to generate a dropdown in the “Inputs” tab, allowing users to
select one of the enum’s titles to control which signals it displays on
the chart:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,"By default, an enum input displays the titles of all an enum’s members
within its dropdown. If we supply anoptionsargument to theinput.enum()call, it will only allow users to select the members included in that
list, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,"The aboveoptionsargument specifies that users can only view and
select the titles of thelongandshortfields from theSignalTypeenum. No other options are allowed:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Enuminput,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Other features affectingInputs,"Some parameters of theindicator()andstrategy()functions populate a script’s “Settings/Inputs” tab with additional
inputs. These parameters aretimeframe,timeframe_gaps, andcalc_bars_count. For example:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Other features affectingInputs,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,"The design of your script’s inputs has an important impact on the
usability of your scripts. Well-designed inputs are more intuitively
usable and make for a better user experience:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,"It can be advantageous to vertically align different arguments of
multlipleinput.*()calls in your code. When you need to make global
changes, this will allow you to use the Editor’s multi-cursor feature
to operate on all the lines at once.",https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,"Because It is sometimes necessary to use Unicode spaces to In order to
achieve optimal alignment in inputs. This is an example:",https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,,https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,Note that:,https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,Previous,https://www.tradingview.com/pine-script-docs/concepts/inputs
Tips,Next,https://www.tradingview.com/pine-script-docs/concepts/inputs
`hline()`levels,"Levels are lines plotted using thehline()function. It is designed to plothorizontallevels using asingle
color, i.e., it does not change on different bars. See theLevelssection of the
page onplot()for
alternative ways to plot levels whenhline()won’t do what you need.",https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,The function has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,"Code:
hline(price, title, color, linestyle, linewidth, editable) → hline",https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,hline()has a few constraints when compared toplot():,https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,Let’s seehline()in action in the “True Strength Index” indicator:,https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,,https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,,https://www.tradingview.com/pine-script-docs/concepts/levels
`hline()`levels,Note that:,https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,"The space between two levels plotted withhline()can be colored usingfill().
Keep in mind thatbothplots must have been plotted withhline().",https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,Let’s put some background colors in our TSI indicator:,https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,,https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,,https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,Note that:,https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,Previous,https://www.tradingview.com/pine-script-docs/concepts/levels
Fills betweenlevels,Next,https://www.tradingview.com/pine-script-docs/concepts/levels
Introduction,"Pine Script™ libraries are publications containing functions that can be
reused in indicators, strategies, or in other libraries. They are useful
to define frequently-used functions so their source code does not have
to be included in every script where they are needed.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Introduction,"A library must be published (privately or publicly) before it can be
used in another script. All libraries are published open-source. Public
scripts can only use public libraries and they must be open-source.
Private scripts or personal scripts saved in the Pine Script™ Editor can
use public or private libraries. A library can use other libraries, or
even previous versions of itself.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Introduction,"Library programmers should be familiar with Pine’s typing nomenclature, scopes, and user-defined functions. For more information, see the User Manual’s pages on theType systemandUser-defined functions.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Introduction,You can browse public library scripts in theCommunity Scriptsfeed.,https://www.tradingview.com/pine-script-docs/concepts/libraries
Creating alibrary,"A library is a special kind of script that begins with thelibrary()declaration statement, rather thanindicator()orstrategy().
A library contains exportablefunction,method,UDT,
andenumdefinitions, which constitute the only visible part of the
library when imported by another script. Like other script types,
libraries can also include Pine Script™ code in their global scopes.
Programmers typically use a library’s global code to demonstrate how
other scripts can use its exported structures.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Creating alibrary,"A library script has a structure like the following, which must include
one or more exportable functions or types:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Creating alibrary,Note that:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Creating alibrary,This is an example library:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Libraryfunctions,Exported functions and methods have slightly different requirements and constraints compared to non-exported functions.,https://www.tradingview.com/pine-script-docs/concepts/libraries
Libraryfunctions,In exported library function signatures (their first line):,https://www.tradingview.com/pine-script-docs/concepts/libraries
Libraryfunctions,Exported library functions have the following constraints:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Libraryfunctions,"Library functions always return “simple” or “series” results. Consequently, scripts cannot use their returned values in locations requiring “const” or “input” values. For example, a library function cannot calculate an argument for theshow_lastparameter in aplot()call because the parameter requires an “input int” qualified type.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Qualified typecontrol,"The qualified types of arguments supplied in calls to library functions
are autodetected based on how each argument is used inside the function.
If the argument can be used as a “series”, it is qualified as such. If
it cannot, an attempt is made with the “simple” type qualifier. This
explains why this code:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Qualified typecontrol,"will work when called usingmyCustomLibrary.myEma(20), even thoughta.ema()‘slengthparameter requires a “simple int” argument. When the Pine
Script™ compiler detects that a “series” length cannot be used withta.ema(),
it tries the “simple” qualifier, which in this case is allowed.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Qualified typecontrol,"While library functions cannot return “const” or “input” values,
they can be written to produce “simple” results. This makes them
useful in more contexts than functions returning “series” results, as
some built-in functions do not allow “series” arguments. For example,request.security()requires a “simple string” argument for itssymbolparameter when a script does not allowdynamic requests. If we wrote a
library function to assemble the argument tosymbolin the following
way, the function’s result would not work with a non-dynamicrequest.*()call because it is of the “series
string” qualified type:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Qualified typecontrol,"However, by restricting the parameter qualifiers to “simple”, we can
force the function to yield a “simple” result. We can achieve this by
prefixing the parameters’ type with thesimplekeyword:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Qualified typecontrol,"Note that for the function to return a “simple” value, no “series”
values can be used in its calculation; otherwise the result will be a
“series” value.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Qualified typecontrol,"One can also use theserieskeyword to prefix the type of a library function parameter. However,
because arguments are qualified as “series” by default, using theseriesmodifier is redundant.",https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,"Libraries can exportuser-defined types (UDTs), and library functions can returnobjectsof these types.",https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,"To export a UDT, prefix its definition with theexportkeyword, similar to exporting a function:",https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,"A script importing that library and creating anobjectof itspointUDT
would look somewhat like this:",https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,Note that:,https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,"A librarymustexport aUDTif
any exported functions or methods accept or return anobjectof that type, or if
the fields of another exportedUDTaccept an instance of the type.",https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,"When a library only uses aUDTinternally, it does not need to export the type. The following library
uses thepointtype internally, but it only exports thedrawPivots()function, which does not have a parameter of thepointtype or return
apointobject:",https://www.tradingview.com/pine-script-docs/concepts/libraries
User-defined types andobjects,"If the TradingView user published the above library, it could be used
like this:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Enumtypes,"Libraries can also exportenum types, allowing other scripts to import sets of predefined, named
values that help control the values accepted by variables, conditional
expressions, andcollections.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Enumtypes,"For example, this library exports aStateenum with three fields
representing distinct signal states:long,short, andneutral.
These fields represent thepossible valuesa variable, expression, or
collection of theenum typecan take on:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Enumtypes,"A script that imports this library can use the members (values) of theStateenum as named states in its logic. Here, we show a simple,
hypothetical script that imports the “Signal” library published by theuserNameuser and uses theSignal.Stateenum to assign one of three
possible values to amySignalvariable:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Enumtypes,"Similar to exportingUDTs, a librarymustexport an enum when its exported
functions or methods accept or return theenum’smembers, or when the
fields of an exportedUDTaccept values of thatenum type.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Publishing alibrary,"Before you or other Pine Script™ programmers can reuse any library, it
must be published. If you want to share your library with all
TradingViewers, publish it publicly. To use it privately, use a private
publication. As with indicators or strategies, the active chart when you
publish a library will appear in both its widget (the small placeholder
denoting libraries in the TradingView scripts stream) and script page
(the page users see when they click on the widget).",https://www.tradingview.com/pine-script-docs/concepts/libraries
Publishing alibrary,"Private libraries can be used in public Protected or Invite-only
scripts.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Publishing alibrary,"After adding our example library to the chart and setting up a clean
chart showing our library plots the way we want them, we use the Pine
Editor’s “Publish Script” button. The “Publish Library” window
comes up:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Publishing alibrary,,https://www.tradingview.com/pine-script-docs/concepts/libraries
Publishing alibrary,Note that:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Publishing alibrary,"The intended users of public libraries being other Pine programmers; the
better you explain and document your library’s functions, the more
chances others will use them. Providing examples demonstrating how to
use your library’s functions in your publication’s code will also
help.",https://www.tradingview.com/pine-script-docs/concepts/libraries
HouseRules,"Pine libraries are considered “public domain” code in ourHouse Rules
on Script
Publishing,
which entails that permission is not required from their author if you
call their functions or reuse their code in your open-source scripts.
However, if you intend to reuse code from a Pine Script™ library’s
functions in a public protected or invite-only publication, explicit
permission for reuse in that form is required from its author.",https://www.tradingview.com/pine-script-docs/concepts/libraries
HouseRules,"Whether using a library’s functions or reusing its code, you must
credit the author in your publication’s description. It is also good
form to credit in open-source comments.",https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,"Using a library from another script (which can be an indicator, a
strategy or another library), is done through theimportstatement:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,"Code:
import <username>/<libraryName>/<libraryVersion> [as <alias>]",https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,where:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,"To use the library we published in the previous section, our next script
will require animportstatement:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,"As you type the user name of the library’s author, you can use the
Editor’sctrl+space/cmd“Auto-complete”
command to display a popup providing selections that match the available
libraries:",https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,,https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,This is an indicator that reuses our library:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,Note that:,https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,Previous,https://www.tradingview.com/pine-script-docs/concepts/libraries
Using alibrary,Next,https://www.tradingview.com/pine-script-docs/concepts/libraries
Introduction,"Pine Script™ facilitates drawing lines, boxes, and other geometric
formations from code using theline,box,
andpolylinetypes. These types provide utility for programmatically drawing support
and resistance levels, trend lines, price ranges, and other custom
formations on a chart.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Introduction,"Unlikeplots, the
flexibility of these types makes them particularly well-suited for
visualizing current calculated data at virtually any available point on
the chart, irrespective of the chart bar the script executes on.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Introduction,"Lines,boxes, andpolylinesareobjects, likelabels,tables, and otherspecial
types. Scripts reference objects of these types using IDs, which act
likepointers. As with other objects,line,box,
andpolylineIDs are qualified as “series” values, and all functions that manage
these objects accept “series” arguments.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Introduction,"Notice!Using the types we discuss on this page often involvesarrays, especially when
working withpolylines, whichrequireanarrayofchart.pointinstances. We therefore recommend you become familiar witharraysto make the most of
these drawing types in your scripts.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Introduction,"Lines drawn by a script may be vertical, horizontal, or angled. Boxes
are always rectangular. Polylines sequentially connect multiple
vertical, horizontal, angled, or curved line segments. Although all of
these drawing types have different characteristics, they do have some
things in common:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Introduction,"Notice!On TradingView charts, a complete set ofDrawing Toolsallows users to
create and modify drawings using mouse actions. While they may sometimes
resemble drawing objects created with Pine Script™ code, they areunrelatedentities. Pine scripts cannot interact with drawing tools
from the chart user interface, and mouse actions do not directly affect
Pine drawing objects.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Lines,"The built-ins in theline.*namespace control the creation and
management oflineobjects:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Lines,"Scripts can callline.set_*(),line.get_*(),line.copy(),
andline.delete()built-ins as functions ormethods.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,Theline.new()function creates a newlineinstance to display on the chart. It has the following signatures:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Code:
line.new(first_point, second_point, xloc, extend, color, style, width, force_overlay) → series lineline.new(x1, y1, x2, y2, xloc, extend, color, style, width, force_overlay) → series line",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"The first overload of this function contains thefirst_pointandsecond_pointparameters. Thefirst_pointis achart.pointrepresenting the start of the line, and thesecond_pointis achart.pointrepresenting the line’s end. The function copies the information from
thesechart pointsto determine the line’s coordinates. Whether it uses theindexortimefields from thefirst_pointandsecond_pointas
x-coordinates depends on the function’sxlocvalue.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"The second overload specifiesx1,y1,x2, andy2values
independently, wherex1andx2areintvalues representing the starting and ending x-coordinates of the line,
andy1andy2arefloatvalues representing the y-coordinates. Whether the line considers thexvalues as bar indices or timestamps depends on thexlocvalue in
the function call.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,Both overloads share the same additional parameters:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,xloc,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Controls whether the x-coordinates of the new line use bar index or
time values. Its default value isxloc.bar_index.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"When calling the first overload, using anxlocvalue ofxloc.bar_indextells the function to use theindexfields of thefirst_pointandsecond_point, and a value ofxloc.bar_timetells the function to use thetimefields of the points.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"When calling the second overload, anxlocvalue ofxloc.bar_indexprompts the function to treat thex1andx2arguments as bar
index values. When usingxloc.bar_time,
the function will treatx1andx2as time values.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"When the specified x-coordinates representbar indexvalues, it’s
important to note that the minimum x-coordinate allowed isbar_index - 9999. For larger offsets, one can usexloc.bar_time.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,extend,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Determines whether the drawn line will infinitely extend beyond its
defined start and end coordinates. It accepts one of the following
values:extend.left,extend.right,extend.both,
orextend.none(default).",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,color,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,Specifies the color of the line drawing. The default iscolor.blue.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,style,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Specifies the line’s style, which can be any of the options listed
in this page’sLine stylessection. The default value isline.style_solid.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,width,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Controls the width of the line, in pixels. The default value is 1.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,force_overlay,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Iftrue, the drawing will display on the main chart pane, even when the script occupies a separate pane. Optional. The default isfalse.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"The example below demonstrates how one can draw lines in their simplest
form. This script draws a new vertical line connecting theopenandcloseprices at the horizontal center of each chart bar:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,"Let’s look at a more involved example. This script uses the previous
bar’shl2price and the current bar’shighandlowprices to draw a fan with a user-specified number of lines projecting a
range of hypothetical price values for the following chart bar. It callsline.new()within aforloop to
createlinesPerBarlines on each bar:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatinglines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyinglines,"Theline.*namespace contains multiplesetterfunctions that modify
the properties oflineinstances:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyinglines,"All setter functions directly modify theidline passed into the call
and do not return any value. Each setter function accepts “series”
arguments, as a script can change a line’s properties throughout its
execution.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyinglines,"The following example draws lines connecting the opening price of atimeframeto its closing price. The script uses thevarkeyword to declare theperiodLineand the variables that referencechart.pointvalues (openPointandclosePoint) only on thefirstchart bar, and
it assigns new values to these variables over its execution. After
detecting achangeon thetimeframe, it sets thecolorof the existingperiodLineusingline.set_color(),
creates new values for theopenPointandclosePointusingchart.point.now(),
then assigns anew
lineusing those points to theperiodLine.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyinglines,"On other bars where theperiodLinevalue is notna, the
script assigns a newchart.pointto theclosePoint, then usesline.set_second_point()andline.set_color()asmethodsto update the
line’s properties:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyinglines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyinglines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Linestyles,"Users can control the style of their scripts’ line drawings by passing
one of the following variables as thestyleargument in theirline.new()orline.set_style()function calls:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Linestyles,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading linevalues,"Theline.*namespace includesgetterfunctions, which allow a script
to retrieve values from alineobject for further use:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading linevalues,"The script below draws a new line upon the onset of arisingorfallingprice pattern forming overlengthbars. It uses thevarkeyword to declare thedirectionLinevariable on the first chart bar.
The ID assigned to thedirectionLinepersists over subsequent bars
until thenewDirectioncondition occurs, in which case the script
assigns a new line to the variable.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading linevalues,"On every bar, the script calls theline.get_y2(),line.get_y1(),line.get_x2(),
andline.get_x1()getters asmethodsto
retrieve values from the currentdirectionLineand calculate itsslope, which it uses to determine the color of each drawing and plot.
It retrieves extended values of thedirectionLinefrombeyondits
second point usingline.get_price()andplotsthem on the chart:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading linevalues,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading linevalues,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloninglines,"Scripts can clone a lineidand all its properties with theline.copy()function. Any changes to the copied line instance do not affect the
original.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloninglines,"For example, this script creates a horizontal line at the the bar’sopenprice once everylengthbars, which it assigns to amainLinevariable. On all other bars, it creates acopiedLineusingline.copy()and callsline.set_*()functions tomodifyits properties. As we see below, altering thecopiedLinedoes not affect themainLinein any way:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloninglines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloninglines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletinglines,"To delete a lineiddrawn by a script, use theline.delete()function. This function removes the line instance from the script and
its drawing on the chart.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletinglines,"Deleting line instances is often handy when one wants to only keep a
specific number of lines on the chart at any given time or conditionally
remove drawings as a chart progresses.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletinglines,"For example, this script draws a horizontal line with theextend.rightproperty whenever anRSIcrosses itsEMA.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletinglines,"The script stores all line IDs in alinesarray that ituses as a queueto only display the lastnumberOfLineson the chart. When
thesizeof thearrayexceeds the specifiednumberOfLines, the script removes the array’s
oldest line ID usingarray.shift()and deletes it withline.delete():",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletinglines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletinglines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Filling the space betweenlines,"Scripts canfillthe space between twolinedrawings by creating alinefillobject that references them with thelinefill.new()function. Linefills automatically determine their fill boundaries using
the properties from theline1andline2IDs that they reference.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Filling the space betweenlines,"For example, this script calculates a simple linear regression channel.
On the first chart bar, the script declares thebasisLine,upperLine, andlowerLinevariables to reference the channel’slineIDs, then it makes twolinefill.new()calls to createlinefillobjects that fill the upper and lower portions of the channel. The firstlinefillfills the space between thebasisLineand theupperLine, and the
second fills the space between thebasisLineandlowerLine.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Filling the space betweenlines,"The script updates the coordinates of the lines across subsequent bars.
However, notice that the script never needs to update the linefills
declared on the first bar. They automatically update their fill regions
based on the coordinates of their assigned lines:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Filling the space betweenlines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Filling the space betweenlines,"To learn more about thelinefilltype, seethissection of theFillspage.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Boxes,The built-ins in thebox.*namespace create and manageboxobjects:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Boxes,"As withlines,
users can callbox.set_*(),box.get_*(),box.copy(),
andbox.delete()built-ins as functions ormethods.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,Thebox.new()function creates a newboxobject to display on the chart. It has the following signatures:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Code:
box.new(top_left, bottom_right, border_color, border_width, border_style, extend, xloc, bgcolor, text, text_size, text_color, text_halign, text_valign, text_wrap, text_font_family, force_overlay, text_formatting) → series boxbox.new(left, top, right, bottom, border_color, border_width, border_style, extend, xloc, bgcolor, text, text_size, text_color, text_halign, text_valign, text_wrap, text_font_family, force_overlay, text_formatting) → series box",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"This function’s first overload includes thetop_leftandbottom_rightparameters, which acceptchart.pointobjects representing the top-left and bottom-right corners of the box,
respectively. The function copies the information from thesechart pointsto set the coordinates of the box’s corners. Whether it
uses theindexortimefields of thetop_leftandbottom_rightpoints as x-coordinates depends on the function’sxlocvalue.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"The second overload specifiesleft,top,right, andbottomedges
of the box. Theleftandrightparameters acceptintvalues specifying the box’s left and right x-coordinates, which can be
bar index or time values depending on thexlocvalue in the function
call. Thetopandbottomparameters acceptfloatvalues representing the box’s top and bottom y-coordinates.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,The function’s additional parameters are identical in both overloads:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,border_color,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the color of all four of the box’s borders. The default
iscolor.blue.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,border_width,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the width of the borders, in pixels. Its default value is
1.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,border_style,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the style of the borders, which can be any of the options
in theBox stylessection of this page.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,extend,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Determines whether the box’s borders extend infinitely beyond the
left or right x-coordinates. It accepts one of the following values:extend.left,extend.right,extend.both,
orextend.none(default).",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,xloc,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Determines whether the left and right edges of the box use bar index
or time values as x-coordinates. The default isxloc.bar_index.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"In the first overload, anxlocvalue ofxloc.bar_indexmeans that the function will use theindexfields of thetop_leftandbottom_rightchart points, and anxlocvalue ofxloc.bar_timemeans that it will use theirtimefields.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"In the second overload, using anxlocvalue ofxloc.bar_indexmeans the function treats theleftandrightvalues as bar
indices, andxloc.bar_timemeans it will treat them as timestamps.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"When the specified x-coordinates representbar indexvalues, it’s
important to note that the minimum x-coordinate allowed isbar_index - 9999. For larger offsets, one can usexloc.bar_time.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,bgcolor,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the background color of the space inside the box. The
default value iscolor.blue.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"The text to display inside the box. By default, its value is an
empty string.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_size,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the size of the text within the box. It accepts both “int” size values and “string”size.*constants. The “int” size can be any positive integer. Thesize.*constants and their equivalent “int” sizes are:size.auto(0),size.tiny(8),size.small(10),size.normal(14),size.large(20),
andsize.huge(36).
The default value issize.auto.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_color,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,Controls the color of the text. Its default iscolor.black.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_halign,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the horizontal alignment of the text within the box’s
boundaries. It accepts one of the following:text.align_left,text.align_right,
ortext.align_center(default).",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_valign,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Specifies the vertical alignment of the text within the box’s
boundaries. It accepts one of the following:text.align_top,text.align_bottom,
ortext.align_center(default).",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_wrap,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Determines whether the box will wrap the text within it. If its
value istext.wrap_auto,
the box wraps the text to ensure it does not span past its vertical
borders. It also clips the wrapped text when it extends past the
bottom. If the value istext.wrap_none,
the box displays the text on a single line that can extend beyond
its borders. The default istext.wrap_none.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_font_family,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,Defines the font family of the box’s text. Usingfont.family_defaultdisplays the box’s text with the system’s default font. Thefont.family_monospacedisplays the text in a monospace format. The default value isfont.family_default.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,force_overlay,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Iftrue, the drawing will display on the main chart pane, even when the script occupies a separate pane. Optional. The default isfalse.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,text_formatting,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,Specifies the formatting of the box’s text. Usingtext.format_nonedisplays the text with no special formatting. This parameter also accepts the argumentstext.format_boldortext.format_italic. Usingtext.format_bold + text.format_italicapplies both formats together to display text that is both bold and italicized. The default value istext.format_none.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"Let’s write a simple script to display boxes on a chart. The example
below draws a box projecting each bar’shighandlowvalues from the horizontal center of the current bar to the center of
the next available bar.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,"On each bar, the script createstopLeftandbottomRightpoints viachart.point.now()andchart.point_from_index(),
then callsbox.new()to construct a new box and display it on the chart. It also highlights
the background on the unconfirmed chart bar usingbgcolor()to indicate that it redraws that box until the bar’s last update:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingboxes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,"Multiplesetterfunctions exist in thebox.*namespace, allowing
scripts to modify the properties ofboxobjects:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,"As with setter functions in theline.*namespace, all box setters
modify theidbox directly without returning a value, and each setter
function accepts “series” arguments.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,"Note that, unlikelines, thebox.*namespace does not contain a setter function to
modify a box’sxloc. Users mustcreatea new box with the desiredxlocsetting for such cases.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,"This example uses boxes to visualize the ranges of upward and downward
bars with the highestvolumeover a user-definedtimeframe. When the script detects achangein thetimeframe, it assignsnew
boxesto itsupBoxanddownBoxvariables, resets itsupVolumeanddownVolumevalues, and highlights the chart background.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,"When an upward or downward bar’svolumeexceeds theupVolumeordownVolume, the script updates the
volume-tracking variables and callsbox.set_top_left_point()andbox.set_bottom_right_point()to update theupBoxordownBoxcoordinates. The setters use the
information from thechart pointscreated withchart.point.now()andchart.point.from_time()to project that bar’shighandlowvalues from the current time to theclosing
timeof thetimeframe:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Modifyingboxes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Boxstyles,Users can include one of the followingline.style_*variables in theirbox.new()orbox.set_border_style()function calls to set the border styles of boxes drawn by their scripts:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading boxvalues,"Thebox.*namespace featuresgetterfunctions that allow scripts to
retrieve coordinate values from a box instance:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading boxvalues,"The example below draws boxes to visualize hypothetical price ranges
over a period oflengthbars. At the start of each new period, it uses
the average candle range multiplied by thescaleFactorinput to
calculate the corner points of a box centered at thehl2price with aninitialRangeheight. After drawing the first box, it
createsnumberOfBoxes - 1new boxes inside aforloop.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading boxvalues,"Within each loop iteration, the script gets thelastBoxDrawnby
retrieving thelastelement from the read-onlybox.allarray, then callsbox.get_top()andbox.get_bottom()to get its y-coordinates. It uses these values to calculate the
coordinates for a new box that’sscaleFactortimes taller than the
previous:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading boxvalues,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Reading boxvalues,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloningboxes,"To clone a specific boxid, usebox.copy().
This function copies the box and its properties. Any changes to the
copied box do not affect the original.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloningboxes,"For example, this script declares anoriginalBoxvariable on the first
bar and assigns anew
boxto it once everylengthbars. On other bars, it usesbox.copy()to create acopiedBoxand callsbox.set_*()functions tomodifyits properties. As shown on the chart below, these changes
do not modify theoriginalBox:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Cloningboxes,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingboxes,"To delete boxes drawn by a script, usebox.delete().
As with*.delete()functions in other drawing namespaces, this
function is handy for conditionally removing boxes or maintaining a
specific number of boxes on the chart.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingboxes,"This example displays boxes representing periodic cumulative volume
values. The scriptcreatesa new box ID and stores it in aboxesarray once everylengthbars. If thearray’s
sizeexceeds the specifiednumberOfBoxes, the script removes the oldest box
from the array usingarray.shift()and deletes it usingbox.delete().",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingboxes,"On other bars, it accumulatesvolumeover each period bymodifyingthetopof thelastbox in theboxesarray. The script then usesfor loopsto find thehighestTopof all the array’s boxes and set thebgcolorof each box
with agradient
colorbased on itsbox.get_top()value relative to thehighestTop:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingboxes,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingboxes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Polylines,"Pine Script™ polylines areadvanceddrawings that sequentially
connect the coordinates from anarrayofchart.pointinstances using straight orcurvedline segments.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Polylines,"These powerful drawings can connect up to 10,000 points at any available
location on the chart, allowing scripts to draw custom series, polygons,
and other complex geometric formations that are otherwise difficult or
impossible to draw usinglineorboxobjects.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Polylines,"Thepolyline.*namespace features the following built-ins for creating
and managingpolylineobjects:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Polylines,"Unlikelinesorboxes,
polylines do not have functions for modification or reading their
properties. To redraw a polyline on the chart, one candeletethe
existing instance andcreatea new polyline with the desired changes.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,Thepolyline.new()function creates a newpolylineinstance to display on the chart. It has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Code:
polyline.new(points, curved, closed, xloc, line_color, fill_color, line_style, line_width, force_overlay) → series polyline",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"The following eight parameters affect the behavior of a polyline
drawing:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,points,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Accepts anarrayofchart.pointobjects that determine the coordinates of each point in the
polyline. The drawing connects the coordinates from each element in
thearraysequentially, starting from thefirst. Whether the polyline uses
theindexortimefield from eachchart pointfor its x-coordinates depends on thexlocvalue in the
function call.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,curved,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Specifies whether the drawing uses curved line segments to connect
eachchart.pointin thepointsarray. The default value isfalse, meaning it uses
straight line segments.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,closed,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Controls whether the polyline will connect the lastchart.pointin thepointsarray to the first, forming aclosed polyline. The
default value isfalse.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,xloc,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Specifies which field from eachchart.pointin thepointsarray the polyline uses for its x-coordinates. When
its value isxloc.bar_index,
the function uses theindexfields to create the polyline. When
its value isxloc.bar_time,
the function uses thetimefields. The default value isxloc.bar_index.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,line_color,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Specifies the color of all line segments in the polyline drawing.
The default iscolor.blue.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,fill_color,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Controls the color of the closed space filled by the polyline
drawing. Its default value isna.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,line_style,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Specifies the style of the polyline, which can be any of the
available options in theLine stylessection of this page. The default isline.style_solid.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,line_width,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Specifies the width of the polyline, in pixels. The default value is
1.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,force_overlay,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Iftrue, the drawing will display on the main chart pane, even when the script occupies a separate pane. Optional. The default isfalse.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"This script demonstrates a simple example of drawing a polyline on the
chart. Itpushesa newchart.pointwith an alternatingpricevalue into apointsarray and colors the
background withbgcolor()once everylengthbars.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"On thelast confirmed historical
bar,
the script draws a new polyline on the chart, connecting the coordinates
from eachchart pointin thearray,
starting from the first:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Polylines can drawcurvesthat are otherwise impossible to produce
withlinesorboxes. When
enabling thecurvedparameter of thepolyline.new()function, the resulting polyline interpolatesnonlinearvalues between
the coordinates from eachchart.pointin itsarrayofpointsto generate a curvy effect.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"For instance, the “Oscillating polyline” script in our previous
example usesstraightline segments to produce a drawing resembling a
triangle wave, meaning a waveform that zig-zags between its peaks and
valleys. If we set thecurvedparameter in thepolyline.new()call from that example totrue, the resulting drawing would connect
the points usingcurvedsegments, producing a smooth, nonlinear shape
similar to a sine wave:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Notice that in this example, the smooth curves have relatively
consistent behavior, and no portion of the drawing extends past its
defined coordinates, which is not always the case when drawing curved
polylines. The data used to construct a polyline heavily impacts the
smooth, piecewise function it interpolates between its points. In some
cases, the interpolated curvecanreach beyond its actual coordinates.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Let’s add some variation to thechart pointsin our example’spointsarray to demonstrate this
behavior. In the version below, the script multiplies theyValueby arandomvalue in thechart.point.now()calls.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"To visualize the behavior, this script also creates a horizontallineat thepricevalue from eachchart.pointin thepointsarray, and it displays another polyline connecting the
same points with straight line segments. As we see on the chart, both
polylines pass through all coordinates from thepointsarray. However,
the curvy polyline occasionally reachesbeyondthe vertical boundaries
indicated by the horizontallines, whereas
the polyline drawn using straight segments does not:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Since a single polyline can contain numerous straight or curved line
segments, and theclosedparameter allows the drawing to connect the
coordinates from the first and lastchart.pointin itsarrayofpoints, we can use polylines to draw many different types of closed
polygonal shapes.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"Let’s draw some polygons in Pine. The following script periodically
draws randomized polygons centered athl2price values.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,"On each occurrence of thenewPolygoncondition, itclearsthepointsarray, calculates thenumberOfSidesandrotationOffsetof the new polygon drawing based onmath.random()values, then uses afor loopto pushnumberOfSidesnewchart pointsinto thearraythat contain stepped coordinates from an elliptical path withxScaleandyScalesemi-axes. The script draws the polygon by connecting eachchart.pointfrom thepointsarray using aclosed polylinewith straight line
segments:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Creatingpolylines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,"To delete a specific polylineid, usepolyline.delete().
This function removes thepolylineobject from the script and its drawing on the chart.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,"As with other drawing objects, we can usepolyline.delete()to maintain a specific number of polyline drawings or conditionally
remove drawings from a chart.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,"For example, the script below periodically draws approximate arithmetic
spirals and stores their polyline IDs in anarray,
which ituses as a queueto manage the number of drawings it displays.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,"When thenewSpiralcondition occurs, the script creates apointsarray and addschart pointswithin afor loop. On each loop iteration, it calls thespiralPoint()user-defined functionto create a newchart.pointcontaining stepped values from an elliptical path that grows with
respect to theangle. The script then creates a randomly coloredcurved polylineconnecting the coordinates from thepointsandpushesits ID into thepolylinesarray.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,"When the array’ssizeexceeds the specifiednumberOfSpirals, the script removes the oldest
polyline usingarray.shift()and deletes the object usingpolyline.delete():",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Deletingpolylines,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Redrawingpolylines,"It may be desirable in some cases to change a polyline drawing
throughout a script’s execution. While thepolyline.*namespace does
not contain built-in setter functions, we canredrawpolylines
referenced by variables orcollectionsbydeletingthe existing polylines and assigningnew
instanceswith the desired changes.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Redrawingpolylines,The following example usespolyline.delete()andpolyline.new()calls to update the value of a polyline variable.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Redrawingpolylines,"This script draws closed polylines that connect the open, high, low, and
close points of periods containinglengthbars. It creates acurrentDrawingvariable on the first bar and assigns a polyline ID to
it on every chart bar. It uses theopenPoint,highPoint,lowPoint,
andclosePointvariables to referencechart pointsthat track the period’s developing OHLC values. As new
values emerge, the script assigns newchart.pointobjects to the variables, collects them in anarrayusingarray.from,
then creates anew
polylineconnecting the coordinates from the array’s points and assigns it to
thecurrentDrawing.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Redrawingpolylines,"When thenewPeriodcondition isfalse(i.e., the current period is
not complete), the scriptdeletesthe polyline referenced by thecurrentDrawingbeforecreating a new one, resulting in a dynamic drawing that changes over the
developing period:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Redrawingpolylines,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Realtimebehavior,"Lines,boxes, andpolylinesare subject to bothcommitandrollbackactions, which affect the
behavior of a script when it executes on a realtime bar. See the page on
Pine Script™‘sExecution model.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Realtimebehavior,"This script demonstrates the effect of rollback when it executes on the
realtime,unconfirmedchart bar:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Realtimebehavior,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Realtimebehavior,"Theline.new()call in this example creates a newlineID on each iteration when values change on the unconfirmed bar. The
script automatically deletes the objects created on each change in that
bar because of therollbackbefore each iteration. It onlycommitsthe last line created before the bar closes, and thatlineinstance is the one that persists on the confirmed bar.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Total number ofobjects,"Lines,boxes, andpolylinesconsume server resources, which is why there are limits on the total
number of drawings per script. When a script creates more drawing
objects than the allowed limit, the Pine Script™ runtime automatically
deletes the oldest ones in a process referred to asgarbage
collection.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Total number ofobjects,"A single script can contain up to 500 lines, 500 boxes, and 100
polylines. Users can control the garbage collection limits by specifying
themax_lines_count,max_boxes_count, andmax_polylines_countvalues in their script’sindicator()orstrategy()declaration statement.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Total number ofobjects,"This script demonstrates how garbage collection works in Pine. It
creates a new line, box, and polyline on each chart bar. We haven’t
specified values for themax_lines_count,max_boxes_count, ormax_polylines_countparameters in theindicator()function call, so the script will maintain the most recent ~50 lines,
boxes, and polylines on the chart, as this is the default setting for
each parameter:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Total number ofobjects,,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Total number ofobjects,Note that:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Future references with`xloc.bar_index`,Objects positioned usingxloc.bar_indexcan contain x-coordinates no further than 500 bars into the future.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Othercontexts,"Scripts cannot uselines,boxes, orpolylinesinrequest.*()functions. Instances of these types can use the values
fromrequest.*()calls, but scripts can only create and draw them in
the chart’s context.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Othercontexts,This limitation is also why drawing objects will not work when using thetimeframeparameter in theindicator()declaration statement.,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,"Usingbarstate.isrealtimein combination with drawings may sometimes produce unexpected results.
For example, the intention of this script is to ignore all historical
bars and draw horizontal lines spanning 300 bars back onrealtimebars:",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,"However, it will fail at runtime and raise an error. The script fails
because it cannot determine the buffer size for historical values of the
underlyingtimeseries. Although the code doesn’t contain the built-intimevariable, the built-inbar_indexuses thetimeseries in its inner workings. Therefore, accessing the value of thebar_indexfrom 300 bars back requires the history buffer of thetimeseries to be at least 300 bars.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,"Pine Script™ includes a mechanism that detects the required historical
buffer size automatically in most cases. It works by letting the script
access historical values any number of bars back for a limited duration.
In this script’s case, usingbarstate.isrealtimeto control the drawing of lines prevents it from accessing the
historical series, so it cannot infer the required historical buffer
size, and the script fails.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,The simple solution to this issue is to use themax_bars_back()function toexplicitly definethe historical buffer of thetimeseries before evaluating theconditional structure:,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,"Such issues can be confusing, but they’re quite rare. The Pine Script™
team hopes to eliminate them over time.",https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,Previous,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Historical buffer and`max_bars_back`,Next,https://www.tradingview.com/pine-script-docs/concepts/lines-and-boxes
Introduction,"These functions allow scripts to fetch information from non-standard
bars or chart types, regardless of the type of chart the script is
running on. They are:ticker.heikinashi(),ticker.renko(),ticker.linebreak(),ticker.kagi()andticker.pointfigure().
All of them work in the same manner; they create a special ticker
identifier to be used as the first argument in arequest.security()function call.",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,"Heikin-Ashimeansaverage barin Japanese. The open/high/low/close
values of Heikin-Ashi candlesticks are synthetic; they are not actual
market prices. They are calculated by averaging combinations of real
OHLC values from the current and previous bar. The calculations used
make Heikin-Ashi bars less noisy than normal candlesticks. They can be
useful to make visual assessments, but are unsuited to backtesting or
automated trading, as orders execute on market prices — not
Heikin-Ashi prices.",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,"Theticker.heikinashi()function creates a special ticker identifier for requesting Heikin-Ashi
data with therequest.security()function.",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,"This script requests the close value of Heikin-Ashi bars and plots them
on top of the normal candlesticks:",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,"If you wanted to omit values for extended hours in the last example, an
intermediary ticker without extended session information would need to
be created first:",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,This script plots Heikin-Ashi candles under the chart:,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.heikinashi()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.renko()`,"Renkobars only plot price movements, without taking time or volume
into consideration. They look like bricks stacked in adjacent
columns1. A new brick is only drawn after the price passes the top or
bottom by a predetermined amount. Theticker.renko()function creates a ticker id which can be used withrequest.security()to fetch Renko values, but there is no Pine Script™ function to draw
Renko bars on the chart:",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.linebreak()`,"TheLine Breakchart type displays a series of vertical boxes that are
based on price changes1. Theticker.linebreak()function creates a ticker id which can be used withrequest.security()to fetch “Line Break” values, but there is no Pine Script™ function to
draw such bars on the chart:",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.kagi()`,"Kagicharts are made of a continuous line that changes directions. The
direction changes when the price changes1beyond a predetermined
amount. Theticker.kagi()function creates a ticker id which can be used withrequest.security()to fetch “Kagi” values, but there is no Pine Script™ function to draw
such bars on the chart:",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
`ticker.pointfigure()`,"Point and Figure(PnF) charts only plot price movements1, without
taking time into consideration. A column of X’s is plotted as the price
rises, and O’s are plotted when price drops. Theticker.pointfigure()function creates a ticker id which can be used withrequest.security()to fetch “PnF” values, but there is no Pine Script™ function to draw
such bars on the chart. Every column of X’s or O’s is represented with
four numbers. You may think of them as synthetic OHLC PnF values:",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
Footnotes,"On TradingView, Renko, Line Break, Kagi and PnF chart types are
generated from OHLC values from a lower timeframe. These chart types
thus represent only an approximation of what they would be like if
they were generated from tick data.↩↩2↩3↩4",https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
Footnotes,Previous,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
Footnotes,Next,https://www.tradingview.com/pine-script-docs/concepts/non-standard-charts-data
Introduction,"Pine Script™ allows users to request data from sources and contexts
other than those their charts use. The functions we present on this page
can fetch data from a variety of alternative sources:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Introduction,"Notice!Throughout this page, and in other parts of our documentation that discussrequest.*()functions, we often use the term“context”to describe the symbol, timeframe, and any modifications (price adjustments, session settings, non-standard chart types, etc.) that apply to a chart or the data retrieved by a script.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Introduction,These are the signatures of the functions in therequest.*namespace:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Introduction,"Code:
request.security(symbol, timeframe, expression, gaps, lookahead, ignore_invalid_symbol, currency, calc_bars_count) → series <type>request.security_lower_tf(symbol, timeframe, expression, ignore_invalid_symbol, currency, ignore_invalid_timeframe, calc_bars_count) → array<type>request.currency_rate(from, to, ignore_invalid_currency) → series floatrequest.dividends(ticker, field, gaps, lookahead, ignore_invalid_symbol, currency) → series floatrequest.splits(ticker, field, gaps, lookahead, ignore_invalid_symbol) → series floatrequest.earnings(ticker, field, gaps, lookahead, ignore_invalid_symbol, currency) → series floatrequest.quandl(ticker, gaps, index, ignore_invalid_symbol) → series floatrequest.financial(symbol, financial_id, period, gaps, ignore_invalid_symbol, currency) → series floatrequest.economic(country_code, field, gaps, ignore_invalid_symbol) → series floatrequest.seed(source, symbol, expression, ignore_invalid_symbol, calc_bars_count) → series <type>",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Introduction,"Therequest.*()family of functions has numerous potential applications. Throughout this page, we discuss in detail these functions and some of their typical use cases.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Introduction,Notice!Users can also allow compatible scripts to evaluate their scopes in other contexts without requiringrequest.*()functions by using thetimeframeparameter of theindicator()declaration statement.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Commoncharacteristics,"Many functions in therequest.*()namespace share some common properties and parameters. Before we explore each function in depth, let’s familiarize ourselves with these characteristics.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,"Allrequest.*()functions have similar internal behavior, even though they do not all share the same required parameters. Every uniquerequest.*()call in a script requests a dataset from a definedcontext(i.e., ticker ID and timeframe) and evaluates anexpressionacross the retrieved data.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,"Therequest.security()andrequest.security_lower_tf()functions allow programmers to specify the context of a request and the expression directly via thesymbol,timeframe, andexpressionparameters, making them suitable for a wide range of data requests.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,"For example, therequest.security()call in this simple script requests daily “AMEX:SPY” data, and it calculates the slope of a 20-bar linear regression line using the retrievedhl2prices. The first two arguments specify the context of the request, and the third specifies the expression to evaluate across the requested data:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,"Other functions within therequest.*()namespacedo notallow programmers to directly define the full context of a request or the evaluated expression. Instead, these functions determine some of the necessary informationinternallybecause they perform only specific types of requests.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,"For instance,request.financial()exclusively retrieves periodic financial data. Its required parameters (symbol,financial_id, andperiod) all define parts of a specific financialticker ID. The function does not allow specification of the timeframe or expression, as it determines these details internally. The script below demonstrates a simple call to this function that retrieves the annual cost of goods data for the chart symbol’s issuing company:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Behavior,"Scripts can perform up to 40 unique requests using any combination ofrequest.*()function calls. Only uniquerequest.*()calls count toward this limit because they are the only calls that fetchnew data. Redundant calls to the samerequest.*()function with identical argumentsdo notretrieve new data. Instead, theyreusethe data from the first executed call. Seethis sectionof theLimitationspage for more information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,"When using arequest.*()function to retrieve data from another context, the data may not come in on each new bar as it would with the current chart. Thegapsparameter of arequest.*()function controls how the function responds to nonexistent values in the requested series.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,"Notice!When using thetimeframeparameter of theindicator()function to evaluate the entire script in a different timeframe, thetimeframe_gapsparameter specifies how the script handles nonexistent values. This parameter is similar to thegapsparameter forrequest.*()functions.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,"Suppose we have a script executing on an 1-minute chart that requests hourly data for the chart’s symbol usingrequest.security(). The function call returns new values only on the 1-minute bars that cover the opening and closing times of the symbol’s hourly bars. On other chart bars, we can decide whether the function returnsnavalues or the last available values via thegapsparameter.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,"When thegapsparameter usesbarmerge.gaps_on, the function returnsnaresults on all chart bars where new data is not yet confirmed from the requested context. Otherwise, when the parameter usesbarmerge.gaps_off, the function fills the gaps in the requested data with the last confirmed values on historical bars and the most recent developing values on realtime bars.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,The script below demonstrates the difference in behavior byplottingthe results from tworequest.security()calls that fetch thecloseprice of the current symbol from the hourly timeframe on a 1-minute chart. The first call usesgaps = barmerge.gaps_offand the second usesgaps = barmerge.gaps_on:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`gaps`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`ignore_invalid_symbol`,"Theignore_invalid_symbolparameter ofrequest.*()functions determines how a function handles invalid data requests, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`ignore_invalid_symbol`,"Arequest.*()function call produces aruntime errorand halts the execution of the script when making an erroneous request if itsignore_invalid_symbolparameter isfalse. When this parameter’s value istrue, the function returnsnavalues in such a case instead of raising an error.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`ignore_invalid_symbol`,This example usesrequest.*()calls within auser-defined functionto retrieve data for estimating an instrument’s market capitalization (market cap). The user-definedcalcMarketCap()function callsrequest.financial()to retrieve the total shares outstanding for a symbol andrequest.security()to retrieve a tuple containing the symbol’scloseprice andcurrency. We’ve includedignore_invalid_symbol = truein both of theserequest.*()calls to prevent runtime errors for invalid requests.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`ignore_invalid_symbol`,The script displays aformatted stringrepresenting the symbol’s estimated market cap value and currency in atableon the chart and uses aplotto visualize themarketCaphistory:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`ignore_invalid_symbol`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`ignore_invalid_symbol`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`currency`,"Thecurrencyparameter of arequest.*()function allows users to specify the currency of the requested data. When this parameter’s value differs from thesyminfo.currencyof the symbol, the function converts the requested values to express them in the specifiedcurrency. This parameter accepts a built-in variable from thecurrency.*namespace, such ascurrency.JPY, or a “string” representing a valid currency code (e.g., “JPY”). By default, this parameter accepts a “series” argument that can change across executions. Ifdynamic requestsare disabled, it accepts a value with only a “simple” or weakerqualifier.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`currency`,"The conversion rate between thesyminfo.currencyof the requested data and the specifiedcurrencydepends on theprevious daily valueof the corresponding currency pair from the most popular exchange. If no exchange provides the rate directly, the function derives the rate using aspread symbol.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`currency`,"Notice!Not allrequest.*()function calls return values expressed as a currency amount. Therefore, currency conversion isnotalways necessary. For example, some series therequest.financial()function returns use units other than currency, such as the “PIOTROSKI_F_SCORE” and “NUMBER_OF_EMPLOYEES” metrics. It is up to programmers to determine when currency conversion is appropriate in their data requests.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"Thelookaheadparameter inrequest.security(),request.dividends(),request.splits(), andrequest.earnings()specifies the lookahead behavior of the function call. Its default value isbarmerge.lookahead_off.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"When requesting data from a higher-timeframe (HTF) context, thelookaheadvalue determines whether therequest.*()function can return values from timesbeyondthose of the historical bars it executes on. In other words, thelookaheadparemeter determines whether the requested data may containlookahead biason historical bars.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"When requesting data from a lower-timeframe (LTF) context, thelookaheadparameter determines whether the function requests values from the first or lastintrabar(LTF bar) of each chart-timeframe bar.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"Programmers should exercise extreme caution when using lookahead in their requests, namely when requesting data from higher timeframes.When usingbarmerge.lookahead_onas thelookaheadvalue, ensure that it does not compromise the integrity of the script’s logic by leakingfuture datainto historical chart bars.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,The following scenarios are cases where enabling lookahead is acceptable in arequest.*()call:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"Notice!Usingrequest.security()to leak future data into the past ismisleadingandnot allowedin script publications. While your script’s results on historical bars may look great due to its seemingly “magical” acquisition of prescience (which it will not be able to reproduce on realtime bars), you will mislead yourself and the users of your script. If youpublish your scriptto share it with others, ensure youdo not mislead usersby accessing future information from a dataset on historical bars.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,This example demonstrates how thelookaheadparameter affects the behavior of higher-timeframe data requests and why enabling lookahead inrequest.security()without offsetting theexpressionis misleading. The script callsrequest.security()to get the HTFhighprice for the current chart’s symbol in three different ways andplotsthe resulting series on the chart for comparison.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"The first call usesbarmerge.lookahead_off(default), and the others usebarmerge.lookahead_on. However, the thirdrequest.security()call alsooffsetsitsexpressionusing the history-referencing operator[]to avoid leaking future data into the past.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"As we see on the chart, theplotof the series requested usingbarmerge.lookahead_onwithout an offset (fuchsialine) shows final HTFhighpricesbeforethey are actually available on historical bars, whereas the other two calls do not:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`lookahead`,"Notice!In Pine Script™ v1 and v2, thesecurity()function did not include alookaheadparameter, but it behaved as it does in later versions of Pine withlookahead = barmerge.lookahead_on, meaning that it systematically used data from the future HTF context on historical bars. Therefore, users shouldexercise cautionwith Pine v1 or v2 scripts that use HTFsecurity()calls unless the function calls contain historical offsets.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"By default, unlike all previous Pine Script™ versions, all v6 script’srequest.*()functions aredynamic.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"In contrast to non-dynamic requests, dynamic requests can:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Aside from the features described above, there are insignificant differences in the behavior of regular and dynamic security. Still, for backwards compatibility, this behavior can be turned off by specifyingdynamic_requests = falsein theindicator(),strategy(), orlibrary()declaration statement.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Scripts without dynamic requests enabled cannot use “series” arguments for mostrequest.*()function parameters, which means the argument valuescannot change. The only exception is theexpressionparameter inrequest.security(),request.security_lower_tf(), andrequest.seed(), whichalwaysallows “series” values.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"In contrast, when a script allows dynamic requests, allrequest.*()function parameters that define parts of the ticker ID or timeframe of a request accept “series” arguments thatcan changewith each script execution. In other words, with dynamic requests, it’s possible for a singlerequest.*()instance to fetch data fromdifferent contextsin different executions. Some other optional parameters, such asignore_invalid_symbol, can also accept “series” arguments, allowing additional flexibility inrequest.*()call behaviors.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"The following script declares asymbolSeriesvariable that is assigned four different symbol strings in 20-bar cycles, with its value changing after every five bars. Therequest.security()call uses this variable as thesymbolargument. The script plots therequestedClosevalues, which therefore represent a different symbol’scloseprices for each five-bar period.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"An important limitation is that when using dynamicrequest.*()calls with “series” arguments or withinlocal scopes, scripts must request all required datasets while executing onhistorical bars. Allrequest.*()calls onrealtimebars can retrieve data from the datasets that the script previously accessed on historical bars, but theycannotrequest a new context or evaluate a new expression.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"To illustrate this limitation, let’s revisit the above script. Notice that it requestsclosedata for all four symbols on the chart’s timeframe during its historical executions. The external datasets for those four contexts are theonlyones that anyrequest.*()call on realtime bars can access.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Below, we changed thetimeframeargument in the script’srequest.security()call to specify that it requestssymbolSeriesdata from the chart’s timeframe on historical bars and the “240” (240 minutes = 4H) timeframe on realtime bars. This version raises a runtime error on the first realtime tick, if it is run on any timeframe other than the 4H timeframe, because itcannotaccess the 4H data feeds without requesting them on historical bars first:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"When scripts do not allow dynamic requests, allrequest.*()calls execute once oneverybar or realtime tick, which prevents their use within most local scopes. The only exception is forrequest.*()calls in the scopes ofnon-exportedfunctionsandmethods, because the Pine Script™ compiler extracts such calls into theglobal scopeduring translation.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Scripts that allow dynamic requestsdo notrestrict the execution ofrequest.*()calls to the global scope. They can callrequest.*()functions directly within the scopes ofconditional structuresandloops, meaning that eachrequest.*()instance in the code can activate zero, one, or several times on each script execution.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"The following example uses a singlerequest.security()instance within a loop to request data from multiple forex data feeds. The script declares anarrayofsymbolson the first chart bar, which it iterates through on all bars using afor…inloop. Each loop iteration callsrequest.security()to retrieve thevolumevalue for one of the symbols andpushesthe result into therequestedDataarray. After the loop terminates, the script calculates theaverage,maximum, andminimumvalues from therequestedDataarray and plots those values on the chart:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Notice that theexpressionargument in the above example (volume) isloop-invariant, i.e., it does not change on any loop iteration. When usingrequest.*()calls within a loop, all parameters defining parts of the requestedcontextcan accept arguments that depend on variables from the loop’s header or mutable variables that change within the loop’s local scope. However, arequest.*()call’s evaluated expressioncannotdepend on the values of those variables.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Here, we modified the above script to use thesecond formof thefor…inloop statement, which creates atuplecontaining the index and value of each element in thesymbolsarray. Therequest.security()instance in this version uses the index (i) in itsexpressionargument, resulting in acompilation error:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Librarieswith dynamic requests enabled canexportfunctionsandmethodsthat utilizerequest.*()calls within their local scopes, provided that the evaluated expressionsdo notdepend on any exported function parameters.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"For example, this simple library exports anhtfPrices()function that requests atupleof confirmedopen,high,low, andcloseprices using a specifiedtickerIDandtimeframe. If we publish this library, another script canimportthe function to request higher-timeframe prices without explicitly callingrequest.security().",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"Scripts can use dynamic requests to executenested requests, i.e.,request.*()calls that dynamically evaluate otherrequest.*()calls that theirexpressionarguments depend on.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"When arequest.security()orrequest.security_lower_tf()call uses an empty string orsyminfo.tickeridfor itssymbolargument, or if it uses an empty string ortimeframe.periodfor thetimeframeargument, the requested ticker ID or timeframedependson the context where the call executes. This context is normally the ticker ID or timeframe of the chart that the script is running on. However, if such arequest.security()orrequest.security_lower_tf()function call is evaluated by anotherrequest.*()call, the nested requestinheritsthatrequest.*()call’s ticker ID or timeframe information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"For example, the script below contains tworequest.security()calls and usesPine Logsto display their results. The first call uses empty strings as itssymbolandtimeframearguments, meaning that the requested context depends on where the call executes. It evaluates a concatenated string containing the call’s requested ticker ID and timeframe, and the script assigns its result to theinfo1variable.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"The second call requests data for a specificsymbolandtimeframeusing theinfo1variable as itsexpressionargument. Since theinfo1variable depends on the firstrequest.security()call, the second call evaluates the first callwithinits own context. Therefore, the first call adopts the second call’s ticker ID and timeframe while executing within that context, resulting in a different returned value:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,"This script allows the execution of the firstrequest.security()call within the context of the second call because Pine v6 scripts enable dynamicrequest.*()calls by default. We can disable this behavior by includingdynamic_requests = falsein theindicator()declaration statement. Without dynamic requests enabled, the script evaluates each callindependently, passing the first call’s calculated value directly into the second call rather than executing the first call within the second context. Consequently, the second call’s returned value is thesameas the first call’s value, as we see below:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Dynamicrequests,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"TradingView’s data providers supply different data feeds that scripts
can access to retrieve information about an instrument, including:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"Not all of these data feed types exist for every instrument. For
example, the symbol “BNC:BLX” only has EOD data available.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"For some instruments with intraday and EOD historical feeds, volume data
may not be the same since some trades (block trades, OTC trades, etc.)
may only be available at theendof the trading day. Consequently, the
EOD feed will include this volume data, but the intraday feed will not.
Differences between EOD and intraday volume feeds are almost nonexistent
for instruments such as cryptocurrencies, but they are commonplace in
stocks.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"Slight price discrepancies may also occur between EOD and intraday
feeds. For example, the high value on one EOD bar may not match any
intraday high values supplied by the data provider for that day.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"Another distinction between EOD and intraday data feeds is that EOD
feeds do not contain information fromextended hours.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"When retrieving information on realtime bars withrequest.*()functions, it’s important to note that historical and realtime data
reported for an instrument often rely ondifferentdata feeds. A
broker/exchange may retroactively modify values reported on realtime
bars, which the data will only reflect after refreshing the chart or
restarting the script.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"Another important consideration is that the chart’s data feeds and
feeds requested from providers by the script are managed byindependent, concurrent processes. Consequently, in somerarecases,
it’s possible for races to occur where requested results temporarily
fall out of synch with the chart on a realtime bar, which a script
retroactively adjusts after restarting its executions.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"These points may account for variations in the values retrieved byrequest.*()functions when requesting data from other contexts. They
may also result in discrepancies between data received on realtime bars
and historical bars. There are no steadfast rules about the variations
one may encounter in their requested data feeds.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"Notice!As a rule, TradingViewdoes notgenerate data; it relies on its data
providers for the information displayed on charts and accessed by
scripts.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Datafeeds,"When using data feeds requested from other contexts, it’s also crucial
to consider thetime axisdifferences between the chart the script
executes on and the requested feeds sincerequest.*()functions adapt
the returned series to the chart’s time axis. For example, requesting
“BTCUSD” data on the “SPY” chart withrequest.security()will only show new values when the “SPY” chart has new data as well.
Since “SPY” is not a 24-hour symbol, the “BTCUSD” data returned will
contain gaps that are otherwise not present when viewing its chart
directly.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,"Therequest.security()function allows scripts to request data from other contexts than the
chart the script executes on, such as:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,This is the function’s signature:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,"Code:
request.security(symbol, timeframe, expression, gaps, lookahead, ignore_invalid_symbol, currency, calc_bars_count) → series <type>",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,"Thesymbolvalue is the ticker identifier representing the symbol to
fetch data from. This parameter accepts values in any of the following
formats:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,"Thetimeframevalue specifies the timeframe of the requested data.
This parameter accepts “string” values in ourtimeframe specificationformat (e.g., a value of “1D” represents the daily
timeframe). To request data from the same timeframe as the chart the
script executes on, use thetimeframe.periodvariable or an empty string.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,"Theexpressionparameter of therequest.security()function determines the data it retrieves from the specified context.
This versatile parameter accepts “series” values ofint,float,bool,color,string,
andchart.pointtypes. It can also accepttuples,collections,user-defined types, and the outputs of function andmethodcalls. For more
details on the data one can retrieve, see theRequestable datasection below.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security()`,"Notice!When using the value from aninput.source()call in theexpressionargument and the input references a series from
another indicator,request.*()functions calculate that value’s
results using thechart’s symbol, regardless of thesymbolargument supplied, since they cannot evaluate the scopes required by an
external series. We therefore do not recommend attempting to request
external source input data from other contexts.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Therequest.security()function can request data from any available timeframe, regardless of
the chart the script executes on. The timeframe of the data retrieved
depends on thetimeframeargument in the function call, which may
represent a higher timeframe (e.g., using “1D” as thetimeframevalue while running the script on an intraday chart) or the chart’s
timeframe (i.e., usingtimeframe.periodor an empty string as thetimeframeargument).",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Scripts can also requestlimiteddata from lower timeframes withrequest.security()(e.g., using “1” as thetimeframeargument while running the script
on a 60-minute chart). However, we don’t typically recommend using this
function for LTF data requests. Therequest.security_lower_tf()function is more optimal for such cases.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Most use cases ofrequest.security()involve requesting data from a timeframe higher than or the same as the
chart timeframe. For example, this script retrieves thehl2price from a requestedhigherTimeframe. Itplotsthe resulting series
on the chart alongside the current chart’shl2for
comparison:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Notice that in the above example, it is possible to select ahigherTimeframevalue that actually represents alower timeframethan the one the chart uses, as the code does not prevent it. When
designing a script to work specifically with higher timeframes, we
recommend including conditions to prevent it from accessing lower
timeframes, especially if you intend topublishit.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Below, we’ve added anifstructure to our previous example that raises aruntime
errorwhen thehigherTimeframeinput represents a timeframe smaller than the
chart timeframe, effectively preventing the script from requesting LTF
data:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Although therequest.security()function is intended to operate on timeframes greater than or equal to
the chart timeframe, itcanrequest data from lower timeframes as
well, with limitations. When calling this function to access a lower
timeframe, it will evaluate theexpressionfrom the LTF context.
However, it can only return the results from asingleintrabar (LTF
bar) on each chart bar.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"The intrabar that the function returns data from on each historical
chart bar depends on thelookaheadvalue in the function call. When
usingbarmerge.lookahead_on,
it will return thefirstavailable intrabar from the chart period.
When usingbarmerge.lookahead_off,
it will return thelastintrabar from the chart period. On realtime
bars, it returns the last available value of theexpressionfrom the
timeframe, regardless of thelookaheadvalue, as the realtime intrabar
information retrieved by the function is not yet sorted.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"This script retrievesclosedata from the valid timeframe closest to a fourth of the size of the
chart timeframe. It makes two calls torequest.security()with differentlookaheadvalues. The first call usesbarmerge.lookahead_onto access the first intrabar value in each chart bar. The second uses
the defaultlookaheadvalue
(barmerge.lookahead_off),
which requests the last intrabar value assigned to each chart bar. The
scriptplotsthe outputs of
both calls on the chart to compare the difference:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Timeframes,"Notice!While scripts can userequest.security()to retrieve the values from asingleintrabar on each chart bar, which
might provide utility in some unique cases, we recommend using therequest.security_lower_tf()function for intrabar analysis when possible, as it returns anarraycontaining data fromallavailable intrabars within a chart bar. Seethis sectionto learn more.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Therequest.security()function is quite versatile, as it can retrieve values of any
fundamental type (int,float,bool,color, orstring). It can also request the IDs of data structures and
built-in oruser-defined typesthat reference fundamental types. The data this function
requests depends on itsexpressionparameter, which accepts any of the
following arguments:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Notice!Therequest.security()function duplicates the scopes and operations required by theexpressionto calculate its requested values in another context, which
elevates runtime memory consumption. Additionally, the extra scopes
produced by each call torequest.security()count toward the script’scompilation limits. See theScope countsection of theLimitationspage for
more information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"A frequent use case ofrequest.security()is requesting the output of a built-in variable or
function/methodcall from
another symbol or timeframe.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"For example, suppose we want to calculate the 20-barSMAof a symbol’sohlc4price from the daily timeframe while on an intraday chart. We can
accomplish this with a single line of code:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The above line calculates the value ofta.sma(ohlc4,
20)on the current symbol from the daily timeframe.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"It’s important to note that newcomers to Pine may sometimes confuse the
above line of code as being equivalent to the following:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"However, this line will return an entirelydifferentresult. Rather
than requesting a 20-bar SMA from the daily timeframe, it requests theohlc4price from the daily timeframe and calclates theta.sma()of the results over 20chart bars.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"In essence, when the intention is to request the results of an
expression from other contexts, pass the expressiondirectlyto theexpressionparameter in therequest.security()call, as demonstrated in the initial example.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Let’s expand on this concept. The script below calculates a
multi-timeframe (MTF) ribbon of moving averages, where each moving
average in the ribbon calculates over the same number of bars on its
respective timeframe. Eachrequest.security()call usesta.sma(close,
length)as itsexpressionargument to return alength-bar SMA from the
specified timeframe:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Theexpressionparameter ofrequest.security()accepts variables declared in the global scope, allowing scripts to
evaluate their variables’ calculations from other contexts without
redundantly listing the operations in each function call.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"For example, one can declare the following variable:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,and execute the variable’s calculation from another context withrequest.security():,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The function call in the line above will return the result of thepriceReturncalculation on anothersymbol’s data as a series
adapted to the current chart, which the script can display directly on
the chart or utilize in additional operations.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The following example compares the price returns of the current chart’s
symbol and another specifiedsymbol. The script declares thepriceReturnvariable from the chart’s context, then uses that
variable inrequest.security()to evaluate its calculation on anothersymbol. It then calculates thecorrelationbetween thepriceReturnandrequestedReturnandplotsthe result on the
chart:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Tuplesin Pine
Script™ are comma-separated sets of expressions enclosed in brackets
that can hold multiple values of any available type. We use tuples when
creating functions or other local blocks that return more than one
value.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Therequest.security()function can accept a tuple as itsexpressionargument, allowing
scripts to request multiple series of different types using a single
function call. The expressions within requested tuples can be of any
type outlined throughout theRequestable datasection of this page, excluding other tuples.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Notice!The combined size of all tuples returned byrequest.*()calls in a
script cannot exceed 127 elements. Seethissection of theLimitationspage for
more information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Tuples are particularly handy when a script needs to retrieve more than
one value from a specific context.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"For example, this script calculates thepercent
rankof thecloseprice overlengthbars and assigns the expression to therankvariable. It then callsrequest.security()to request a tuple containing therank,ta.crossover(rank,
50),
andta.crossunder(rank,
50)values from the specifiedtimeframe. The scriptplotstherequestedRankand uses thecrossOverandcrossUnder“bool” values withinbgcolor()to conditionally highlight the chart pane’s background:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"User-defined functionsandmethodsare custom functions written by users. They allow users to define
sequences of operations associated with an identifier that scripts can
conveniently call throughout their executions (e.g.,myUDF()).",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Therequest.security()function can request the results ofuser-defined functionsandmethodswhose scopes consist of any types outlined throughout this page’sRequestable datasection.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"For example, this script contains a user-definedweightedBB()function
that calculates Bollinger Bands with the basis average weighted by a
specifiedweightseries. The function returns atupleof custom
band values. The script calls theweightedBB()as theexpressionargument inrequest.security()to retrieve atupleof band values calculated on the specifiedtimeframeandplotsthe results on the
chart:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Chart pointsare reference types that represent coordinates on the chart.Lines,boxes,polylines,
andlabelsusechart.pointobjects to set their display locations.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Therequest.security()function can use the ID of achart.pointinstance in itsexpressionargument, allowing scripts to retrieve
chart coordinates from other contexts.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The example below requests a tuple of historicalchart pointsfrom a higher timeframe and uses them to drawboxeson the
chart. The script declares thetopLeftandbottomRightvariables
that referencechart.pointIDs from the last confirmed bar. It then usesrequest.security()to request atuplecontaining the IDs ofchart pointsrepresenting thetopLeftandbottomRightfrom ahigherTimeframe.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"When a new bar starts on thehigherTimeframe, the script draws anew
boxusing thetimeandpricecoordinates from therequestedTopLeftandrequestedBottomRightchart points:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"Pine Script™collections(arrays,matrices,
andmaps) are data structures
that contain an arbitrary number of elements with specified types. Therequest.security()function can retrieve the IDs ofcollectionswhose elements consist of:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"This example calculates the ratio of a confirmed bar’s high-low range
to the range between thehighestandlowestvalues over 10 bars from a specifiedsymbolandtimeframe. It usesmapsto hold the values used
in the calculations.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The script creates adatamap with “string” keys and “float”
values to holdhigh,low,highest,
andlowestprice values on each bar, which it uses as theexpressioninrequest.security()to calculate anotherDatamap representing thedatafrom the
specified context. It uses the values associated with the “High”,
“Low”, “Highest”, and “Lowest” keys of theotherDatamap to
calculate theratiothat itplotsin the chart pane:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"User-defined types (UDTs)arecomposite typescontaining an arbitrary number offields, which can be of any available type, including otheruser-defined types.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Therequest.security()function can retrieve the IDs ofobjectsproduced byUDTsfrom other contexts if their fields consist of:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The following example requests anobjectID using a
specifiedsymboland displays its field values on a chart pane.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The script contains aTickerInfoUDT with “string” fields forsyminfo.*values, anarrayfield to store recent “float” price data, and an “int” field to hold
the requested ticker’sbar_indexvalue. It assigns a newTickerInfoID to aninfovariable on every
bar and uses the variable as theexpressioninrequest.security()to retrieve the ID of anobjectrepresenting the calculatedinfofrom the specifiedsymbol.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,"The script displays therequestedInfoobject’sdescription,tickerType,currency, andbarIndexvalues in alabeland usesplotcandle()to display the values from itspricesarray:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestabledata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security_lower_tf()`,"Therequest.security_lower_tf()function is an alternative torequest.security()designed for reliably requesting information from lower-timeframe (LTF)
contexts.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security_lower_tf()`,"Whilerequest.security()can retrieve data from asingleintrabar (LTF bar) in each chart bar,request.security_lower_tf()retrieves data fromallavailable intrabars in each chart bar, which
the script can access and use in additional calculations. Eachrequest.security_lower_tf()call can retrieve up to 200,000 intrabars from a lower timeframe, depending on the user’splan. Seethissection of ourLimitationspage for more information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security_lower_tf()`,"Notice!Working withrequest.security_lower_tf()involves frequent usage ofarrayssince it always returnsarrayresults. We therefore recommend you familiarize yourself witharraysto make the most of
this function in your scripts.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security_lower_tf()`,"Below is the function’s signature, which is similar torequest.security():",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security_lower_tf()`,"Code:
request.security_lower_tf(symbol, timeframe, expression, ignore_invalid_symbol, currency, ignore_invalid_timeframe, calc_bars_count) → array<type>",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.security_lower_tf()`,"This functiononlyrequests data from timeframes less than or equal
to the chart’s timeframe. If thetimeframeof the request represents
a higher timeframe than thechart’s
timeframe,
the function will either raise a runtime error or returnnavalues depending on theignore_invalid_timeframeargument in the call.
The default value for this parameter isfalse, meaning it raises
an error and halt the script’s executions when attempting to request HTF
data.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requesting intrabardata,"Intrabar data can provide a script with additional information that may
not be obvious or accessible from solely analyzing data sampled on the
chart’s timerframe. Therequest.security_lower_tf()function can retrieve many data types from an intrabar context.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requesting intrabardata,"Before you venture further in this section, we recommend exploring theRequestable dataportion of therequest.security()section above, which provides foundational information about
the types of data one can request. Theexpressionparameter inrequest.security_lower_tf()accepts most of the same arguments discussed in that section, excluding
direct references tocollectionsand mutable variables declared in the script’s main scope.
Although it accepts many of the same types of arguments, this function
returnsarrayresults, which comes with some differences in interpretation and
handling, as explained below.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requesting intrabardata,"Notice!As withrequest.security(),request.security_lower_tf()duplicates the scopes and operations required to calculate theexpressionfrom another context. The scopes fromrequest.security_lower_tf()increase runtime memory consumption and count toward the script’s
compilation limits. See theScope countsection of theLimitationspage to
learn more.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Intrabar dataarrays,"Lower timeframes contain more data points than higher timeframes, as new
values come in at ahigher frequency. For example, when comparing a
1-minute chart to an hourly chart, the 1-minute chart will have up to 60
times the number of bars per hour, depending on the available data.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Intrabar dataarrays,"To address the fact that multiple intrabars exist within a chart bar,request.security_lower_tf()always returns its results asarrays. The elements in the returnedarraysrepresent theexpressionvalues retrieved from the lower timeframe sorted in
ascending order based on each intrabar’s timestamp.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Intrabar dataarrays,"Thetype templateassigned to the returnedarrayscorresponds to the
value types passed in therequest.security_lower_tf()call. For example, using an “int” as theexpressionwill produce anarray<int>instance, a “bool” as theexpressionwill produce anarray<bool>instance, etc.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Intrabar dataarrays,"The following script uses intrabar information to decompose the chart’s
close-to-close price changes into positive and negative parts. It callsrequest.security_lower_tf()to fetch a “float”arrayofta.change(close)values from thelowerTimeframeon each chart bar, then accesses all
the array’s elements using afor…inloop to accumulatepositiveChangeandnegativeChangesums. The
script adds the accumulated values to calculate thenetChange, thenplotsthe results on the
chart alongside thepriceChangefor comparison:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Intrabar dataarrays,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Intrabar dataarrays,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Tuples of intrabardata,"When passing a tuple or a function call that returns a tuple as theexpressionargument inrequest.security_lower_tf(),
the result is a tuple ofarrayswithtype templatescorresponding to the types within the argument. For example,
using a[float, string, color]tuple as theexpressionwill result
in[array<float>, array<string>, array<color>]data returned by the
function. Using a tupleexpressionallows a script to fetch severalarraysof intrabar data
with a singlerequest.security_lower_tf()function call.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Tuples of intrabardata,"Notice!The combined size of all tuples returned byrequest.*()calls in a
script is limited to 127 elements. Seethissection of theLimitationspage for
more information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Tuples of intrabardata,"The following example requests OHLC data from a lower timeframe and
visualizes the current bar’s intrabars on the chart usinglines and boxes. The
script callsrequest.security_lower_tf()with the[open, high, low, close]tuple as itsexpressionto
retrieve a tuple ofarraysrepresenting OHLC information from a calculatedlowerTimeframe. It
then uses aforloop
to set line coordinates with the retrieved data and current bar indices
to display the results next to the current chart bar, providing a
“magnified view” of the price movement within the latest candle. It
also draws aboxaround thelinesto indicate the chart region occupied by intrabar drawings:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Tuples of intrabardata,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Tuples of intrabardata,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"In some cases, a script may need to request the IDs ofcollectionsfrom an intrabar context. However, unlikerequest.security(),
one cannot passcollectionsor calls to functions that return them as theexpressionargument in arequest.security_lower_tf()call, asarrayscannot
directly reference othercollections.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"Despite these limitations, it is possible to requestcollectionsfrom lower timeframes, if needed, with the help ofwrappertypes.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"Notice!The use case described below isadvancedandnotrecommended for
beginners. Before exploring this approach, we recommend understanding
howuser-defined typesandcollectionswork in Pine Script™. When possible, we recommend usingsimplermethods to manage LTF requests, and only using this approach
whennothing elsewill suffice.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"To makecollectionsrequestable withrequest.security_lower_tf(),
we must create aUDTwith a field to reference a collection ID. This step is necessary sincearrayscannot reference
othercollectionsdirectly butcanreference UDTs with collection fields:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"With ourWrapperUDT defined, we can now pass the IDs ofobjectsof the UDT to theexpressionparameter inrequest.security_lower_tf().",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"A straightforward approach is to call the built-in*.new()function as
theexpression. For example, this line of code callsWrapper.new()witharray.from(close)as itscollectionwithinrequest.security_lower_tf():",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"Alternatively, we can create auser-defined functionormethodthat returns anobjectof
theUDTand call that function withinrequest.security_lower_tf().
For instance, this code calls a customnewWrapper()function that
returns aWrapperID as theexpressionargument:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"The result with either of the above is anarraycontainingWrapperIDs from all available intrabars in the chart bar,
which the script can use to referenceWrapperinstances from specific
intrabars and use theircollectionfields in additional operations.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"The script below utilizes this approach to collectarraysof intrabar data
from alowerTimeframeand uses them to display data from a specific
intrabar. Its customPricestype contains a singledatafield to
referencearray<float>instances that hold price data, and the
user-definednewPrices()function returns the ID of aPricesobject.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,"The script callsrequest.security_lower_tf()with anewPrices()call as itsexpressionargument to retrieve anarrayofPricesIDs from each intrabar in the chart bar, then usesarray.get()to get the ID from a specified available intrabar, if it exists. Lastly,
it usesarray.get()on thedataarray assigned to that instance and callsplotcandle()to display its values on the chart:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Requestingcollections,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"Pine Script™ includes multipleticker.*()functions that allow scripts
to constructcustomticker IDs that specify additional settings for
data requests when used as asymbolargument inrequest.security()andrequest.security_lower_tf():",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,Let’s explore some practical examples of applyingticker.*()functions to request data from custom contexts.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"Suppose we want to include dividend adjustment in a stock symbol’s
prices without enabling the “Adjust data for dividends” option in the
“Symbol” section of the chart’s settings. We can achieve this in a
script by constructing a custom ticker ID for the instrument usingticker.new()orticker.modify()with anadjustmentvalue ofadjustment.dividends.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"This script creates anadjustedTickerIDusingticker.modify(),
uses that ticker ID as thesymbolinrequest.security()to retrieve atupleof adjusted price values, then plots the result ascandleson the chart. It also highlights the background when the requested
prices differ from the prices without dividend adjustment.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"As we see on the “NYSE:XOM” chart below, enabling dividend adjustment
results in different historical values before the date of the latest
dividend:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"While the example above demonstrates a simple way to modify the chart’s
symbol, a more frequent use case forticker.*()functions is applying
custom modifiers to another symbol while requesting data. If a ticker ID
referenced in a script already has the modifiers one would like to apply
(e.g., adjustment settings, session type, etc.), they can useticker.inherit()to quickly and efficiently add those modifiers to another symbol.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"In the example below, we’ve edited the previous script to request data
for asymbolInputusing modifiers inherited from theadjustedTickerID. This script callsticker.inherit()to construct aninheritedTickerIDand uses that ticker ID in arequest.security()call. It also requests data for thesymbolInputwithout additional
modifiers and plotscandlesfor both ticker IDs in a separate chart pane to compare the difference.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"As shown on the chart, the data requested using theinheritedTickerIDincludes dividend adjustment, whereas the data requested using thesymbolInputdirectly does not:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"Another frequent use case for requesting custom contexts is retrieving
data that usesnon-standard chartcalculations. For example, suppose we want to useRenkoprice values to calculate trade signals in astrategy()script. If we simply change the chart type to “Renko” to get the
prices, thestrategywill also simulate its trades based on those synthetic prices, producingmisleading
results:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,"To ensure our strategy shows results based onactualprices, we can
create a Renko ticker ID usingticker.renko()while keeping the chart on astandard type, allowing the script to
request and useRenkoprices to calculate its signals without calculating the strategy results
on them:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Customcontexts,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Historical and realtimebehavior,"Functions in therequest.*()namespace can behave differently on
historical and realtime bars. This behavior is closely related to
Pine’sExecution model.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Historical and realtimebehavior,"Consider how a script behaves within the main context. Throughout the
chart’s history, the script calculates its required values once andcommitsthem to that bar so their states are accessible on subsequent executions.
On an unconfirmed bar, however, the script recalculates its
values oneach updateto the bar’s data to align with realtime
changes. Before recalculating the values on that bar, it reverts
calculated values to their last committed states, otherwise known asrollback, and it only commits values to that bar once the bar closes.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Historical and realtimebehavior,"Now consider the behavior of data requests from other contexts withrequest.security().
As when evaluating historical bars in the main context,request.security()only returns new historical values when it confirms a bar in its
specified context. When executing on realtime bars, it returns
recalculated values on each chart bar, similar to how a script
recalculates values in the main context on the open chart bar.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Historical and realtimebehavior,"However, the function onlyconfirmsthe requested values when a bar
from its context closes. When the script restarts, what
were previouslyrealtimebars becomehistoricalbars.
Therefore,request.security()only returns the values it confirmed on those bars. In essence, this
behavior means that requested data mayrepaintwhen its values
fluctuate on realtime bars without confirmation from the context.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Historical and realtimebehavior,"Notice!It’s often helpful to distinguish historical bars from realtime bars
when working withrequest.*()functions. Scripts can determine whether
bars have historical or realtime states via thebarstate.ishistoryandbarstate.isrealtimevariables.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Historical and realtimebehavior,"In most circumstances where a script requests data from a broader
context, one will typically require confirmed, stable values thatdo
notfluctuate on realtime bars. Thesection belowexplains how to achieve such a result and avoid repainting
data requests.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"When requesting values from a higher timeframe, they are subject to
repainting since realtime bars can containunconfirmedinformation
from developing HTF bars, and the script may adjust the times that new
values come in on historical bars. To avoid repainting HTF data, one
must ensure that the function only returns confirmed values with
consistent timing on all bars, regardless of bar state.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"The most reliable approach to achieve non-repainting results is to use
anexpressionargument that only references past bars (e.g.,close[1]) while usingbarmerge.lookahead_onas thelookaheadvalue.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"Usingbarmerge.lookahead_onwith non-offset HTF data requests is discouraged since it promptsrequest.security()to “look ahead” to the final values of an HTF bar, retrieving
confirmed valuesbeforethey’re actually available in the script’s
history. However, if the values used in theexpressionare offset by
at least one bar, the “future” data the function retrieves is no
longer from the future. Instead, the data represents confirmed values
from established,availableHTF bars. In other words, applying an
offset to theexpressioneffectively prevents the requested data from
repainting when the script restarts its executions and eliminates
lookahead bias in the historical series.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"The following example demonstrates a repainting HTF data request. The
script usesrequest.security()without offset modifications or additional arguments to retrieve the
results of ata.wma()call from a higher timeframe. It also highlights the background to
indicate which bars were in a realtime state during its calculations.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"As shown on the chart below, theplotof the requested WMA only changes on historical bars when HTF bars
close, whereas it fluctuates on all realtime bars since the data
includes unconfirmed values from the higher timeframe:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"To avoid repainting in this script, we can addlookahead = barmerge.lookahead_onto therequest.security()call and offset the call history ofta.wma()by one bar with the history-referencing operator[],
ensuring the request always retrieves the last confirmed HTF bar’s WMA
at the start of each newtimeframe. Unlike the previous script, this
version has consistent behavior on historical and realtime bar states,
as we see below:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"Therequest.security()andrequest.security_lower_tf()functions can retrieve data from lower-timeframe contexts. Therequest.security()function can only retrieve data from asingleintrabar in each chart
bar, andrequest.security_lower_tf()retrieves data fromallavailable intrabars.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"When using these functions to retrieve intrabar data, it’s important to
note that such requests arenotimmune to repainting behavior.
Historical and realtime series often rely onseparatedata feeds. Data
providers may retroactively modify realtime data, and it’s possible for
races to occur in realtime data feeds, as explained in theData feedssection of this page. Either case may result in intrabar
data retrieved on realtime bars repainting after the script restarts its
executions.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"Additionally, a particular case thatwillcause repainting LTF
requests is usingrequest.security()withbarmerge.lookahead_onto retrieve data from the first intrabar in each chart bar. While it
will generally work as expected on historical bars, it will track only
the most recent intrabar on realtime bars, asrequest.security()does not retain all intrabar information, and the intrabars the function retrieves on realtime bars are unsorted until restarting the
script:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,"One can mitigate this behavior and track the values from the first
intrabar, or any available intrabar in the chart bar, by usingrequest.security_lower_tf()since it maintains anarrayof intrabar values ordered by the times they come in. Here, we callarray.first()on a requestedarrayof intrabar data to retrieve thecloseprice from the first available intrabar in each chart bar:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
AvoidingRepainting,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"When a script needs to convert values expressed in one currency to
another, one can userequest.currency_rate().
This function requests adaily ratefor currency conversion
calculations based on currency pair orspreaddata from the most popular exchanges, providing a simpler alternative
to fetching specific pairs orspreadswithrequest.security().",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"While one can userequest.security()to retrieve daily currency rates, its use case is more involved thanrequest.currency_rate(),
as one needs to supply a validticker IDfor a currency pair or spread
to request the rate. Additionally, a historical offset andbarmerge.lookahead_onare necessary to prevent the results from repainting, as explained inthis section.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"Therequest.currency_rate()function, on the other hand, only requirescurrency codes. No ticker
ID is needed when requesting rates with this function, and it ensures
non-repainting results without requiring additional specification.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,The function’s signature is as follows:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"Code:
request.currency_rate(from, to, ignore_invalid_currency) → series float",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"Thefromparameter specifies the currency to convert, and thetoparameter specifies the target currency. Both parameters accept
“string” values representing valid currency codes (e.g.,
“USD”) or any built-incurrency.*variable (e.g.,currency.USD).",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"When the function cannot calculate a valid conversion rate between the specifiedfromandtocurrencies, programmers can decide whether
it raises a runtime error or returnsnavia
theignore_invalid_currencyparameter. The default value isfalse,
meaning the function raises a runtime error and halts the script’s
executions.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"The following example demonstrates a simple use case forrequest.currency_rate().
Suppose we want to convert values expressed in Turkish lira
(currency.TRY)
to South Korean won
(currency.KRW)
using a daily conversion rate. If we userequest.security()to retrieve the rate, we must supply a valid ticker ID and request the
last confirmedclosefrom the previous day.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"In this case, no valid symbol exists that would allow us to
retrieve a conversion rate directly withrequest.security().
Therefore, we first need a ticker ID for aspreadthat converts TRY to an intermediate currency, such as USD, then
converts the intermediate currency to KRW. We can then use that ticker
ID withinrequest.security()withclose[1]as theexpressionandbarmerge.lookahead_onas thelookaheadvalue to request a non-repainting daily rate.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"Alternatively, we can achieve the same result more simply by callingrequest.currency_rate().
This function does all the heavy lifting for us, only requiringfromandtocurrency arguments to perform its calculation.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,"As we see below, both approaches return the same daily rate:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.currency_rate()`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Analyzing a stock’s earnings data and corporate actions provides
helpful insights into its underlying financial strength. Pine Script™
provides the ability to retrieve essential information about applicable
stocks viarequest.dividends(),request.splits(),
andrequest.earnings().",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`",These are the functions’ signatures:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Code:
request.dividends(ticker, field, gaps, lookahead, ignore_invalid_symbol, currency) → series floatrequest.splits(ticker, field, gaps, lookahead, ignore_invalid_symbol) → series floatrequest.earnings(ticker, field, gaps, lookahead, ignore_invalid_symbol, currency) → series float",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Each function has the same parameters in its signature, with the
exception ofrequest.splits(),
which doesn’t have acurrencyparameter.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Note that unlike thesymbolparameter in otherrequest.*()functions, thetickerparameter in these functions only accepts an“Exchange:Symbol” pair, such as “NASDAQ:AAPL”. The built-insyminfo.tickervariable does not work with these functions since it does not contain
exchange information. Instead, one must usesyminfo.tickeridfor such cases.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Thefieldparameter determines the data the function will retrieve.
Each of these functions accepts different built-in variables as thefieldargument since each requests different information about a
stock:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","For a detailed explanation of thegaps,lookahead, andignore_invalid_symbolparameters of these functions, see theCommon characteristicssection at the top of this page.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","It’s important to note that the values returned by these functions
reflect the data available as it comes in. This behavior differs from
financial data originating from arequest.financial()call in that the underlying data from such calls becomes available
according to a company’s fiscal reporting period.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Notice!Scripts can also retrieve information about upcoming earnings and
dividends for an instrument via theearnings.future_*anddividends.future_*built-in variables.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`","Here, we’ve included an example that displays a handytablecontaining the most recent dividend, split, and EPS data. The script
calls therequest.*()functions discussed in this section to retrieve
the data, then converts the values to “strings” withstr.*()functions and displays the results in theinfoTablewithtable.cell():",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`",,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
"`request.dividends()`, `request.splits()`, and`request.earnings()`",Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"TradingView forms partnerships with many fintech companies to provide
users access to extensive information on financial instruments, economic
data, and more. One of our many partners isNasdaq Data
Link(formerly Quandl), which provides
multipleexternaldata feeds that scripts can access via therequest.quandl()function.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,Here is the function’s signature:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"Code:
request.quandl(ticker, gaps, index, ignore_invalid_symbol) → series float",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"Thetickerparameter accepts a “string” value representing the ID
of the database published on Nasdaq Data Link and its time series code,
separated by the ”/” delimiter. For example, the code “FRED/DFF”
represents the “Effective Federal Funds Rate” time series from the
“Federal Reserve Economic Data” database.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"Theindexparameter accepts an “int” value representing thecolumn
indexof the requested data, where 0 is the first available column.
Consult the database’s documentaion on Nasdaq Data Link’s website to
see available columns.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"For details on thegapsandignore_invalid_symbolparameters, see
theCommon characteristicssection of this page.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"Notice!Therequest.quandl()function can only requestfreedata from Nasdaq Data Link. No data
that requires a paid subscription to their services is accessible with
this function. Nasdaq Data Link may change the data it provides over
time, and they may not update available datasets regularly. Therefore,
it’s up to programmers to research the supported data available for
request and review the documentation provided for each dataset. You can
search for free datahere.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,"This script requests Bitcoin hash rate (“HRATE”) information from the
“Bitcoin Data Insights” (“BCHAIN”) database andplotsthe retrieved time
series data on the chart. It usescolor.from_gradient()to color theareaplot based on the distance from the current hash rate to itsall-time
high:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.quandl()`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"Financial metrics provide investors with insights about a company’s
economic and financial health that are not tangible from solely
analyzing its stock prices. TradingView offers a wide variety of
financial metrics fromFactSetthat traders
can access via the “Financials” tab in the “Indicators” menu of the
chart. Scripts can access available metrics for an instrument directly
via therequest.financial()function.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,This is the function’s signature:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"Code:
request.financial(symbol, financial_id, period, gaps, ignore_invalid_symbol, currency) → series float",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"As with the first parameter inrequest.dividends(),request.splits(),
andrequest.earnings(),
thesymbolparameter inrequest.financial()requires an“Exchange:Symbol” pair. To request financial information
for the chart’s ticker ID, usesyminfo.tickerid,
assyminfo.tickerwill not work.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"Thefinancial_idparameter accepts a “string” value representing
the ID of the requested financial metric. TradingView has numerous
financial metrics to choose from. See theFinancial IDssection below for an overview of all accessible metrics and
their “string” identifiers.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"Theperiodparameter specifies the fiscal period for which new
requested data comes in. It accepts one of the following “string” arguments:“FQ” (quarterly), “FH” (semiannual), “FY” (annual), or “TTM”
(trailing twelve months). Not all fiscal periods are available for all
metrics or instruments. To confirm which periods are available for
specific metrics, see the second column of the tables in theFinancial IDssection.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"See this page’sCommon characteristicssection for a detailed explanation of this function’sgaps,ignore_invalid_symbol, andcurrencyparameters.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"It’s important to note that the data retrieved from this function comes
in at afixed frequency, independent of the precise date on which the
data is made available within a fiscal period. For a company’s
dividends, splits, and earnings per share (EPS) information, one can
request data reported on exact dates viarequest.dividends(),request.splits(),
andrequest.earnings().",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,"This script usesrequest.financial()to retrieve information about the income and expenses of a stock’s
issuing company and visualize the profitability of its typical business
operations. It requests the “OPER_INCOME”, “TOTAL_REVENUE”, and
“TOTAL_OPER_EXPENSE”financial IDsfor thesyminfo.tickeridover the latestfiscalPeriod, thenplotsthe results on the
chart:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.financial()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Calculating financialmetrics,"Therequest.financial()function can provide scripts with numerous useful financial metrics that
don’t require additional calculations. However, some commonly used
financial estimates require combining an instrument’s current market
price with requested financial data. Such is the case for:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Calculating financialmetrics,"The following script containsuser-defined functionsthat calculate the above financial metrics for thesyminfo.tickerid.
We’ve created these functions so users can easily copy them into their
scripts. This example uses them within astr.format()call to construct atooltipText, which it displays in tooltips on the
chart usinglabels. Hovering over any bar’slabelwill expose the tooltip containing the metrics calculated on that bar:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Calculating financialmetrics,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Calculating financialmetrics,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,"Below is an overview of all financial metrics one can request viarequest.financial(),
along with the periods in which reports may be available. We’ve divided
this information into four tables corresponding to the categories
displayed in the “Financials” section of the “Indicators” menu:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,Each table has the following three columns:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,"Notice!The tables in these sections are quite lengthy, as there are manyfinancial_idarguments available. Use the“Click to show/hide”option above each table to toggle its visibility.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,"This table lists the available metrics that provide information about a
company’s income, costs, profits and losses.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,"This table lists the metrics that provide information about a company’s
capital structure.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,"This table lists the available metrics that provide information about
how cash flows through a company.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
FinancialIDs,"This table contains a variety of statistical metrics, including commonly
used financial ratios.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"Therequest.economic()function provides scripts with the ability to retrieve economic data for
a specified country or region, including information about the state of
the economy (GDP, inflation rate, etc.) or of a particular industry
(steel production, ICU beds, etc.).",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,Below is the signature for this function:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"Code:
request.economic(country_code, field, gaps, ignore_invalid_symbol) → series float",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"Thecountry_codeparameter accepts a “string” value representing
the identifier of the country or region to request economic data for
(e.g., “US”, “EU”, etc.). See theCountry/region codessection for a complete list of codes this function supports.
Note that the economic metrics available depend on the country or region
specified in the function call.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"Thefieldparameter accepts a “string” specifying the metric that the function requests.
TheField codessection covers all accessible metrics and the
countries/regions they’re available for.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"For a detailed explanation on the last two parameters of this function,
see theCommon characteristicssection at the top of this page.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"This simple example requests the growth rate of the Gross Domestic
Product (“GDPQQ”) for the United States (“US”) usingrequest.economic(),
thenplotsits value on the
chart with agradient
color:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.economic()`,"Notice!The tables in the sections below are rather large, as there are numerouscountry_codeandfieldarguments available. Use the“Click to
show/hide”option above each table to toggle its visibility.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Country/regioncodes,"The table in this section lists all country/region codes available for
use withrequest.economic().
The first column of the table contains the “string” values that
represent the country or region code, and the second column contains the
corresponding country/region names.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Country/regioncodes,It’s important to note that the value used as thecountry_codeargument determines whichfield codesare accessible to the function.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Fieldcodes,"The table in this section lists the field codes available for use withrequest.economic().
The first column contains the “string” values used as thefieldargument, and the second column contains names of each metric and links
to our Help Center with additional information, including the
countries/regions they’re available for.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"TradingView aggregates a vast amount of data from its many providers, including price and volume information on tradable instruments, financials, economic data, and more, which users can retrieve in Pine Script™ using the functions discussed in the sections above, as well as multiple built-in variables.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"To further expand the horizons of possible data one can analyze on TradingView, we havePine Seeds, which allows users to supply customuser-maintainedEOD data feeds via GitHub for use on TradingView charts and within Pine Script™ code.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"Notice!The creation ofnewPine Seeds repositories is currentlyunavailable. However, the data feeds fromexistingrepositories are still accessible from charts and Pine scripts. The documentationhereprovides in-depth information about Pine Seeds functionality and instructions for requesting the return of full Pine Seeds support.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"To retrieve data from a Pine Seeds data feed within a script, use therequest.seed()function. Below is the function’s signature:",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"Code:
request.seed(source, symbol, expression, ignore_invalid_symbol, calc_bars_count) → series <type>",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,Thesourceparameter specifies the unique name of the user-maintained GitHub repository that contains the data feed.,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"Thesymbolparameter represents the file name from the “data/” directory of thesourcerepository, excluding the “.csv” file extension. Seethis pagefor information about the structure of the data stored in repositories.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"Theexpressionparameter is the series to evaluate using data extracted from the requested context. It is similar to the equivalent inrequest.security()andrequest.security_lower_tf(). Data feeds stored in user-maintained repos containtime,open,high,low,close, andvolumeinformation, meaning theexpressionargument can use the corresponding built-in variables, including variables derived from them (e.g.,bar_index,ohlc4, etc.) to request their values from the context of the custom data.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,"Notice!As withrequest.security()andrequest.security_lower_tf(),request.seed()duplicates the scopes necessary to evaluate itsexpressionin another context, which contributes toward compilation limits and script memory demands. See theLimitationspage’s section onscope countlimits for more information.",https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,The script below visualizes sample data from theseed_crypto_santimentdemo repository. It uses two calls torequest.seed()to retrieve theclosevalues from the repository’sBTC_SENTIMENT_POSITIVE_TOTALandBTC_SENTIMENT_NEGATIVE_TOTALdata feeds andplotsthe results on the chart asstep lines:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,Previous,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
`request.seed()`,Next,https://www.tradingview.com/pine-script-docs/concepts/other-timeframes-and-data
Introduction,"Theplot()function is the most frequently used function used to display
information calculated using Pine scripts. It is versatile and can plot
different styles of lines, histograms, areas, columns (like volume
columns), fills, circles or crosses.",https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,The use ofplot()to create fills is explained in the page onFills.,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,This script showcases a few different uses ofplot()in an overlay script:,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,Note that:,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,This script shows other uses ofplot()in a pane:,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,Note that:,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,"plot()calls must always be placed in a line’s first position, which entails
they are always in the script’s global scope. They can’t be placed in
user-defined functions or structures likeif,for,
etc. Calls toplot()can, however, be designed to plot conditionally in two ways, which
we cover in thePlotting conditionallysection of this page.",https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,"A script can only plot in its own visual space, whether it is in a pane
or on the chart as an overlay. Scripts running in a pane can onlycolor barsin the
chart area.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,Theplot()function has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"Code:
plot(series, title, color, linewidth, style, trackprice, histbase, offset, join, editable, show_last, display, force_overlay) → plot",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,The parameters ofplot()are:,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,series,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"It is the only mandatory parameter. Its argument must be of “series
int/float” type. Note that because the auto-casting rules in Pine
Script™ convert in the int 🠆 float 🠆 bool direction, a “bool” type
variable cannot be used as is; it must be converted to an “int” or
a “float” for use as an argument. For example, ifnewDayis of
“bool” type, thennewDay ? 1 : 0can be used to plot 1 when the
variable istrue, and zero when it isfalse.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,title,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"Requires a “const string” argument, so it must be known at compile
time. The string appears:",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,color,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"Accepts “series color”, so can be calculated on the fly, bar by
bar. Plotting withnaas the color, or any color with a transparency of 100, is one way to
hide plots when they are not needed.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,linewidth,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"Is the plotted element’s size, but it does not apply to all styles.
When a line is plotted, the unit is pixels. It has no impact whenplot.style_columnsis used.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,style,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,The available arguments are:,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,trackprice,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"The default value of this isfalse. When it istrue, a dotted
line made up of small squares will be plotted the full width of the
script’s visual space. It is often used in conjuction withshow_last = 1, offset = -99999to hide the actual plot and only
leave the residual dotted line.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,histbase,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"It is the reference point used withplot.style_area,plot.style_columnsandplot.style_histogram.
It determines the level separating positive and negative values of
theseriesargument. It cannot be calculated dynamically, as an
“input int/float” is required.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,offset,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"This allows shifting the plot in the past/future using a
negative/positive offset in bars. The value cannot change during the
script’s execution.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,join,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"This only affect stylesplot.style_circlesorplot.style_cross.
Whentrue, the shapes are joined by a one-pixel line.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,editable,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"This boolean parameter controls whether or not the plot’s
properties can be edited in the “Settings/Style” tab. Its default
value istrue.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,show_last,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"Allows control over how many of the last bars the plotted values are
visible. An “input int” argument is required, so it cannot be
calculated dynamically.",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,display,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"The default isdisplay.all.
When it is set todisplay.none,
plotted values will not affect the scale of the script’s visual
space. The plot will be invisible and will not appear in indicator
values or the Data Window. It can be useful in plots destined for
use as external inputs for other scripts, or for plots used with the{{plot(""[plot_title]"")}}placeholder inalertcondition()calls, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,force_overlay,https://www.tradingview.com/pine-script-docs/concepts/plots
`plot()`parameters,"Iftrue, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default isfalse.",https://www.tradingview.com/pine-script-docs/concepts/plots
Plottingconditionally,"plot()calls cannot be used in conditional structures such asif, but
they can be controlled by varying their plotted values, or their color.
When no plot is required, you can either plotnavalues, or plot values usingnacolor
or any color with 100 transparency (which also makes it invisible).",https://www.tradingview.com/pine-script-docs/concepts/plots
Valuecontrol,"One way to control the display of plots is to plotnavalues when no plot is needed. Sometimes, values returned by functions
such asrequest.security()will returnnavalues, whengaps = barmerge.gaps_onis used, for example. In both
these cases it is sometimes useful to plot discontinuous lines. This
script shows a few ways to do it:",https://www.tradingview.com/pine-script-docs/concepts/plots
Valuecontrol,,https://www.tradingview.com/pine-script-docs/concepts/plots
Valuecontrol,Note that:,https://www.tradingview.com/pine-script-docs/concepts/plots
Valuecontrol,"This script shows how you can restrict plotting to bars after a
user-defined date. We use theinput.time()function to create an input widget allowing script users to select a
date and time, using Jan 1st 2021 as its default value:",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,"TheConditional coloringsection of the page on colors discusses color control for
plots. We’ll look here at a few examples.",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,"The value of thecolorparameter inplot()can be a constant, such as one of the built-inconstant colorsor acolor literal. In Pine Script™, the qualified type of such colors is
called“const color”(see theType systempage). They
are known at compile time:",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,"The color of a plot can also be determined using information that is
only known when the script begins execution on the first historical bar
of a chart (bar zero, i.e.,bar_index == 0orbarstate.isfirst == true), as will be the case when the information
needed to determine a color depends on the chart the script is running
on. Here, we calculate a plot color using thesyminfo.typebuilt-in variable, which returns the type of the chart’s symbol. The
qualified type ofplotColorin this case will be“simple color”:",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,"Plot colors can also be chosen through a script’s inputs. In this case,
thelineColorInputvariable is of the“input color”type:",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,"Finally, plot colors can also bedynamicvalues, i.e., calculated
values that can change on each bar. These values are of the“series
color”type:",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,"When plotting pivot levels, one common requirement is to avoid plotting
level transitions. Usinglinesis one alternative, but you can also useplot()like this:",https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,,https://www.tradingview.com/pine-script-docs/concepts/plots
Colorcontrol,Note that:,https://www.tradingview.com/pine-script-docs/concepts/plots
Levels,"Pine Script™ has anhline()function to plot horizontal lines (see the page onLevels).hline()is useful because it has some line styles unavailable withplot(),
but it also has some limitations, namely that it does not accept
“series color”, and that itspriceparameter requires an “input
int/float”, so cannot vary during the script’s execution.",https://www.tradingview.com/pine-script-docs/concepts/plots
Levels,You can plot levels withplot()in a few different ways. This shows aCCIindicator with levels plotted usingplot():,https://www.tradingview.com/pine-script-docs/concepts/plots
Levels,,https://www.tradingview.com/pine-script-docs/concepts/plots
Levels,Note that:,https://www.tradingview.com/pine-script-docs/concepts/plots
Offsets,"Theoffsetparameter specifies the shift used when the line is plotted
(negative values shift in the past, positive values shift into the
future). For example:",https://www.tradingview.com/pine-script-docs/concepts/plots
Offsets,,https://www.tradingview.com/pine-script-docs/concepts/plots
Offsets,"As can be seen in the screenshot, theredseries has been shifted to
the left (since the argument’s value is negative), while thegreenseries has been shifted to the right (its value is positive).",https://www.tradingview.com/pine-script-docs/concepts/plots
Plot countlimit,"Each script is limited to a maximum plot count of 64. Allplot*()calls andalertcondition()calls count in the plot count of a script. Some types of calls count for
more than one in the total plot count.",https://www.tradingview.com/pine-script-docs/concepts/plots
Plot countlimit,"plot()calls count for one in the total plot count if they use a “const
color” argument for thecolorparameter, which means it is known at
compile time, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/plots
Plot countlimit,"When they use another qualified type, such as any one of these, they
will count for two in the total plot count:",https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,"Not all values can be plotted everywhere. Your script’s visual space is
always bound by upper and lower limits that are dynamically adjusted
with the values plotted. AnRSIindicator will plot values between 0 and 100, which is why it is usually
displayed in a distinctpane— or area — above or below the chart.
If RSI values were plotted as an overlay on the chart, the effect would
be to distort the symbol’s normal price scale, unless it just hapenned
to be close to RSI’s 0 to 100 range. This shows an RSI signal line and
a centerline at the 50 level, with the script running in a separate
pane:",https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,,https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,"Note that theyaxis of our script’s visual space is automatically
sized using the range of values plotted, i.e., the values of RSI. See
the page onColorsfor more
information on thecolor.from_gradient()function used in the script.",https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,If we try to plot the symbol’sclosevalues in the same space by adding the following line to our script:,https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,This is what happens:,https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,,https://www.tradingview.com/pine-script-docs/concepts/plots
Scale,"The chart is on the BTCUSD symbol, whosecloseprices are around 40000 during this period. Plotting values in the 40000
range makes our RSI plots in the 0 to 100 range indiscernible. The same
distorted plots would occur if we placed theRSIindicator on the chart as an overlay.",https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,"If you are planning to merge two signals in one script, first consider
the scale of each. It is impossible, for example, to correctly plot anRSIand aMACDin the
same script’s visual space because RSI has a fixed range (0 to 100)
while MACD doesn’t, as it plots moving averages calculated on price._",https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,"If both your indicators used fixed ranges, you can shift the values of
one of them so they do not overlap. We could, for example, plot bothRSI(0 to
100) and theTrue Strength Indicator
(TSI)(-100
to +100) by displacing one of them. Our strategy here will be to
compress and shift theTSIvalues
so they plot overRSI:",https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,,https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,Note that:,https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,We have added levels usinghlineto situate both signals.,https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,"In order for both signal lines to oscillate on the same range of
100, we divide theTSIvalue by 2 because it has a 200 range (-100 to +100). We then shift
this value up by 150 so it oscillates between 100 and 200, making
150 its centerline.",https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,"The manipulations we make here are typical of the compromises
required to bring two indicators with different scales in the same
visual space, even when their values, contrary toMACD,
are bounded in a fixed range.",https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,Previous,https://www.tradingview.com/pine-script-docs/concepts/plots
Merging twoindicators,Next,https://www.tradingview.com/pine-script-docs/concepts/plots
Introduction,"We define repainting as:script behavior causing historical vs
realtime calculations or plots to behave differently.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,"Repainting behavior is widespread and many factors can cause it.
Following our definition, our estimate is that more than 95% of
indicators in existence exhibit some form of repainting behavior.
Commony used indicators such as MACD and RSI, for example, show
confirmed values on historical bars, but will fluctuate on a realtime,
unconfirmed chart bar until it closes. Therefore, they behavedifferentlyin historical and realtime states.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,"Not all repainting behavior is inherently useless or misleading, nor
does such behavior prevent knowledgeable traders from using indicators
with such behavior. For example, who would think of discrediting a
volume profile indicator solely because it updates its values on
realtime bars?",https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,"One may encounter any of the following forms of repainting in the
scripts they use, depending on what a script’s calculations entail:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,The first two types of repainting can be perfectly acceptable if:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,"It should now be clear that notallrepainting behavior is wrong and
requires avoiding at all costs. In many situations, some forms of
repainting may be exactly what a script needs. What’s important is to
know when repainting behavior isnotacceptable for one’s needs. To
avoid repainting that’s not acceptable, it’s important to understand
how a tool works or how you should design the tools you build. If youpublishscripts, ensure
you mention any potentially misleading behavior along with the other
limitations of your script in the publication’s description.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,"Notice!We will not discuss the perils of using strategies on non-standard
charts, as this problem is not related to repainting. See theBacktesting on Non-Standard Charts:
Caution!script for a discussion of the subject.",https://www.tradingview.com/pine-script-docs/concepts/repainting
For scriptusers,"One can decide to use repainting indicators if they understand the
behavior, and whether that behavior meets their analysis requirements.
Don’t be one of those newcomers who slap “repaint” sentences on
published scripts in an attempt to discredit them, as doing so reveals a
lack of foundational knowledge on the subject.",https://www.tradingview.com/pine-script-docs/concepts/repainting
For scriptusers,"Simply asking whether a script repaints is relatively meaningless, given
that there are forms of repainting behavior that are perfectly
acceptable in a script. Therefore, such a question will not beget a
meaningful answer. One should instead askspecificquestions about a
script’s potential repainting behavior, such as:",https://www.tradingview.com/pine-script-docs/concepts/repainting
For scriptusers,"What’s important is that you understand how the tools you use work, and
whether their behavior is compatible with your objectives, repainting or
not. As you will learn if you read this page, repainting is a complex
matter. It has many faces and many causes. Even if you don’t program in
Pine Script™, this page will help you understand the array of causes
that can lead to repainting, and hopefully enable more meaningful
discussions with script authors.",https://www.tradingview.com/pine-script-docs/concepts/repainting
For Pine Script™programmers,"As discussed above, not all forms of repainting behavior must be avoided
at all costs, nor is all potential repainting behavior necessarily
avoidable. We hope this page helps you better understand the dynamics at
play so that you can design your trading tools with these behaviors in
mind. This page’s content should help make you aware of common coding
mistakes that produce misleading repainting results.",https://www.tradingview.com/pine-script-docs/concepts/repainting
For Pine Script™programmers,"Whatever your design decisions are, if youpublishyour script,
explain the script to traders so they can understand how it behaves.",https://www.tradingview.com/pine-script-docs/concepts/repainting
For Pine Script™programmers,This page covers three broad categories of repainting causes:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"Historical data does not include records of intermediary price movements
on bars; onlyopen,high,lowandclosevalues (OHLC).",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"On realtime bars (bars running when the instrument’s market is open),
however, thehigh,lowandclosevalues are not fixed; they can change values many times before the
realtime bar closes and its HLC values are fixed. They arefluid. This
leads to a script sometimes working differently on historical data and
in real time, where only theopenprice will not change during the bar.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"Any script using values likehigh,lowandclosein realtime is subject to producing calculations that may not be
repeatable on historical bars — thus repaint.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"Let’s look at this simple script. It detects crosses of theclosevalue (in the realtime bar, this corresponds to the current price of the
instrument) over and under anEMA:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,,https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,Note that:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"To prevent this repainting, we must rewrite our script so that it does
not use values that fluctuate during the realtime bar. This will require
using values from a bar that has elapsed (typically the preceding bar),
or theopenprice, which does not vary in realtime.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"We can achieve this in many ways. This method adds aand barstate.isconfirmedcondition to our cross detections, which
requires the script to be executing on the bar’s last iteration, when
it closes and prices are confirmed. It is a simple way to avoid
repainting:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,This uses the crosses detected on the previous bar:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,This uses only confirmedcloseand EMA values for its calculations:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"This detects crosses between the realtime bar’sopenand the value of the EMA from the previous bars. Notice that the EMA is
calculated usingclose,
so it repaints. We must ensure we use a confirmed value to detect
crosses, thusma[1]in the cross detection logic:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Fluid datavalues,"All these methods have one thing in common: while they prevent
repainting, they will also trigger signals later than repainting
scripts. This is an inevitable compromise if one wants to avoid
repainting. You can’t have your cake and eat it too.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,"Therequest.security()function behaves differently on historical and realtime bars. On
historical bars, it only returnsconfirmedvalues from its requested
context, wheras it can returnunconfirmedvalues on realtime bars.
When the script restarts its execution, the bars that had a realtime
state become historical bars, and will therefore only contain the values
it confirmed on those bars. If the values returned byrequest.security()fluctuate on realtime bars without confirmation from the context, the
script will repaint them when it restarts its execution. See theHistorical and realtime behaviorsection of theOther timeframes and datapage for a detailed explanation.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,"One can ensure higher-timeframe data requests only return confirmed
values on all bars, regardless of bar state, by offsetting theexpressionargument by at least one bar with the history-referencing
operator[]and usingbarmerge.lookahead_onfor thelookaheadargument in therequest.security()call, as explainedhere.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,"The script below demonstrates the difference between repainting and
non-repainting HTF data requests. It contains tworequest.security()calls. The first function call requestsclosedata from thehigherTimeframewithout additional specification, and
the second call requests the same series with an offset andbarmerge.lookahead_on.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,"As we see on allrealtimebars (the ones with an orange background), therepaintingClosecontains values that fluctuate without confirmation from thehigherTimeframe, meaning it willrepaintwhen the script restarts
its execution. ThenonRepaintingClose, on the other hand, behaves the
same on realtime and historical bars, i.e., it only changes its value
when new, confirmed data is available:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,,https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,Note that:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,"For the sake of easy reusability, below is a simple anoRepaintSecurity()function that one can apply in their scripts to
request non-repainting higher-timeframe values:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Repainting `request.security()`calls,Note that:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Using `request.security()` at lowertimeframes,"Some scripts userequest.security()to request data from a timeframelowerthan the chart’s timeframe.
This can be useful when functions specifically designed to handle
intrabars at lower timeframes are sent down the timeframe. When this
type of user-defined function requires the detection of the intrabars’
first bar, as most do, the technique will only work on historical bars.
This is due to the fact that realtime intrabars are not yet sorted. The
impact of this is that such scripts cannot reproduce in real time their
behavior on historical bars. Any logic generating alerts, for example,
will be flawed, and constant refreshing will be required to recalculate
elapsed realtime bars as historical bars.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Using `request.security()` at lowertimeframes,"When used at lower timeframes than the chart’s without specialized
functions able to distinguish between intrabars,request.security()will only return the value of thelastintrabar in the dilation of
the chart’s bar, which is usually not useful, and will also not
reproduce in real time, so lead to repainting.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Using `request.security()` at lowertimeframes,"For all these reasons, unless you understand the subtleties of usingrequest.security()at lower timeframes than the chart’s, it is best to avoid using the
function at those timeframes. Higher-quality scripts will have logic to
detect such anomalies and prevent the display of results which would be
invalid when a lower timeframe is used.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Using `request.security()` at lowertimeframes,"For more reliable lower-timeframe data requests, userequest.security_lower_tf(),
as explained inthissection of theOther timeframes and datapage.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Future leak with`request.security()`,"Whenrequest.security()is used withlookahead = barmerge.lookahead_onto fetch prices without
offsetting the series by[1], it will return data from the future on
historical bars, which is dangerously misleading.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Future leak with`request.security()`,"While historical bars will magically display future prices before they
should be known, no lookahead is possible in realtime because the future
there is unknown, as it should, so no future bars exist.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Future leak with`request.security()`,This is an example:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Future leak with`request.security()`,,https://www.tradingview.com/pine-script-docs/concepts/repainting
Future leak with`request.security()`,"Note how the higher timeframe line is showing the timeframe’shighvalue before it occurs. The solution to avoid this effect is to use the
function as demonstrated inthis section.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Future leak with`request.security()`,"Using lookahead to produce misleading results is not allowed in script
publications, as explained in thelookaheadsection of theOther timeframes and datapage. Script publications that use this misleading techniquewill be moderated.",https://www.tradingview.com/pine-script-docs/concepts/repainting
`varip`,"Scripts using thevaripdeclaration mode for variables (see our section onvaripfor more information) save information across realtime updates, which
cannot be reproduced on historical bars where only OHLC information is
available. Such scripts may be useful in realtime, including to generate
alerts, but their logic cannot be backtested, nor can their plots on
historical bars reflect calculations that will be done in realtime.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Bar statebuilt-ins,"Scripts usingbar statesmay or may not repaint. As we have seen in the previous section, usingbarstate.isconfirmedis actually one way toavoidrepainting thatwillreproduce on
historical bars, which are always “confirmed”. Uses of other bar
states such asbarstate.isnew,
however, will lead to repainting. The reason is that on historical bars,barstate.isnewistrueon the bar’sclose,
yet in realtime, it istrueon the bar’sopen.
Using the other bar state variables will usually cause some type of
behavioral discrepancy between historical and realtime bars.",https://www.tradingview.com/pine-script-docs/concepts/repainting
`timenow`,"Thetimenowbuilt-in returns the current time. Scripts using this variable cannot
show consistent historical and realtime behavior, so they necessarily
repaint.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Strategies,"Strategies usingcalc_on_every_tick = trueexecute on each realtime
update, while strategies run on thecloseof historical bars. They will most probably not generate the same order
executions, and so repaint. Note that when this happens, it also
invalidates backtesting results, as they are not representative of the
strategy’s behavior in realtime.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Plotting in thepast,"Scripts detecting pivots after 5 bars have elapsed will often go back in
the past to plot pivot levels or values on the actual pivot, 5 bars in
the past. This will often cause unsuspecting traders looking at plots on
historical bars to infer that when the pivot happens in realtime, the
same plots will apppear on the pivot when it occurs, as opposed to when
it is detected.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Plotting in thepast,"Let’s look at a script showing the price of high pivots by placing the
price in the past, 5 bars after the pivot was detected:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Plotting in thepast,,https://www.tradingview.com/pine-script-docs/concepts/repainting
Plotting in thepast,Note that:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Plotting in thepast,"The best solution to this problem when developing script for others is
to plotwithoutan offset by default, but give the option for script
users to turn on plotting in the past through inputs, so they are
necessarily aware of what the script is doing, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Startingpoints,"Scripts begin executing on the chart’s first historical bar, and then
execute on each bar sequentially, as is explained in this manual’s page
on Pine Script™‘sexecution model. If
the first bar changes, then the script will often not calculate the same
way it did when the dataset began at a different point in time.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Startingpoints,"The following factors have an impact on the quantity of bars you see on
your charts, and theirstarting point:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Startingpoints,These are the account-specific bar limits:,https://www.tradingview.com/pine-script-docs/concepts/repainting
Startingpoints,"Starting points are determined using the following rules, which depend
on the chart’s timeframe:",https://www.tradingview.com/pine-script-docs/concepts/repainting
Startingpoints,"As time goes by, these factors cause your chart’s history to start at
different points in time. This often has an impact on your scripts
calculations, because changes in calculation results in early bars can
ripple through all the other bars in the dataset. Using functions liketa.valuewhen(),ta.barssince()orta.ema(),
for example, will yield results that vary with early history.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Revision of historicaldata,"Historical and realtime bars are built using two different data feeds
supplied by exchanges/brokers: historical data, and realtime data. When
realtime bars elapse, exchanges/brokers sometimes make what are usually
small adjustments to bar prices, which are then written to their
historical data. When the chart is refreshed or the script is
re-executed on those elapsed realtime bars, they will then be built and
calculated using the historical data, which will contain those usually
small price revisions, if any have been made.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Revision of historicaldata,"Historical data may also be revised for other reasons, e.g., for stock
splits.",https://www.tradingview.com/pine-script-docs/concepts/repainting
Revision of historicaldata,Previous,https://www.tradingview.com/pine-script-docs/concepts/repainting
Revision of historicaldata,Next,https://www.tradingview.com/pine-script-docs/concepts/repainting
Introduction,Session information is usable in three different ways in Pine Script™:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Introduction,"The following sections cover both methods of using session information
in Pine Script™.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Introduction,Note that:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,Session strings used withtime()andtime_close()must have a specific format. Their syntax is:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"Code:
<time_period>:<days>",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,Where:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"- <time_period> uses times in “hhmm” format, with “hh” in 24-hour format, so1700for 5PM.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"The time periods are in the “hhmm-hhmm” format, and a comma can
separate multiple time periods to specify combinations of discrete
periods.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"For example, - <days> is a set of digits from 1 to 7 that specifies on which days the session is valid.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"1 is Sunday, 7 is Saturday.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"Notice!Before Pine Script™ v5, only the weekdays were included, and the default <days> format was23456. Since v5, all days are included and the default is1234567. For v6 code to reproduce the behavior from versions 1-4, it should explicitly mention weekdays, as in""0930-1700:23456"".",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,These are examples of session strings:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""24x7""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"A 7-day, 24-hour session beginning at midnight.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""0000-0000:1234567""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,Equivalent to the previous example.,https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""0000-0000""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,Equivalent to the previous two examples because the default days are1234567.,https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""0000-0000:23456""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"The same as the previous example, but only Monday to Friday.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""2000-1630:1234567""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"An overnight session that begins at 20:00 and ends at 16:30 the next
day. It is valid on all days of the week.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""0930-1700:146""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"A session that begins at 9:30 and ends at 17:00 on Sundays (1),
Wednesdays (4), and Fridays (6).",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""1700-1700:23456""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"Anovernight session. The Monday session starts Sunday at 17:00
and ends Monday at 17:00. It is valid Monday through Friday.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""1000-1001:26""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"A weird session that lasts only one minute on Mondays (2) and
Fridays (6).",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"""0900-1600,1700-2000""",https://www.tradingview.com/pine-script-docs/concepts/sessions
Session stringspecifications,"A session that begins at 9:00, breaks from 16:00 to 17:00, and
continues until 20:00. Applies to every day of the week.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessionstrings,"Session properties defined with session strings are independent of the
exchange-defined sessions determining when an instrument can be traded.
Programmers have complete liberty in creating whatever session
definitions suit their purpose, which is usually to detect when bars
belong to specific time periods. This is accomplished in Pine Script™ by
using one of the following two signatures of thetime()function:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessionstrings,"Code:
time(timeframe, session, timezone) → series inttime(timeframe, session) → series int",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessionstrings,"Here, we usetime()with asessionargument to display the market’s openinghighandlowvalues on an intraday chart:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessionstrings,,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessionstrings,Note that:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Sessionstates,"Three built-in variables allow you to distinguish the type of session
the current bar belongs to. They are only helpful on intraday
timeframes:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,"When your TradingView account provides access to extended sessions, you
can choose to see their bars with the “Settings/Symbol/Session” field.
There are two types of sessions:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,"Scripts using therequest.security()function to access data can return extended session data or not. This is
an example where only regular session data is fetched:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,"If you want therequest.security()call to return extended session data, you must first use theticker.new()function to build the first argument of therequest.security()call:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,"Note that the previous chart’s gaps in the script’s plot are now
filled. Also, keep in mind that our example scripts do not produce the
background coloring on the chart; it is due to the chart’s settings
showing extended hours.",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,Theticker.new()function has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,"Code:
ticker.new(prefix, ticker, session, adjustment) → simple string",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,Where:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,Our first example could be rewritten as:,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,"If you want to use the same session specifications used for the chart’s
main symbol, omit the third argument inticker.new();
it is optional. If you want your code to declare your intention
explicitly, use thesyminfo.sessionbuilt-in variable. It holds the session type of the chart’s main
symbol:",https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,Previous,https://www.tradingview.com/pine-script-docs/concepts/sessions
Using sessions with`request.security()`,Next,https://www.tradingview.com/pine-script-docs/concepts/sessions
Introduction,"Pine Script™ Strategies are specialized scripts that simulate trades across historical and realtime bars, allowing users to backtest and forward test their trading systems. Strategy scripts have many of the same capabilities asindicatorscripts, and they provide the ability to place, modify, and cancel hypothetical orders and analyze performance results.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Introduction,"When a script uses thestrategy()function as its declaration statement, it gains access to thestrategy.*namespace, which features numerous functions and variables for simulating orders and retrieving essential strategy information. It also displays relevant information and simulated performance results in the dedicatedStrategy Testertab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
A simple strategyexample,"The following script is a simple strategy that simulates entering a long or short position when two moving averages cross. When thefastMAcrosses above theslowMA, it places a “buy” market order to enter a long position. When thefastMAcrosses below theslowMA, it places a “sell” market order to enter a short position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
A simple strategyexample,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,"To test a strategy, add it to the chart. Select a built-in or published strategy from the “Indicators, Metrics & Strategies” menu, or write a custom strategy in the Pine Editor and click the “Add to chart” option in the top-right corner:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,The script plots trade markers on the main chart pane and displays simulated performance results inside theStrategy Testertab:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,Notice!,https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,"The performance results from a strategy applied tonon-standard charts(Heikin Ashi,Renko,Line Break,Kagi,Point & Figure, andRange)do notreflect actual market conditions by default. The strategy uses the chart’ssyntheticprices in its simulation, which do not typically represent real-world market prices, leading to unrealistic strategy results.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,"Therefore, we strongly recommend usingstandardchart types when testing strategies. Alternatively, on Heikin Ashi charts, users can simulate order fills using actual prices by enabling the“Fill orders on standard OHLC”option in the strategy’spropertiesor includingfill_orders_on_standard_ohlc = truein thestrategy()declaration statement.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Applying a strategy to achart,,https://www.tradingview.com/pine-script-docs/concepts/strategies
StrategyTester,"TheStrategy Testervisualizes the hypothetical performance of a strategy script and displays its properties. To use it, add a script declared with thestrategy()function to the chart, then open the “Strategy Tester” tab. If two or more strategies are on the chart, specify which one to analyze by selecting its name in the top-left corner.",https://www.tradingview.com/pine-script-docs/concepts/strategies
StrategyTester,"After the selected script executes across the chart’s data, the Strategy Tester populates the following four tabs with relevant strategy information:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Overview,TheOverviewtab provides a quick look into a strategy’s performance over a sequence of simulated trades. This tab displays essential performance metrics and a chart with three helpful plots:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Overview,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Overview,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
PerformanceSummary,"ThePerformance Summarytab presents an in-depth summary of a strategy’s key performance metrics, organized into separate columns. The “All” column shows performance information for all simulated trades, and the “Long” and “Short” columns show relevant metrics separately for long and short trades. This view provides more detailed insights into a strategy’s overall and directional trading performance:",https://www.tradingview.com/pine-script-docs/concepts/strategies
PerformanceSummary,,https://www.tradingview.com/pine-script-docs/concepts/strategies
List ofTrades,"TheList of Tradestab chronologically lists a strategy’s simulated trades. Each item in the list displays vital information about a trade, including the dates and times of entry and exit orders, the names of the orders, the order prices, and the number of contracts/shares/lots/units. In addition, each item shows the trade’s profit or loss and the strategy’s cumulative profit, run-up, and drawdown:",https://www.tradingview.com/pine-script-docs/concepts/strategies
List ofTrades,,https://www.tradingview.com/pine-script-docs/concepts/strategies
List ofTrades,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Properties,"The “Properties” tab provides detailed information about a strategy’s configuration and the dataset that it executes across, organized into four collapsible sections:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Properties,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Brokeremulator,"TradingView uses abroker emulatorto simulate trades while running a strategy script. Unlike in real-world trading, the emulator fills a strategy’s orders exclusively using availablechart databy default. Consequently, it executes orders on historical barsafter a bar closes. Similarly, the earliest point that it can fill orders on realtime bars is after a new price tick. For more information about this behavior, see theExecution modelpage.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Brokeremulator,"Because the broker emulator only uses price data from the chart by default, it makesassumptionsabout intrabar price movement when filling orders. The emulator analyzes the opening, high, low, and closing prices of chart bars to infer intrabar activity using the following logic:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Brokeremulator,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,"Users with Premium and higher-tierplanscan override the broker emulator’s default assumptions about intrabar prices by enabling theBar Magnifierbacktesting mode. In this mode, the emulator uses data fromlower timeframesto obtain more granular information about price action within bars, allowing more precise order fills in the strategy’s simulation.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,"To enable theBar Magnifiermode, includeuse_bar_magnifier = truein thestrategy()declaration statement, or select the “Using bar magnifier” option in the “Fill orders” section of the strategy’s “Settings/Properties” tab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,"The following example script illustrates how the Bar Magnifier can enhance order-fill behavior. When thetimevalue crosses the definedorderTime, it creates “Buy” and “Exit”limit ordersat the calculatedentryPriceandexitPrice. For visual reference, the script colors the background orange when it places the orders, and it draws two horizontallinesat the order prices:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,"Because the script does not include ause_bar_magnifierargument in thestrategy()function, the broker emulator uses the defaultassumptionswhen filling the orders: that the bar’s price moved from open to high, high to low, and then low to close. Therefore, after filling the “Buy” order at the price indicated by the green line, the broker emulator inferred that the market price did not go back up to touch the red line and trigger the “Exit” order. In other words, the strategycould notenter and exit the position on the same bar according to the broker emulator’s assumptions.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,"After we enable theBar Magnifiermode, the broker emulator can access10-minutedata on the 60-minute chart instead of relying on its assumptions about hourly bars. On this timeframe, the market pricedidmove back up to the “Exit” order’s price after reaching the “Buy” order’s price in the same hour. Therefore, with the Bar Magnifier enabled in this scenario, both orders execute on the same hourly bar:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Barmagnifier,"Notice!Scripts can request a maximum of 200,000 bars from a lower timeframe. Due to this limitation, some symbols with lengthier history mightnothave intrabar coverage for their initial chart bars. Enabling the Bar Magnifier modedoes notaffect the trades on chart bars that do not have available intrabar data.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orders andtrades,"Pine Script™ strategies use orders to make trades and manage positions, similar to real-world trading. In this context, anorderis an instruction that a strategy sends to thebroker emulatorto perform a market action, and atradeis the resulting transaction after the emulator fills an order.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orders andtrades,"Let’s take a closer look at how strategy orders work and how they become trades. Every 20 bars, the following script creates a longmarket orderwithstrategy.entry()and draws alabel. It callsstrategy.close_all()on each bar from the global scope to generate a market order to close any open position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orders andtrades,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Orders andtrades,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Orders andtrades,"The blue arrows on the above chart show where the strategy entered a long position, and the purple arrows mark the bars where the strategy closed the position. Notice that thelabeldrawings appear one barbeforethe entry markers, and the entry markers appear one barbeforethe closing markers. This sequence illustrates order creation and execution in action.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orders andtrades,"By default, the earliest point thebroker emulatorfills an order is on the next available price tick, because creating and filling an order on the same tick is unrealistic. Since strategies recalculate after each bar closes by default, the next available tick where the emulator fills a generated order is at theopenof thefollowing bar. For example, when thelongConditionoccurs on bar 20, the script places an entry order to fill on the next tick, which is at the open of bar 21. When the strategy recalculates its values after bar 21 closes, it places an order to close the current position on the next tick, which is at the open of bar 22.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Ordertypes,"Pine Script™ strategies can simulate different order types to suit specific trading system needs. The main notable order types includemarket,limit,stop, andstop-limit.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Marketorders,"Amarket orderis the simplest type of order, which mostorder placement commandsgenerate by default. A market order is an instruction to buy or sell a security as soon as possible, irrespective of the price. As such, thebroker emulatoralways executes a market order on the next available tick.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Marketorders,"The example below alternates between placing a long and short market order once everylengthInputbars. When thebar_indexis divisible by2 * lengthInput, the strategy generates a long market order. Otherwise, it places a short market order when thebar_indexis divisible by thelengthInput:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Marketorders,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Marketorders,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,"Alimit orderis an instruction to buy or sell a security at a specific price or better (lower than specified for long orders, and higher than specified for short orders), irrespective of the time. To simulate a limit order in a strategy script, pass apricevalue to thelimitparameter of an applicableorder placement command.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,"When the market price reaches a limit order’s value, or crosses it in the favorable direction, thebroker emulatorfills the order at that value or a better price. When a strategy generates a limit order at aworsevalue than the current market price (higher for long orders and lower for short orders), the emulator fills the order without waiting for the market price to reach that value.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,"For example, the following script generates a long limit order 800 ticks below thecloseof the bar 100 bars before the last chart bar using thestrategy.entry()command. It draws alabelto signify the bar where the strategy created the order and alineto visualize the order’s price:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,"Notice that in the chart above, thelabeland the start of thelineoccurred several bars before the “Long” entry marker. Thebroker emulatorcould not fill the order while the market price remainedabovethelimitPricebecause such a price is aworsevalue for the long trade. After the price fell and reached thelimitPrice, the emulator filled the order mid-bar at that value.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,"If we set thelimitPriceto a valueabovethe bar’scloserather thanbelow, the broker emulator fills the order at the open of the following bar because the closing price is already a morefavorablevalue for the long trade. Here, we set thelimitPricein the script to 800 ticks above the bar’scloseto demonstrate this effect:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Limitorders,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,"Astop orderis an instruction to activate a newmarketorlimitorder when the market price reaches a specific price or a worse value (higher than specified for long orders and lower than specified for short orders). To simulate a stop order, pass a price value to thestopparameter of an applicableorder placement command.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,"When a strategy generates a stop order at abettervalue than the current market price, it activates the subsequent order without waiting for the market price to reach that value.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,"The following example callsstrategy.entry()to place a stop order 800 ticks above theclose100 bars before the last historical chart bar. It also draws alabelon the bar where it created the order and alineto display the stop price. As we see in the chart below, the strategy entered a long position immediately after the price crossed the stop level:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,"When astrategy.entry()orstrategy.order()call includes astopandlimitargument, it creates astop-limit order. Unlike a basic stop order, which triggers amarket orderwhen the current price is at thestoplevel or a worse value, a stop-limit order creates a subsequentlimit orderto fill at the specifiedlimitprice.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,"Below, we modified the previous script to simulate and visualize a stop-limit order. This script version includes the bar’slowas thelimitprice in thestrategy.entry()command. It also includes additional drawings to show where the strategy activated the subsequent limit order and to visualize the limit price.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,"In this example chart, notice how the market price reached the limit level on the next bar after the stop-limit order was created, but the strategy did not enter a position because the limit order was not yet active. After price later reached the stop level, the strategy placed the limit order, and then thebroker emulatorfilled it after the market price dropped back down to the limit level:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Stop and stop-limitorders,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Order placement andcancellation,"Thestrategy.*namespace features the following five functions that simulate the placement of orders, known asorder placement commands:strategy.entry(),strategy.order(),strategy.exit(),strategy.close(), andstrategy.close_all().",https://www.tradingview.com/pine-script-docs/concepts/strategies
Order placement andcancellation,"Additionally, the namespace includes the following two functions that cancel pending orders, known asorder cancellation commands:strategy.cancel()andstrategy.cancel_all().",https://www.tradingview.com/pine-script-docs/concepts/strategies
Order placement andcancellation,"The segments below explain these commands, their unique characteristics, and how to use them.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"Thestrategy.entry()command generatesentry orders. Its unique features help simplify opening and managing positions. This order placement command generatesmarket ordersby default. It can also createlimit,stop, andstop-limitorders with thelimitandstopparameters, as explained in theOrder typessection above.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"One of thestrategy.entry()command’s unique features is its ability toreversean open position automatically. By default, when an order fromstrategy.entry()executes while there is an open position in the opposite direction, the command automaticallyaddsthe position’s size to the new order’s size. The added quantity allows the order to close the current position and open a new position for the specified number of contracts/lots/shares/units in the new direction.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"For instance, if a strategy has an open position of 15 shares in thestrategy.longdirection and callsstrategy.entry()to place a newmarket orderin thestrategy.shortdirection, the size of the resulting transaction is the specified entry sizeplus15 shares.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"The example below demonstrates this behavior in action. When thebuyConditionoccurs once every 100 bars, the script callsstrategy.entry()withqty = 15to open a long position of 15 shares. Otherwise, when thesellConditionoccurs on every 50th bar, the script callsstrategy.entry()withqty = 5to enter a new short position of five shares. The script also highlights the chart’s background on the bars where thebuyConditionandsellConditionoccurs:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"The trade markers on the chart show thetransaction size, not the size of the resulting position. The markers above show that the transaction size was20 shareson each order fill rather than 15 for long orders and five for short orders. Sincestrategy.entry()reverses a position in the opposite direction by default, each calladdsthe open position’s size (e.g., 15 for long entries) to the new order’s size (e.g., 5 for short entries), resulting in a quantity of 20 shares on each entry after the first. Although each of thesetransactionsis 20 shares in size, the resulting positions are 5 shares for each short entry and 15 for each long entry.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"Another unique characteristic of thestrategy.entry()command is its connection to a strategy’spyramidingproperty. Pyramiding specifies the maximum number ofsuccessive entriesa strategy allows in the same direction. Users can set this property by including apyramidingargument in thestrategy()declaration statement or by adjusting the “Pyramiding” input in the script’s “Settings/Properties” tab. The default value is 1, meaning the strategy can open new positions but cannot add to them using orders fromstrategy.entry()calls.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"The following example usesstrategy.entry()to place amarket orderwhen theentryConditionoccurs on every 25th bar. The direction of the orders changes once every 100 bars, meaning every 100-bar cycle includesfourstrategy.entry()calls with the same direction. For visual reference of the conditions, the script highlights the chart’s background based on the current direction each time theentryConditionoccurs:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"Notice that although the script callsstrategy.entry()with the same direction four times within each 100-bar cycle, the strategydoes notexecute an order after every call. It cannot open more than one trade per position withstrategy.entry()because it uses the default pyramiding value of 1.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,"Below, we modified the script by includingpyramiding = 4in thestrategy()declaration statement to allow up to four successive trades in the same direction. Now, an order fill occurs after everystrategy.entry()call:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.entry()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.order()`,"Thestrategy.order()command generates abasic order. Unlike other order placement commands, which can behave differently based on a strategy’s properties and open trades, this commandignoresmost properties, such aspyramiding, and simply creates orders with the specified parameters. This command generatesmarket ordersby default. It can also createlimit,stop, andstop-limitorders with thelimitandstopparameters. Orders fromstrategy.order()can open new positions and modify or close existing ones. When a strategy executes an order from this command, the resulting market position is thenet sumof the open position and the filled order quantity.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.order()`,"The following script usesstrategy.order()calls to enter and exit positions. The strategy places a longmarket orderfor 15 units once every 100 bars. On every 25th bar that is not a multiple of 100, it places a short market order for five units. The script highlights the background to signify where the strategy places a “buy” or “sell” order:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.order()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.order()`,"This particular strategy never simulates ashort position. Unlike thestrategy.entry()command,strategy.order()does notautomaticallyreverseopen positions. After filling a “buy” order, the strategy has an open long position of 15 units. The three subsequent “sell” ordersreducethe position by five units each, and 15 - 5 * 3 = 0. In other words, the strategy opens a long position on every 100th bar and gradually reduces the size to 0 using three successive short orders. If we usedstrategy.entry()instead of thestrategy.order()command in this example, the strategy would alternate between entering long and short positions of 15 and five units, respectively.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Thestrategy.exit()command generatesexit orders. It features several unique behaviors that link to open trades, helping to simplify closing market positions and creating multi-level exits withtake-profit,stop-loss, andtrailing stoporders.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Unlike other order placement commands, which can generate asingle orderper call, each call tostrategy.exit()can producemore than onetype of exit order, depending on its arguments. Additionally, a single call to this command can generate exit orders formultiple entries, depending on the specifiedfrom_entryvalue and the strategy’s open trades.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"The most basic use of thestrategy.exit()command is the placement oflimit ordersto trigger exits after earning enough money (take-profit),stop ordersto trigger exits after losing too much money (stop-loss), or both (bracket).",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Four parameters determine the prices of the command’s take-profit and stop-loss orders:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"When astrategy.exit()call includes arguments for the relativeandabsolute parameters defining take-profit or stop-loss levels (profitandlimitorlossandstop), it creates orders only at the levels expected to trigger exitsfirst.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"For instance, if theprofitdistance is 19 ticks and thelimitlevel is 20 ticks past the entry price in the favorable direction, thestrategy.exit()command places a take-profit orderprofitticks past the entry price because the market price will move that distance before reaching thelimitvalue. In contrast, if theprofitdistance is 20 ticks and thelimitlevel is 19 ticks past the entry price in the favorable direction, the command places a take-profit order at thelimitlevel because the price will reach that value first.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Notice!Thestrategy.exit()command’slimitandstopparametersdo notbehave the same as thelimitandstopparameters of thestrategy.entry()andstrategy.order()commands. Callingstrategy.entry()orstrategy.order()withlimitandstoparguments creates a singlestop-limit order. In contrast, callingstrategy.exit()with both arguments createstwo exit orders: a take-profit order at thelimitprice and a stop-loss order at thestopprice.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"The following example creates exit bracket (take-profit and stop-loss) orders with thestrategy.exit()command. When thebuyConditionoccurs, the script callsstrategy.entry()to place a “buy”market order. It also callsstrategy.exit()withlimitandstoparguments to create a take-profit order at thelimitPriceand a stop-loss order at thestopPrice. The script plots thelimitPriceandstopPricevalues on the chart to visualize the exit order prices:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"When astrategy.exit()call includes afrom_entryargument, the resulting exit orders only apply to existing entry orders that have a matching ID. If the specifiedfrom_entryvalue does not match the ID of any entry in the current position, the commanddoes notcreate any exit orders.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Below, we changed thefrom_entryargument of thestrategy.exit()call in our previous script to “buy2”, which means it creates exit orders only for open trades with the “buy2” entry ID. This version does not placeanyexit orders because it does not create any entry orders with the “buy2” ID:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Strategies can use more than one call tostrategy.exit()to create successivepartialexit orders for the same entry ID, helping to simplify the formation of multi-level exit strategies. To use multiplestrategy.exit()calls to exit from an open trade, include aqtyorqty_percentargument in each call to specify how much of the traded quantity to close. If the sum of the exit order sizes exceeds the open position, the strategy automaticallyreducestheir sizes to match the position.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"This example demonstrates a simple strategy that creates two partial exit order brackets for an entry ID. When thebuyConditionoccurs, the script places a “buy”market orderfor two shares withstrategy.entry(), and it creates “exit1” and “exit2” brackets using two calls tostrategy.exit(). The first call uses aqtyof 1, and the second uses aqtyof 3:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"As we can see from the trade markers on the chart above, the strategy first executes the “exit1” take-profit or stop-loss order to reduce the open position by one share, leaving one remaining share in the position. However, we specified a size ofthree sharesfor the “exit2” order bracket, which exceeds the remaining position. Rather than using this specified quantity, the strategy automaticallyreducesthe “exit2” orders to one share, allowing it to close the position successfully.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"When creating multiple exit orders withdifferentstrategy.exit()calls, it’s crucial to note that the orders from each callreservea portion of the open position. The orders from onestrategy.exit()callcannotexit the portion of a position that a previous call already reserved.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"For example, this script generates a “buy” entry order for 20 shares with astrategy.entry()call and “limit” and “stop” exit orders with two separate calls tostrategy.exit()100 bars before the last chart bar. We specified a quantity of 19 shares for the “limit” order and 20 for the “stop” order:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Users unfamiliar with thestrategy.exit()command’s unique behaviors might expect this strategy to close the entire market position if it fills the “stop” order before the “limit” order. However, the trade markers in the chart below show that the “stop” order only reduces the position byone share. Thestrategy.exit()call for the “limit” order executes first in the code, reserving 19 shares of the open position for closure with that order. This reservation leaves only one share available for the “stop” order to close, regardless of when the strategy fills it:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"One of thestrategy.exit()command’s key features is its ability to createtrailing stops, i.e., stop-loss orders that trail behind the market price by a specified amount whenever it moves to a better value in the favorable direction (upward for long positions and downward for short positions).",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"This type of exit order has two components: anactivation leveland atrail offset. The activation level is the value the market price must cross to activate the trailing stop calculation, and the trail offset is the distance the activated stop follows behind the price as it reaches successively better values.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Threestrategy.exit()parameters determine the activation level and trail offset of a trailing stop order:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"To create and activate a trailing stop order, astrategy.exit()call must specify atrail_offsetargument and either atrail_priceortrail_pointsargument. If the call contains bothtrail_priceandtrail_pointsarguments, the command uses the level expected to activate the stopfirst. For instance, if thetrail_pointsdistance is 50 ticks and thetrail_pricevalue is 51 ticks past the entry price in the favorable direction, thestrategy.exit()command uses thetrail_pointsvalue to set the activation level because the market price will move that distancebeforereaching thetrail_pricelevel.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"The example below demonstrates how a trailing stop order works in detail. The strategy places a “Long”market orderwith thestrategy.entry()command 100 bars before the last chart bar, and it callsstrategy.exit()withtrail_priceandtrail_offsetarguments on the following bar to create a trailing stop. The script useslines,labels, and aplotto visualize the trailing stop’s behavior.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"The greenlineon the chart shows the level the market price must reach to activate the trailing stop order. After the price reaches this level from below, the script uses a blueplotto display the trailing stop’s price. Each time the market price reaches a new high after activating the trailing stop, the stop’s priceincreasesto maintain a distance oftrailOffsetInputticks from the best value. The exit orderdoes notchange its price level when the price decreases or does not reach a new high. Eventually, the market price crosses below the trailing stop, triggering an exit:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"A single call to thestrategy.exit()command can generate exit orders formore than oneentry in an open position, depending on the call’sfrom_entryvalue.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"If an open position consists of two or more entries with the same ID, a single call tostrategy.exit()with that ID as thefrom_entryargument places exit orders for each corresponding entry created before or on the bar where the call occurs.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"For example, this script periodically callsstrategy.entry()on two consecutive bars to enter and add to a long position. Both calls use “buy” as theidargument. After creating the second entry, the script callsstrategy.exit()once with “buy” as itsfrom_entryargument to generate separate exit orders for each entry with that ID. When the market price reaches thetakeProfitorstopLossvalue, thebroker emulatorfillstwoexit orders and closes the position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"A singlestrategy.exit()call can also generate exit orders forallentries in an open position, irrespective of entry ID, when it does not include afrom_entryargument.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Here, we changed thestrategy.entry()instance in the above script to create an entry order with a distinct ID on each call, and we removed thefrom_entryargument from thestrategy.exit()call. Since this version does not specify which entries the exit orders apply to, thestrategy.exit()call creates orders foreveryentry in the position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"It’s crucial to note that a call tostrategy.exit()without afrom_entryargumentpersistsand creates exit orders for all open trades in a position, regardless ofwhenthe entries occur. This behavior can affect strategies that manage positions with multiple entries or exits. When a strategy has an open position and callsstrategy.exit()on any bar without specifying afrom_entryID, it generates exit orders for each entry createdbeforeor on that bar, and it continues to generate exit orders for subsequent entriesafterthat bar until the position closes.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Let’s explore this behavior and how it works. The script below creates a long entry order withstrategy.entry()on each bar within a user-specified time range, and it callsstrategy.exit()without afrom_entryargument onone barwithin that range to generate exit orders foreveryentry in the open position. The exit command uses alossvalue of 0, which means an exit order fills each time the market price is not above an entry order’s price.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"The script prompts users to select three points before it starts its calculations. The first point specifies when order creation begins, the second determines when the singlestrategy.exit()call occurs, and the third specifies when order creation stops:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"We can observe the uniquestrategy.exit()behavior in this example by comparing the code itself with the script’s chart outputs. The script callsstrategy.exit()one time, only on the bar with the bluelabel. However, this single call placed exit orders for every entrybeforeor on that bar and continued placing exit orders for all entriesafterthat bar. This behavior occurs becausestrategy.exit()has no way to determine when to stop placing orders if it does not link to entries with a specific ID. In this case, the command only ceases to create new exit orders after the position fully closes.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"The above script would exhibit different behavior if we included afrom_entryargument in thestrategy.exit()call. When a call to this command specifies afrom_entryID, it only applies to entries with that ID which the strategy createdbeforeoronthe bar of the call. The command does not place exit orders for subsequent entries createdafterthat bar in that case, even ones with the same ID.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,"Here, we addedfrom_entry = ""Entry""to our script’sstrategy.exit()call, meaning it only produces exit orders for entries with the “Entry” ID. Only 17 exits occur this time, each corresponding to an entry order created before or on the bar with the bluelabel. The call does not affect any entries that the strategy createsafterthat bar:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.exit()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,"Thestrategy.close()andstrategy.close_all()commands generate orders to exit from an open position. Unlikestrategy.exit(), which createsprice-basedexit orders (e.g.,stop-loss), these commands generatemarket ordersthat thebroker emulatorfills on the next available tick, irrespective of the price.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,The example below demonstrates a simple strategy that places a “buy” entry order withstrategy.entry()once every 50 bars and amarket orderto close the long position withstrategy.close()25 bars afterward:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,"Notice that thestrategy.close()call in this script uses “buy” as its requiredidargument. Unlikestrategy.exit(), this command’sidparameter specifies theentry IDof an open trade. Itdoes notrepresent the ID of the resulting exit order. If a market position consists of multiple open trades with the same entry ID, a singlestrategy.close()call with that ID as itsidargument generates a singlemarket orderto exit from all of them.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,"The following script creates a “buy” order withstrategy.entry()once every 25 bars, and it callsstrategy.close()with “buy” as itsidargument to close all open trades with that entry ID once every 100 bars. The market order fromstrategy.close()closes the entire position in this case because every open trade has the same “buy” entry ID:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,Thestrategy.close_all()command generates amarket orderto exit from the open position thatdoes notlink to any specific entry ID. This command is helpful when a strategy needs to exit as soon as possible from a position consisting of multiple open trades with different entry IDs.,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,"The script below places “A”, “B”, and “C” entry orders sequentially based on the number ofopen trades, and then it callsstrategy.close_all()to create a single order that closes the entire position on the next bar:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.close()` and`strategy.close_all()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"Thestrategy.cancel()andstrategy.cancel_all()commands allow strategies to cancelunfilledorders before thebroker emulatorprocesses them. These order cancellation commands are most helpful when working withprice-based orders, including all orders fromstrategy.exit()calls and the orders fromstrategy.entry()andstrategy.order()calls that uselimitorstoparguments.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"Thestrategy.cancel()command has a requiredidparameter, which specifies the ID of the entry or exit orders to cancel. Thestrategy.cancel_all()command does not have such a parameter because it cancelsallunfilled orders, regardless of ID.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"The following strategy places a “buy”limit order500 ticks below the closing price 100 bars before the last chart bar withstrategy.entry(), and it cancels the order on the next bar withstrategy.cancel(). The script highlights the chart’s background to signify when it places and cancels the “buy” order, and it draws a horizontallineat the order’s price. As we see below, our example chart shows no entry marker when the market price crosses the horizontal line because the strategy already cancels the order (when the chart’s background is orange) before it reaches that level:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"Thestrategy.cancel()command affectsallunfilled orders with a specified ID. It does nothing if the specifiedidrepresents the ID of an order that does not exist. When there is more than one unfilled order with the specified ID, the command cancelsallof them at once.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"Below, we’ve modified the previous script to place a “buy” limit order on three consecutive bars, starting 100 bars before the last chart bar. After placing all three orders, the strategy cancels them usingstrategy.cancel()with “buy” as theidargument, resulting in nothing happening when the market price reaches any of the order prices (horizontallines):",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"Thestrategy.cancel()andstrategy.cancel_all()commands can cancel orders of any type, includingmarket orders. However, it is important to note that either command can cancel a market order only if its call occurs on thesamescript execution as the order placement command. If the call happens after that point, it hasno effectbecause thebroker emulatorfills market orders on thenext available tick.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,"This example places a “buy” market order 100 bars before the last chart bar withstrategy.entry(), then it attempts to cancel the order on the next bar withstrategy.cancel_all(). The cancellation commanddoes notaffect the “buy” order because the broker emulator fills the order on the next bar’sopening tick, which occursbeforethe script evaluates thestrategy.cancel_all()call:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.cancel()` and`strategy.cancel_all()`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Positionsizing,Pine Script™ strategies feature two ways to control the sizes of the orders that open and manage positions:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Positionsizing,"The following example usesstrategy.entry()calls with differentqtyvalues for long and short trades. When the current bar’slowequals thelowestvalue, the script places a “Buy” order to enter a long position oflongAmountunits. Otherwise, when thehighequals thehighestvalue, it places a “Sell” order to enter a short position ofshortAmountunits:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Positionsizing,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Positionsizing,"Notice that although we’ve includeddefault_qty_typeanddefault_qty_valuearguments in thestrategy()declaration statement, the strategydoes notuse this default setting to size its orders because the specifiedqtyin the entry commands takes precedence. If we want to use the default size, we mustremovetheqtyarguments from thestrategy.entry()calls or set their values tona.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Positionsizing,"Here, we edited the previous script by includingternaryexpressions for theqtyarguments in bothstrategy.entry()calls that replace input values of 0 withna. If the specifiedlongAmountorshortAmountis 0, which is what we set as the new default, the corresponding entry orders use the strategy’s default order size instead, as we see below:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Positionsizing,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,"By default, strategies close a market position using theFirst In, First Out (FIFO)method, which means that any exit order closes or reduces the position starting with thefirstopen trade, even if the exit command specifies the entry ID of adifferentopen trade. To override this default behavior, includeclose_entries_rule = ""ANY""in thestrategy()declaration statement.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,"The following example places “Buy1” and “Buy2” entry orders sequentially, starting 100 bars before the latest chart bar. When the position size is 0, it callsstrategy.entry()to place the “Buy1” order for five units. After the strategy’s position size matches the size of that order, it usesstrategy.entry()to place the “Buy2” order for ten units. The strategy then creates “bracket” exit ordersfor both entriesusing a singlestrategy.exit()call without afrom_entryargument. For visual reference, the script plots thestrategy.position_sizevalue in a separate pane:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,"Each time the market price triggers an exit order, the above script exits from the open position, starting with theoldestopen trade. This FIFO behavior applies even if we explicitly specify an exit from “Buy2” before “Buy1” in the code.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,"The script version below callsstrategy.close()with “Buy2” as itsidargument, and it includes “Buy1” as thefrom_entryargument in thestrategy.exit()call. Themarket orderfromstrategy.close()executes on the next available tick, meaning thebroker emulatorfills itbeforethetake-profitandstop-lossorders fromstrategy.exit():",https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,"The market order from the script’sstrategy.close()call is for 10 units because it links to the open trade with the “Buy2” entry ID. A user might expect this strategy to close that trade completely when the order executes. However, the “List of Trades” tab shows that five units of the order go toward closing the “Buy1” tradefirstbecause it is the oldest, and the remaining five units closehalfof the “Buy2” trade. After that, the “bracket” orders from thestrategy.exit()call close the rest of the position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Closing a marketposition,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
OCAgroups,"One-Cancels-All (OCA)groups allow a strategy to fully or partiallycancelspecific orders when thebroker emulatorexecutes another order from the same group. To assign an order to an OCA group, include anoca_nameargument in the call to theorder placement command. Thestrategy.entry()andstrategy.order()commands also allow programmers to specify anOCA type, which defines whether a strategycancels,reduces, ordoes not modifythe order after executing other orders.",https://www.tradingview.com/pine-script-docs/concepts/strategies
OCAgroups,"Notice!All order placement commands that issue orders for the same OCA group must specify the same group nameandOCA type. If two commands have the sameoca_namebutdifferentoca_typevalues, the strategy considers them to be fromtwo distinct groups. In other words, an OCA groupcannotmix thestrategy.oca.cancel,strategy.oca.reduce, andstrategy.oca.noneOCA types.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.cancel`,"When an order placement command usesstrategy.oca.cancelas itsoca_typeargument, the strategy completelycancelsthe resulting order if another order from the same OCA group executes first.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.cancel`,"To demonstrate how this OCA type impacts a strategy’s orders, consider the following script, which places orders when thema1value crosses thema2value. If thestrategy.position_sizeis 0 when the cross occurs, the strategy places twostop orderswithstrategy.order()calls. The first is a long order at the bar’shigh, and the second is a short order at the bar’slow. If the strategy already has an open position during the cross, it callsstrategy.close_all()to close the position with amarket order:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.cancel`,"Depending on the price action, the strategy might fillbothstop orders before creating the closing market order. In that case, the strategy exits the position without evaluatingstrategy.close_all()because both orders have the same size. We see this behavior in the chart below, where the strategy alternated between executing “Long” and “Short” orders a few times without executing an order fromstrategy.close_all():",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.cancel`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.cancel`,"To eliminate scenarios where the strategy fills the “Long” and “Short” orders before evaluating thestrategy.close_all()call, we can instruct it tocancelone of the orders after it executes the other. Below, we included “Entry” as theoca_nameargument andstrategy.oca.cancelas theoca_typeargument in bothstrategy.order()calls. Now, after the strategy executes either the “Long” or “Short” order, it cancels the other order and waits forstrategy.close_all()to close the position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.cancel`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,"When an order placement command usesstrategy.oca.reduceas its OCA type, the strategydoes notcancel the resulting order entirely if another order with the same OCA name executes first. Instead, itreducesthe order’s size by the filled number of contracts/shares/lots/units, which is particularly useful for custom exit strategies.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,"The following example demonstrates along-onlystrategy that generates a single stop-loss order and two take-profit orders for each new entry. When a faster moving average crosses over a slower one, the script callsstrategy.entry()withqty = 6to create an entry order, and then it uses threestrategy.order()calls to create astop orderat thestopprice and twolimit ordersat thelimit1andlimit2prices. Thestrategy.order()call for the “Stop” order usesqty = 6, and the two calls for the “Limit 1” and “Limit 2” orders both useqty = 3:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,"After adding this strategy to the chart, we see it does not work as initially intended. The problem with this script is that the orders fromstrategy.order()do notbelong to an OCA group by default (unlikestrategy.exit(), whose orders automatically belong to astrategy.oca.reduceOCA group). Since the strategy does not assign thestrategy.order()calls to any OCA group, it does not reduce any unfilled stop or limit orders after executing an order. Consequently, if thebroker emulatorfills the stop order and at least one of the limit orders, the traded quantityexceedsthe open long position, resulting in an openshortposition:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,"For our long-only strategy to work as we intended, we must instruct it toreducethe sizes of the unfilled stop/limit orders after one of them executes to prevent selling a larger quantity than the open long position.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,"Below, we specified “Bracket” as theoca_nameandstrategy.oca.reduceas theoca_typein all the script’sstrategy.order()calls. These changes tell the strategy to reduce the sizes of the orders in the “Bracket” group each time the broker emulator fills one of them. This version of the strategy never simulates a short position because the total size of its filled stop and limit orders neverexceedsthe long position’s size:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.reduce`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`strategy.oca.none`,"When an order placement command usesstrategy.oca.noneas itsoca_typevalue, all orders from that command executeindependentlyof any OCA group. This value is the defaultoca_typefor thestrategy.order()andstrategy.entry()commands.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,"Pine Script™ strategies can use different currencies in their calculations than the instruments they simulate trades on. Programmers can specify a strategy’saccount currencyby including acurrency.*variable as thecurrencyargument in thestrategy()declaration statement. The default value iscurrency.NONE, meaning the strategy uses the same currency as the current chart (syminfo.currency). Script users can change the account currency using the “Base currency” input in the script’s “Settings/Properties” tab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,"When a strategy script uses an account currency that differs from the chart’s currency, it uses theprevious daily valueof a corresponding currency pair from the most popular exchange to determine the conversion rate. If no exchange provides the rate directly, it derives the rate using aspread symbol. The strategy multiplies all monetary values, including simulated profits/losses, by the determined cross rate to express them in the account currency. To retrieve the rate that a strategy uses to convert monetary values, callrequest.currency_rate()withsyminfo.currencyas thefromargument andstrategy.account_currencyas thetoargument.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,The following example demonstrates how currency conversion affects a strategy’s monetary values and how a strategy’s cross-rate calculations match those thatrequest.*()functions use.,https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,"On each of the latest 500 bars, the strategy places an entry order withstrategy.entry(), and it places atake-profitandstop-lossorder one tick away from the entry price withstrategy.exit(). The size of each entry order is1.0 / syminfo.mintick, rounded to the nearest tick, which means that the profit/loss of each closed trade is equal toone pointin the chart’squote currency. We specifiedcurrency.EURas the account currency in thestrategy()declaration statement, meaning the strategy multiplies all monetary values by a cross rate to express them in Euros.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,"The script calculates the absolute change in the ratio of the strategy’snet profitto the symbol’spoint valueto determine the value ofone unitof the chart’s currency in Euros. It plots this value alongside the result from arequest.currency_rate()call that usessyminfo.currencyandstrategy.account_currencyas thefromandtoarguments. As we see below, both plots align, confirming that strategies andrequest.*()functions use thesamedaily cross-rate calculations:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Currency,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Altering calculationbehavior,"Strategy scripts execute across all available historical chart bars and continue to execute on realtime bars as new data comes in. However, by default, strategies only recalculate their values after a barcloses, even on realtime bars, and the earliest point that thebroker emulatorfills the orders a strategy places on the close one bar is at theopenof the following bar.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Altering calculationbehavior,"Users can change these behaviors with thecalc_on_every_tick,calc_on_order_fills, andprocess_orders_on_closeparameters of thestrategy()declaration statement or the corresponding inputs in the “Recalculate” and “Fill orders” sections of the script’s “Settings/Properties” tab. The sections below explain how these settings affect a strategy’s calculations.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,"Thecalc_on_every_tickparameter of thestrategy()function determines the frequency of a strategy’s calculations onrealtime bars. When this parameter’s value istrue, the script recalculates on eachnew tickin the realtime data feed. Its default value isfalse, meaning the script only executes on a realtime bar after it closes. Users can also toggle this recalculation behavior with the “On every tick” input in the script’s “Settings/Properties” tab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,"Enabling this setting can be useful in forward testing because it allows a strategy to use realtime price updates in its calculations. However, itdoes notaffect the calculations on historical bars because historical data feedsdo notcontain complete tick data: the broker emulator considers each historical bar to have only four ticks (open, high, low, and close). Therefore, users should exercise caution and understand the limitations of this setting. If enabling calculation on every tick causes a strategy to behavedifferentlyon historical and realtime bars, the strategy willrepaintafter the user reloads it.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,"The following example demonstrates how recalculation on every tick can cause strategy repainting. The script usesstrategy.entry()calls to place a long entry order each time theclosereaches itshighestvalue and a short entry order each time theclosereaches itslowestvalue. Thestrategy()declaration statement includescalc_on_every_tick = true, meaning that on realtime bars, it can recalculate and place orders on new price updatesbeforea bar closes:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,"After applying the script to our chart and letting it run on several realtime bars, we see the following output:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,"The script placed a “Buy” order oneach tickwhere theclosewas at thehighestvalue, which happenedmore than onceon each realtime bar. Additionally, thebroker emulatorfilled eachmarket orderat the current realtime price rather than strictly at the open of the following chart bar.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,"After we reload the chart, we see that the strategychangedits behavior andrepaintedits results on those bars. This time, the strategy placed onlyone“Buy” order for eachclosed barwhere the condition was valid, and the broker emulator filled each order at the open of the following bar. It did not generate multiple entries per bar because what were previously realtime bars becamehistoricalbars, whichdo nothold complete tick data:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_every_tick`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,"Thecalc_on_order_fillsparameter of thestrategy()function enables a strategy to recalculate immediately after anorder fills, allowing it to use more granular information and place additional orders without waiting for a bar to close. Its default value isfalse, meaning the strategy does not allow recalculation immediately after every order fill. Users can also toggle this behavior with the “After order is filled” input in the script’s “Settings/Properties” tab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,"Enabling this setting can provide a strategy script with additional data that would otherwise not be available until after a bar closes, such as the current average price of a simulated position on an open bar.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,The example below shows a simple strategy that creates a “Buy” order withstrategy.entry()whenever thestrategy.position_sizeis 0. The script usesstrategy.position_avg_priceto calculate price levels for thestrategy.exit()call’s stop-loss and take-profit orders that close the position.,https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,"We’ve includedcalc_on_order_fills = truein thestrategy()declaration statement, meaning that the strategy recalculates each time thebroker emulatorfills a “Buy” or “Exit” order. Each time an “Exit” order fills, thestrategy.position_sizereverts to 0, triggering a new “Buy” order. The broker emulator fills the “Buy” order on the next tick at one of the bar’s OHLC values, and then the strategy uses the recalculatedstrategy.position_avg_pricevalue to determine new “Exit” order prices:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,"It’s important to note that enablingcalc_on_order_fillscan produce unrealistic strategy results in some cases because thebroker emulatormay assume order-fill prices that arenotobtainable in real-world trading. Therefore, users should exercise caution and carefully examine their strategy logic when allowing recalculation on order fills.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,"For example, the following script places a “Buy” order after each new order fill and bar close over the most recent 25 historical bars. The strategy simulatesfourentries per bar because the broker emulator considers each historical bar to havefour ticks(open, high, low, and close). This behavior is unrealistic because it is not typically possible to fill an order at a bar’sexacthigh or low price:",https://www.tradingview.com/pine-script-docs/concepts/strategies
`calc_on_order_fills`,,https://www.tradingview.com/pine-script-docs/concepts/strategies
`process_orders_on_close`,"By default, strategies simulate orders at the close of each bar, meaning that the earliest opportunity to fill the orders and execute strategy calculations and alerts is on the opening of the following bar. Programmers can change this behavior to process orders on theclosing tickof each bar by settingprocess_orders_on_closetotruein thestrategy()declaration statement. Users can set this behavior by changing the “Fill Orders/On Bar Close” setting in the “Settings/Properties” tab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`process_orders_on_close`,"This behavior is most useful when backtesting manual strategies in which traders exit from a position before a bar closes, or in scenarios where algorithmic traders in non-24x7 markets set up after-hours trading capability so that alerts sent after close still have hope of filling before the following day.",https://www.tradingview.com/pine-script-docs/concepts/strategies
`process_orders_on_close`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Simulating tradingcosts,"Strategy performance reports are more relevant and meaningful when they include potential real-world trading costs. Without modeling the potential costs associated with their trades, traders may overestimate a strategy’s historical profitability, potentially leading to suboptimal decisions in live trading. Pine Script™ strategies include inputs and parameters for simulating trading costs in performance results.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Commission,"Commission is the fee a broker/exchange charges when executing trades. Commission can be a flat fee per trade or contract/share/lot/unit, or a percentage of the total transaction value. Users can set the commission properties of their strategies by includingcommission_typeandcommission_valuearguments in thestrategy()function, or by setting the “Commission” inputs in the “Properties” tab of the strategy settings.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Commission,"The following script is a simple strategy that simulates a “Long” position of 2% of equity whencloseequals thehighestvalue over thelength, and closes the trade when it equals thelowestvalue:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Commission,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Commission,"The results in theStrategy Testershow that the strategy had a positive equity growth of 17.61% over the testing range. However, the backtest results do not account for fees the broker/exchange may charge. Let’s see what happens to these results when we include a small commission on every trade in the strategy simulation. In this example, we’ve includedcommission_type = strategy.commission.percentandcommission_value = 1in thestrategy()declaration, meaning it will simulate a commission of 1% on all executed orders:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Commission,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Commission,"As we can see in the example above, after applying a 1% commission to the backtest, the strategy simulated a significantly reduced net profit of only 1.42% and a more volatile equity curve with an elevated max drawdown. These results highlight the impact that commission can have on a strategy’s hypothetical performance.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"In real-life trading, a broker/exchange may fill orders at slightly different prices than a trader intended, due to volatility, liquidity, order size, and other market factors, which can profoundly impact a strategy’s performance. The disparity between expected prices and the actual prices at which the broker/exchange executes trades is what we refer to asslippage. Slippage is dynamic and unpredictable, making it impossible to simulate precisely. However, factoring in a small amount of slippage on each trade during a backtest or forward test might help the results better align with reality. Users can model slippage in their strategy results, sized as a fixed number ofticks, by including aslippageargument in thestrategy()declaration statement or by setting the “Slippage” input in the “Settings/Properties” tab.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"The following example demonstrates how simulating slippage affects the fill prices ofmarket ordersin a strategy test. The script below places a “Buy” market order of 2% equity when the market price is above a rising EMA and closes the position when the price dips below the EMA while it’s falling. We’ve includedslippage = 20in thestrategy()function, which declares that the price of each simulated order will slip 20 ticks in the direction of the trade.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"The script usesstrategy.opentrades.entry_bar_index()andstrategy.closedtrades.exit_bar_index()to get theentryIndexandexitIndex, which it uses to obtain thefillPriceof the order. When the bar index is at theentryIndex, thefillPriceis the firststrategy.opentrades.entry_price()value. At theexitIndex,fillPriceis thestrategy.closedtrades.exit_price()value from the last closed trade. The script plots the expected fill price along with the simulated fill price after slippage to visually compare the difference:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"Some traders might assume that they can avoid the adverse effects of slippage by usinglimit orders, as unlikemarket orders, they cannot execute at a worse price than the specified value. However, even if the market price reaches an order’s price, there’s a chance that a limit order might not fill, depending on the state of the real-life market, because limit orders can only fill if a security has sufficient liquidity and price action around their values. To account for the possibility ofunfilledorders in a backtest, users can specify thebacktest_fill_limits_assumptionvalue in the declaration statement or use the “Verify price for limit orders” input in the “Settings/Properties” tab. This setting instructs the strategy to fill limit orders only after the market price moves a defined number of ticks past the order prices.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"The following example places a limit order of 2% equity at a bar’shlcc4price when thehighis thehighestvalue over the pastlengthbars and there are no pending entries. The strategy closes the market position and cancels all orders after thelowis thelowestvalue. Each time the strategy triggers an order, it draws a horizontal line at thelimitPrice, which it updates on each bar until closing the position or canceling the order:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"By default, the script assumes that all limit orders are guaranteed to fill when the market price reaches their values, which is often not the case in real-life trading. Let’s add price verification to our limit orders to account for potentially unfilled ones. In this example, we’ve includedbacktest_fill_limits_assumption = 3in thestrategy()function call. As we can see, using limit verification omits some simulated order fills and changes the times of others, because the entry orders can now only fill after the price exceeds the limit price bythree ticks:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Slippage and unfilledlimits,"Notice!Limit verification can change thetimesof some order fills. However, strategies still execute verified limit orders at the sameprices. This “time-warping” effect is a compromise that preserves the prices of limit orders, but it can cause a strategy to fill the orders at times that wouldn’t necessarily be possible in the real world. Therefore, users should exercise caution with this setting and understand its limitations when analyzing strategy results.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"Designing a strategy that performs well, especially in a broad class of markets, is a challenging task. Most strategies are designed for specific market patterns/conditions and can produce uncontrolled losses when applied to other data. Therefore, a strategy’s risk management behavior can be critical to its performance. Programmers can set risk management criteria in their strategy scripts using thestrategy.risk.*()commands.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"Strategies can incorporate any number of risk management criteria in any combination. All risk management commands executeon every tick and order execution event, regardless of any changes to the strategy’s calculation behavior. There is no way to deactivate any of these commands on specific script executions. Irrespective of a risk management command’s location, italwaysapplies to the strategy unless the programmer removes the call from the code.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,strategy.risk.allow_entry_in(),https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"This command overrides the market direction allowed for allstrategy.entry()commands in the script. When a user specifies the trade direction with thestrategy.risk.allow_entry_in()function (e.g.,long) the strategy enters trades only in that direction. If a script calls an entry command in the opposite direction while there’s an open market position, the strategy simulates amarket ordertoclosethe position.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,strategy.risk.max_cons_loss_days(),https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"This command cancels all pending orders, closes any open market position, and stops all additional trade actions after the strategy simulates a defined number of trading days with consecutive losses.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,strategy.risk.max_drawdown(),https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"This command cancels all pending orders, closes any open market position, and stops all additional trade actions after the strategy’s drawdown reaches the amount specified in the function call.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,strategy.risk.max_intraday_filled_orders(),https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"This command specifies the maximum number of filled orders per trading day (or per chart bar if the timeframe is higher than daily). If the strategy creates more orders than  the maximum, the command cancels all pending orders, closes any open market position, and halts trading activity until the end of the current session.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,strategy.risk.max_intraday_loss(),https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"This command controls the maximum loss the strategy tolerates per trading day (or per chart bar if the timeframe is higher than daily). When the strategy’s losses reach this threshold, it cancels all pending orders, closes the open market position, and stops all trading activity until the end of the current session.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,strategy.risk.max_position_size(),https://www.tradingview.com/pine-script-docs/concepts/strategies
Riskmanagement,"This command specifies the maximum possible position size when usingstrategy.entry()commands. If the quantity of an entry command results in a market position that exceeds this threshold, the strategy reduces the order quantity so that the resulting position does not exceed the limit.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,"Marginis the minimum percentage of a market position that a trader must hold in their account as collateral to receive and sustain a loan from their broker to achieve their desiredleverage. Themargin_longandmargin_shortparameters of thestrategy()declaration statement and the “Margin for long/short positions” inputs in the “Properties” tab of the script settings specify margin percentages for long and short positions. For example, if a trader sets the margin for long positions to 25%, they must have enough funds to cover 25% of an open long position. This margin percentage also means the trader can potentially spend up to 400% of their equity on their trades.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,"If a strategy’s simulated funds cannot cover the losses from a margin trade, the broker emulator triggers amargin call, which forcibly liquidates all or part of the open position. The exact number of contracts/shares/lots/units that the emulator liquidates isfour timesthe amount required to cover the loss, which helps prevent constant margin calls on subsequent bars. The emulator determines liquidated quantity using the following algorithm:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,"To examine this calculation in detail, let’s add the built-in Supertrend Strategy to the NASDAQ:TSLA
 chart on the “1D” timeframe and set the “Order size” to 300% of equity and the “Margin for long positions” to 25% in the “Properties” tab of the strategy settings:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,"The first entry happened at the bar’s opening price on 16 Sep 2010. The strategy bought 682,438 shares (Position Size) at 4.43 USD (Entry Price). Then, on 23 Sep 2010, when the price dipped to 3.9 (Current Price), the emulator forcibly liquidated 111,052 shares with a margin call. The calculations below show how the broker emulator determined this amount for the margin call event:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,"Code:
Money spent: 682438 * 4.43 = 3023200.34MVS: 682438 * 3.9 = 2661508.2Open Profit: −361692.14Equity: 1000000 + 0 − 361692.14 = 638307.86Margin Ratio: 25 / 100 = 0.25Margin: 2661508.2 * 0.25 = 665377.05Available Funds: 638307.86 - 665377.05 = -27069.19Money Lost: -27069.19 / 0.25 = -108276.76Cover Amount: TRUNCATE(-108276.76 / 3.9) = TRUNCATE(-27763.27) = -27763Margin Call Size: -27763 * 4 = - 111052",https://www.tradingview.com/pine-script-docs/concepts/strategies
Margin,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,"Numerous built-ins within thestrategy.*namespace and itssub-namespacesprovide convenient solutions for programmers to use a strategy’s trade and performance information, including data shown in theStrategy Tester, directly within their code’s logic and calculations.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,"Severalstrategy.*variables hold fundamental information about a strategy, including its starting capital, equity, profits and losses, run-up and drawdown, and open position:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,"Additionally, the namespace features multiple variables that hold general trade information, such as the number of open and closed trades, the number of winning and losing trades, average trade profits, and maximum trade sizes:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,"Programmers can use these variables to display relevant strategy information on their charts, create customized trading logic based on strategy data, calculate custom performance metrics, and more.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,"The following example demonstrates a few simple use cases for thesestrategy.*variables. The script uses them in its order placement and display calculations. When the calculatedrankcrosses above 10 and thestrategy.opentradesvalue is 0, the script callsstrategy.entry()to place a “Buy”market order. On the following bar, where that order fills, it callsstrategy.exit()to create astop-lossorder at a user-specified percentage below thestrategy.position_avg_price. If therankcrosses above 80 during the open trade, the script usesstrategy.close()to exit the position on the next bar.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,"The script draws atableon the main chart pane displaying formatted strings containing the strategy’snet profitandnet profit percentage, theaccount currency, the number ofwinning tradesand the win percentage, the ratio of theaverage profitto theaverage loss, and the profit factor (the ratio of thegross profitto thegross loss). It also plots thetotal equityin a separate pane and highlights the pane’s background based on the strategy’sopen profit:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Using strategy information inscripts,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,"Thestrategy.*namespace features two sub-namespaces that provide access toindividual tradeinformation:strategy.opentrades.*andstrategy.closedtrades.*. Thestrategy.opentrades.*built-ins return data forincomplete(open) trades, and thestrategy.closedtrades.*built-ins return data forcompleted(closed) trades. With these built-ins, programmers can use granular trade data in their scripts, allowing for more detailed strategy analysis and advanced calculations.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,"Both sub-namespaces contain several similar functions that return information about a trade’s orders, simulated costs, and profit/loss, including:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,"Allstrategy.opentrades.*()andstrategy.closedtrades.*()functions have atrade_numparameter, which accepts an “int” value representing the index of the open or closed trade. The index of the first open/closed trade is 0, and the last trade’s index isone lessthan the value of thestrategy.opentrades/strategy.closedtradesvariable.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,"The following example places up to five long entry orders per position, each with a unique ID, and it calculates metrics for specific closed trades.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,"The strategy places a new entry order when theclosecrosses above itsmedianwithout reaching thehighestvalue, but only if the number ofopen tradesis less than five. It exits each position usingstop-lossorders fromstrategy.exit()or amarket orderfromstrategy.close_all(). Each successive entry order’s ID depends on the number of open trades. The first entry ID in each position is “Buy0”, and the last possible entry ID is “Buy4”.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,"The script callsstrategy.closedtrades.*()functions within aforloop to access closed tradeentry IDs,profits,entry bar indices, andexit bar indices. It uses this information to calculate the total number of closed trades with the specified entry ID, the number of winning trades, the average number of bars per trade, and the total profit from all the trades. The script then organizes this information in a formatted string and displays it in a single-celltable:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Individual tradeinformation,Note that:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"Pine Script™ indicators (not strategies) have two different mechanisms to set up custom alert conditions: thealertcondition()function, which tracks one specific condition per function call, and thealert()function, which tracks all its calls simultaneously, but provides greater flexibility in the number of calls, alert messages, etc.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"Pine Script™ strategies cannot create alert triggers using thealertcondition()function, but they can create triggers with thealert()function. Additionally, eachorder placement commandcomes with its own built-in alert functionality that does not require any additional code to implement. As such, any strategy that uses an order placement command can issue alerts upon order execution. The precise mechanics of such built-in strategy alerts are described in theOrder Fill eventssection of theAlertspage.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"When a strategy uses both thealert()function and functions that create orders in the same script, the “Create Alert” dialog box provides a choice between the conditions to use as a trigger:alert()events, order fill events, or both.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"For many trading strategies, the delay between a triggered alert and a live trade can be a critical performance factor. By default, strategy scripts can only executealert()function calls on the close of realtime bars, as if they usedalert.freq_once_per_bar_close, regardless of thefreqargument in the call. Users can change the alert frequency by includingcalc_on_every_tick = truein thestrategy()call or selecting the “Recalculate/On every tick” option in the “Settings/Properties” tab before creating the alert. However, depending on the script, this setting can adversely impact the strategy’s behavior. See the`calc_on_every_tick`section for more information.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"Order fill alert triggers do not suffer the same limitations as the triggers fromalert()calls, which makes them more suitable for sending alerts to third parties for automation. Alerts from order fill events executeimmediately, unaffected by a script’scalc_on_every_ticksetting. Users can set the default message for order fill alerts via the//@strategy_alert_messagecompiler annotation. The text provided with this annotation populates the “Message” field in the “Create Alert” dialog box.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"The following script shows a simple example of a default order fill alert message. Above thestrategy()declaration statement, the script includes@strategy_alert_messagewithplaceholdersfor the trade action, current position size, ticker name, and fill price values in the message text:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,This script populates the “Create Alert” dialog box with its default message when the user selects its name from the “Condition” dropdown tab:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,"When the alert fires, the strategy populates the placeholders in the alert message with their corresponding values. For example:",https://www.tradingview.com/pine-script-docs/concepts/strategies
Strategyalerts,,https://www.tradingview.com/pine-script-docs/concepts/strategies
Notes on testingstrategies,"Testing and tuning strategies in historical and live market conditions can provide insight into a strategy’s characteristics, potential weaknesses, andpossiblyits future potential. However, traders should always be aware of the biases and limitations of simulated strategy results, especially when using the results to support live trading decisions. This section outlines some caveats associated with strategy validation and tuning and possible solutions to mitigate their effects.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Notes on testingstrategies,"Notice!Although testing strategies on existing data might give traders helpful information about a strategy’s qualities, it’s important to note that neither the past nor the present guarantees the future. Financial markets can change rapidly and unpredictably, which can cause a strategy to sustain uncontrollable losses. Additionally, simulated results may not fully account for other real-world factors that can impact trading performance. Therefore, we recommend that traders thoroughly understand the limitations and risks of backtests and forward tests and consider them “parts of the whole” in their validation processes rather than basing decisions solely on the results.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Backtesting and forwardtesting,"Backtestingis a technique to evaluate the historical performance of a trading strategy or model by simulating and analyzing its past results on historical market data. This technique assumes that a strategy’s results on past data can provide insight into its strengths and weaknesses. When backtesting, many traders adjust the parameters of a strategy in an attempt to optimize its results. Analysis and optimization of historical results can help traders to gain a deeper understanding of a strategy. However, traders should always understand the risks and limitations when basing their decisions on optimized backtest results.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Backtesting and forwardtesting,"It is prudent to also use realtime analysis as a tool for evaluating a trading system on a forward-looking basis.Forward testingaims to gauge the performance of a strategy in live market conditions, where factors such as trading costs, slippage, and liquidity can meaningfully affect its performance. While forward testing has the distinct advantage of not being affected by certain types of biases (e.g., lookahead bias or “future data leakage”), it does carry the disadvantage of being limited in the quantity of data to test. Therefore, although it can provide helpful insights into a strategy’s performance in current market conditions, forward testing is not typically used on its own.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Lookaheadbias,"One typical issue in backtesting strategies that request alternate timeframe data, use repainting variables such astimenow, or alter calculation behavior for intrabar order fills, is the leakage of future data into the past during evaluation, which is known aslookahead bias. Not only is this bias a common cause of unrealistic strategy results, since the future is never actually knowable beforehand, but it is also one of the typical causes of strategy repainting.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Lookaheadbias,"Traders can often confirm whether a strategy has lookahead bias by forward testing it on realtime data, where no known data exists beyond the latest bar. Since there is no future data to leak into the past on realtime bars, the strategy will behave differently on historical and realtime bars if its results have lookahead bias.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Lookaheadbias,To eliminate lookahead bias in a strategy:,https://www.tradingview.com/pine-script-docs/concepts/strategies
Selectionbias,"Selection bias occurs when a trader analyzes only results on specific instruments or timeframes while ignoring others. This bias can distort the perspective of the strategy’s robustness, which can impact trading decisions and performance optimizations. Traders can reduce the effects of selection bias by evaluating their strategies on multiple, ideally diverse, symbols and timeframes, and ensuring not to ignore poor performance results or “cherry-pick” testing ranges.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Overfitting,"A common problem when optimizing a strategy based on backtest results is overfitting (“curve fitting”), which means tailoring the strategy for specific data. An overfitted strategy often fails to generalize well on new, unseen data. One widely-used approach to help reduce the potential for overfitting and promote better generalization is to split an instrument’s data into two or more parts to test the strategy outside the sample used for optimization, otherwise known as “in-sample” (IS) and “out-of-sample” (OOS) backtesting.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Overfitting,"In this approach, traders optimize strategy parameters on the IS data, and they test the optimized configuration on the OOS data without additional fine-tuning. Although this and other, more robust approaches might provide a glimpse into how a strategy might fare after optimization, traders should still exercise caution. No trading strategy can guarantee future performance, regardless of the data used for optimization and testing, because the future is inherently unknowable.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orderlimit,"Outside of Deep Backtesting, a strategy can keep track of up to 9000 orders. If a strategy creates more than 9000 orders, the earliest orders aretrimmedso that the strategy  stores the information for only the most recent orders.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orderlimit,Trimmed orders donotappear in theStrategy Tester. Referencing the trimmed order IDs usingstrategy.closedtrades.*functions returnsna.,https://www.tradingview.com/pine-script-docs/concepts/strategies
Orderlimit,"Thestrategy.closedtrades.first_indexvariable holds the index of the oldestuntrimmedtrade, which corresponds to the first trade listed in theList of Trades. If the strategy creates less than 9000 orders, there are no trimmed orders, and this variable’s value is 0.",https://www.tradingview.com/pine-script-docs/concepts/strategies
Orderlimit,Previous,https://www.tradingview.com/pine-script-docs/concepts/strategies
Orderlimit,Next,https://www.tradingview.com/pine-script-docs/concepts/strategies
Introduction,"Tables are objects that can be used to position information in specific
and fixed locations in a script’s visual space. Contrary to all other
plots or objects drawn in Pine Script™, tables are not anchored to
specific bars; theyfloatin a script’s space, whether in overlay or
pane mode, in studies or strategies, independently of the chart bars
being viewed or the zoom factor used.",https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,"Tables contain cells arranged in columns and rows, much like a
spreadsheet. They are created and populated in two distincts steps:",https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,"Most attributes of a previously created table can be changed usingtable.set_*()setter functions. Attributes of previously populated
cells can be modified usingtable.cell_set_*()functions.",https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,"A table is positioned in an indicator’s space by anchoring it to one of
nine references: the four corners or midpoints, including the center.
Tables are positioned by expanding the table from its anchor, so a table
anchored to theposition.middle_rightreference will be drawn by expanding up, down and left from that anchor.",https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,Two modes are available to determine the width/height of table cells:,https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,"Displayed table contents always represent the last state of the table,
as it was drawn on the script’s last execution, on the dataset’s last
bar. Contrary to values displayed in the Data Window or in indicator
values, variable contents displayed in tables will thus not change as a
script user moves his cursor over specific chart bars. For this reason,
it is strongly recommended to always restrict execution of alltable.*()calls to either the first or last bars of the dataset.
Accordingly:",https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,"Multiple tables can be used in one script, as long as they are each
anchored to a different position. Each table object is identified by its
own ID. Limits on the quantity of cells in all tables are determined by
the total number of cells used in one script.",https://www.tradingview.com/pine-script-docs/concepts/tables
Creatingtables,"When creating a table usingtable.new(),
three parameters are mandatory: the table’s position and its number of
columns and rows. Five other parameters are optional: the table’s
background color, the color and width of the table’s outer frame, and
the color and width of the borders around all cells, excluding the outer
frame. All table attributes except its number of columns and rows can be
modified using setter functions:table.set_position(),table.set_bgcolor(),table.set_frame_color(),table.set_frame_width(),table.set_border_color()andtable.set_border_width().",https://www.tradingview.com/pine-script-docs/concepts/tables
Creatingtables,"Tables can be deleted usingtable.delete(),
and their content can be selectively removed usingtable.clear().",https://www.tradingview.com/pine-script-docs/concepts/tables
Creatingtables,"When populating cells usingtable.cell(),
you must supply an argument for four mandatory parameters: the table id
the cell belongs to, its column and row index using indices that start
at zero, and the text string the cell contains, which can be null. Other parameters are optional: the width and height of the cell, the text’s attributes (color, horizontal and vertical alignment, size, formatting), and
the cell’s background color. All cell attributes can be modified using
setter functions:table.cell_set_text(),table.cell_set_width(),table.cell_set_height(),table.cell_set_text_color(),table.cell_set_text_halign(),table.cell_set_text_valign(),table.cell_set_text_size(),table.cell_set_text_formatting(),
andtable.cell_set_bgcolor().",https://www.tradingview.com/pine-script-docs/concepts/tables
Creatingtables,"Keep in mind that each successive call totable.cell()redefinesallthe cell’s properties, deleting any properties set by
previoustable.cell()calls on the same cell.",https://www.tradingview.com/pine-script-docs/concepts/tables
Placing a single value in a fixedposition,"Let’s create our first table, which will place the value of ATR in the
upper-right corner of the chart. We first create a one-cell table, then
populate that cell:",https://www.tradingview.com/pine-script-docs/concepts/tables
Placing a single value in a fixedposition,,https://www.tradingview.com/pine-script-docs/concepts/tables
Placing a single value in a fixedposition,Note that:,https://www.tradingview.com/pine-script-docs/concepts/tables
Placing a single value in a fixedposition,Let’s improve the usability and aesthethics of our script:,https://www.tradingview.com/pine-script-docs/concepts/tables
Placing a single value in a fixedposition,,https://www.tradingview.com/pine-script-docs/concepts/tables
Placing a single value in a fixedposition,Note that:,https://www.tradingview.com/pine-script-docs/concepts/tables
Coloring the chart’sbackground,"This example uses a one-cell table to color the chart’s background on
the bull/bear state of RSI:",https://www.tradingview.com/pine-script-docs/concepts/tables
Coloring the chart’sbackground,Note that:,https://www.tradingview.com/pine-script-docs/concepts/tables
Creating a displaypanel,"Tables are ideal to create sophisticated display panels. Not only do
they make it possible for display panels to always be visible in a
constant position, they provide more flexible formatting because each
cell’s properties are controlled separately: background, text color,
size and alignment, etc.",https://www.tradingview.com/pine-script-docs/concepts/tables
Creating a displaypanel,"Here, we create a basic display panel showing a user-selected quantity
of MAs values. We display their period in the first column, then their
value with a green/red/gray background that varies with price’s
position with regards to each MA. When price is above/below the MA, the
cell’s background is colored with the bull/bear color. When the MA
falls between the current bar’sopenandclose,
the cell’s background is of the neutral color:",https://www.tradingview.com/pine-script-docs/concepts/tables
Creating a displaypanel,,https://www.tradingview.com/pine-script-docs/concepts/tables
Creating a displaypanel,Note that:,https://www.tradingview.com/pine-script-docs/concepts/tables
Displaying aheatmap,"Our next project is a heatmap, which will indicate the bull/bear
relationship of the current price relative to its past values. To do so,
we will use a table positioned at the bottom of the chart. We will
display colors only, so our table will contain no text; we will simply
color the background of its cells to produce our heatmap. The heatmap
uses a user-selectable lookback period. It loops across that period to
determine if price is above/below each bar in that past, and displays a
progressively lighter intensity of the bull/bear color as we go further
in the past:",https://www.tradingview.com/pine-script-docs/concepts/tables
Displaying aheatmap,,https://www.tradingview.com/pine-script-docs/concepts/tables
Displaying aheatmap,Note that:,https://www.tradingview.com/pine-script-docs/concepts/tables
Tips,Previous,https://www.tradingview.com/pine-script-docs/concepts/tables
Tips,Next,https://www.tradingview.com/pine-script-docs/concepts/tables
Introduction,"You may display text or shapes using five different ways with Pine
Script™:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Introduction,Which one to use depends on your needs:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Introduction,These are a few things to keep in mind concerning Pine Script™ strings:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Introduction,"This script displays text using the four methods available in Pine
Script™:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Introduction,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Introduction,Note that:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"This function is useful to display a single character on bars. It has
the following syntax:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"Code:
plotchar(series, title, char, location, color, offset, text, textcolor, editable, size, show_last, display, force_overlay) → void",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"See theReference Manual entry for
plotchar()for details on its parameters.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"As explained in theWithout affecting the scalesection of our page onDebugging, the function
can be used to display and inspect values in the Data Window or in the
indicator values displayed to the right of the script’s name on the
chart:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"plotchar()also works well to identify specific points on the chart or to validate
that conditions aretruewhen we expect them to be. This example
displays an up arrow under bars whereclose,highandvolumehave all been rising for two bars:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"If you don’t mind plotting only circles, you could also useplot()to achieve a similar effect:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,"This method has the inconvenience that, since there is no relative
positioning mechanism withplot()one must shift the circles down using something liketa.tr(the bar’s “True Range”):",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotchar()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,"This function is useful to display pre-defined shapes and/or text on
bars. It has the following syntax:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,"Code:
plotshape(series, title, style, location, color, offset, text, textcolor, editable, size, show_last, display, force_overlay) → void",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,"See theReference Manual entry for
plotshape()for details on its parameters.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,"Let’s use the function to achieve more or less the same result as with
our second example of the previous section:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,"Note that here, rather than using an arrow character, we are using theshape.arrowupargument for thestyleparameter.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,"It is possible to use differentplotshape()calls to superimpose text on bars. You will need to use\nfollowed by
a special non-printing character that doesn’t get stripped out to
preserve the newline’s functionality. Here we’re using a Unicode
Zero-width space (U+200E). While you don’t see it in the following
code’s strings, it is there and can be copy/pasted. The special Unicode
character needs to be thelastone in the string for text going up,
and thefirstone when you are plotting under the bar and text is
going down:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotshape()`,The available shapes you can use with thestyleparameter are:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"Theplotarrowfunction displays up or down arrows of variable length, based on the
relative value of the series used in the function’s first argument. It
has the following syntax:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"Code:
plotarrow(series, title, colorup, colordown, offset, minheight, maxheight, editable, show_last, display, force_overlay) → void",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"See theReference Manual entry for
plotarrow()for details on its parameters.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"Theseriesparameter inplotarrow()is not a “series bool” as inplotchar()andplotshape();
it is a “series int/float” and there’s more to it than a simpletrueorfalsevalue determining when the arrows are plotted. This is
the logic governing how the argument supplied toseriesaffects the
behavior ofplotarrow():",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"The maximum and minimum possible sizes for the arrows (in pixels) can be
controlled using theminheightandmaxheightparameters.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,Here is a simple script illustrating howplotarrow()works:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"Note how the heigth of arrows is proportional to the relative size of
the bar bodies.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"You can use any series to plot the arrows. Here we use the value of the
“Chaikin Oscillator” to control the location and size of the arrows:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
`plotarrow()`,"Note that we display the actual “Chaikin Oscillator” in a pane below
the chart, so you can see what values are used to determine the position
and size of the arrows.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Labels,"Labels are only available in v4 and higher versions of Pine Script™.
They work very differently thanplotchar()andplotshape().",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Labels,"Labels are objects, likelines and boxes, ortables. Like them, they are
referred to using an ID, which acts like a pointer. Label IDs are of
“label” type. As with other objects, labels IDs are “time series”
and all the functions used to manage them accept “series” arguments,
which makes them very flexible.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Labels,"Notice!On TradingView charts, a complete set ofDrawing Toolsallows users to
create and modify drawings using mouse actions. While they may sometimes
look similar to drawing objects created with Pine Script™ code, they are
unrelated entities. Drawing objects created using Pine code cannot be
modified with mouse actions, and hand-drawn drawings from the chart user
interface are not visible from Pine scripts.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Labels,Labels are advantageous because:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Labels,"One drawback to using labels versusplotchar()andplotshape()is that you can only draw a limited quantity of them on the chart. The
default is ~50, but you can use themax_labels_countparameter in
yourindicator()orstrategy()declaration statement to specify up to 500. Labels, likelines and boxes, are
managed using a garbage collection mechanism which deletes the oldest
ones on the chart, such that only the most recently drawn labels are
visible.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Labels,Your toolbox of built-ins to manage labels are all in thelabelnamespace. They include:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,Thelabel.new()function creates a new label. It has the following signature:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,"Code:
label.new(x, y, text, xloc, yloc, color, style, textcolor, size, textalign, tooltip, force_overylay) → series label",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,Thesetterfunctions allowing you to change a label’s properties are:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,They all have a similar signature. The one forlabel.set_color()is:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,"Code:
label.set_color(id, color) → void",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,where:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,This is how you can create labels in their simplest form:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,Note that:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,In the next example we display a label on the bar with the highesthighvalue in the last 50 bars:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,Note that:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,"Here we create a label on each bar, but we set its properties
conditionally, depending on the bar’s polarity:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Creating and modifyinglabels,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"Labels are positioned on the chart according tox(bars) andy(price) coordinates. Five parameters affect this behavior:x,y,xloc,ylocandstyle:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,x,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"Is either a bar index or a time value. When a bar index is used, the
value can be offset in the past or in the future (maximum of 500
bars in the future). Past or future offsets can also be calculated
when using time values. Thexvalue of an existing label can be
modified usinglabel.set_x()orlabel.set_xy().",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,xloc,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"Is eitherxloc.bar_index(the default) orxloc.bar_time.
It determines which type of argument must be used withx. Withxloc.bar_index,xmust be an absolute bar index. Withxloc.bar_time,xmust be a UNIX time in milliseconds corresponding to thetimevalue of a bar’sopen.
Thexlocvalue of an existing label can be modified usinglabel.set_xloc().",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,y,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"Is the price level where the label is positioned. It is only taken
into account with the defaultylocvalue ofyloc.price. Ifylocisyloc.abovebaroryloc.belowbarthen theyargument is ignored. Theyvalue of an existing label
can be modified usinglabel.set_y()orlabel.set_xy().",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,yloc,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"Can beyloc.price(the default),yloc.abovebaroryloc.belowbar.
The argument used foryis only taken into account withyloc.price.
Theylocvalue of an existing label can be modified usinglabel.set_yloc().",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,style,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"The argument used has an impact on the visual appearance of the
label and on its position relative to the reference point determined
by either theyvalue or the top/bottom of the bar whenyloc.abovebaroryloc.belowbarare used. Thestyleof an existing label can be modified usinglabel.set_style().",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,These are the availablestylearguments:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"When usingxloc.bar_time,
thexvalue must be a UNIX timestamp in milliseconds. See the page onTimefor more information.
The start time of the current bar can be obtained from thetimebuilt-in variable. The bar time of previous bars istime[1],time[2]and so on. Time can also be set to an absolute value with thetimestampfunction. You may add or subtract periods of time to achieve relative
time offset.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,Let’s position a label one day ago from the date on the last bar:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"Note that because of varying time gaps and missing bars when markets are
closed, the positioning of the label may not always be exact. Time
offsets of the sort tend to be more reliable on 24x7 markets.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Positioninglabels,"You can also offset using a bar index for thexvalue, e.g.:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Reading labelproperties,The followinggetterfunctions are available for labels:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Reading labelproperties,They all have a similar signature. The one forlabel.get_text()is:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Reading labelproperties,"Code:
label.get_text(id) → series string",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Reading labelproperties,whereidis the label whose text is to be retrieved.,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Cloninglabels,Thelabel.copy()function is used to clone labels. Its syntax is:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Cloninglabels,"Code:
label.copy(id) → void",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,Thelabel.delete()function is used to delete labels. Its syntax is:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,"Code:
label.delete(id) → void",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,"To keep only a user-defined quantity of labels on the chart, one could
use code like this:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,Note that:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,"Note that if one wants to position a label on the last bar only, it is
unnecessary and inefficent to create and delete the label as the script
executes on all bars, so that only the last label remains:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Deletinglabels,This is the efficient way to realize the same task:,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Realtimebehavior,"Labels are subject to bothcommitandrollbackactions, which affect
the behavior of a script when it executes in the realtime bar. See the
page on Pine Script™‘sExecution model.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Realtimebehavior,"This script demonstrates the effect of rollback when running in the
realtime bar:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Realtimebehavior,"On realtime bars,label.new()creates a new label on every script update, but because of the rollback
process, the label created on the previous update on the same bar is
deleted. Only the last label created before the realtime bar’s close
will be committed, and thus persist.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,"Drawing objects likelabels,tables, andboxeshave text-related properties that allow users to customize how an object’s text appears on the chart. Some common properties include the text color, size, font family, and typographic emphasis.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,"Programmers can set an object’s text properties when initializing it using thelabel.new(),box.new(), ortable.cell()parameters. Alternatively, they can use the corresponding setter functions, e.g.,label.set_text_font_family(),table.cell_set_text_color(),box.set_text_halign(), etc.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,"All three drawing objects have atext_formattingparameter, which sets the typographic emphasis to displaybold,italicized, or unformatted text. It accepts the constantstext.format_bold,text.format_italic, ortext.format_none(no special formatting; default value). It also acceptstext.format_bold + text.format_italicto display text that is bothbold and italicized.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,"Thesizeparameter inlabel.new()and thetext_sizeparameter inbox.new()andtable.cell()specify the size of the text displayed in the drawn objects. The parameters accept both “string”size.*constants and “int” typographic sizes. A “string”size.*constant represents one of six fixed sizing options. An “int” size value can be any positive integer, allowing scripts to replicate thesize.*values or use other customized sizing.",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,"This table lists thesize.*constants and their equivalent “int” sizes fortables,boxes, andlabels:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,"The example below creates alabelon the last bar to display itscloseprice and creates a single-celltableto display the calculated bar move (the difference between the bar’sopenandclose). ThecloseLabeltext size is auser-selected“string”size.*constant, while thebarMoveTabletext size is auser-selected“int” value. The script also draws aboxof thehighest-lowestprice range for the last 20 bars to assess the current price’s position. Two “bool”inputsfor “Bold” and “Italic” emphasis set the text formatting of the label, box, and table cell collectively. Enabling both inputs displays text that is both bold and italicized, while disabling both inputs displays text with no special formatting:",https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,Previous,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Textformatting,Next,https://www.tradingview.com/pine-script-docs/concepts/text-and-shapes
Introduction,"In Pine Script™, the following key aspects apply when working with date and time values:",https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,"UNIX timeis a standardized date and time representation that measures the number ofnon-leap secondselapsed since January 1, 1970 at 00:00:00UTC(theUNIX Epoch), typically expressed in seconds or smaller time units. A UNIX time value in Pine Script™ is an “int”timestamprepresenting the number ofmillisecondsfrom the UNIX Epoch to a specific point in time.",https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,"Because a UNIX timestamp represents the number of consistent time units elapsed from a fixed historical point (epoch), its value istime zone-agnostic. A UNIX timestamp in Pine always corresponds to the same distinct point in time, accurate to the millisecond, regardless of a user’s location.",https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,"For example, the UNIX timestamp1723472500000always represents the time 1,723,472,500,000 milliseconds (1,723,472,500 seconds) after the UNIX Epoch. This timestamp’s meaning doesnotchange relative to anytime zone.",https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,"Toformatan “int” UNIX timestamp into a readable date/time “string” expressed in a specific time zone, use thestr.format_time()function. The function does notmodifyUNIX timestamps. It simplyrepresentstimestamps in a desired human-readable format.",https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,"For instance, the function can represent the UNIX timestamp1723472500000as a “string” in several ways, depending on itsformatandtimezonearguments, without changing theabsolutepoint in time that it refers to. The simple script below calculates three valid representations of this timestamp and displays them in thePine Logspane:",https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,,https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
UNIXtimestamps,See theFormatting dates and timessection to learn more about representing UNIX timestamps with formatted strings.,https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,"Atime zoneis a geographic region with an assignedlocal time. The specific time within a time zone is consistent throughout the region. Time zone boundaries typically relate to a location’s longitude. However, in practice, they tend to align with administrative boundaries rather than strictly following longitudinal lines.",https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,"The local time within a time zone depends on its definedoffsetfromCoordinated Universal Time (UTC), which can range from UTC-12:00 (12 hoursbehindUTC) to UTC+14:00 (14 hoursaheadof UTC). Some regions maintain a consistent offset from UTC, and others have an offset that changes over time due todaylight saving time (DST)and other factors.",https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,Two primary time zones apply to data feeds and TradingView charts: theexchange time zoneand thechart time zone.,https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,"The exchange time zone represents the time zone of the current symbol’sexchange, which Pine scripts can access with thesyminfo.timezonevariable.Calendar-based variables, such asmonth,dayofweek, andhour, always hold values expressed in the exchange time zone, and all time function overloads that have atimezoneparameter use this time zone by default.",https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,"The chart time zone is avisual preferencethat defines how the chart and the time prefixes ofPine Logsrepresent time values. To set the chart time zone, use the “Timezone” input in the “Symbol” tab of the chart’s settings or click on the current time shown below the chart. The specified time zone doesnotaffect time calculations in Pine scripts because they cannot access this chart information. Although scripts cannot access a chart’s time zone, programmers can provideinputsthat users can adjust to match the time zone.",https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,"For example, the script below usesstr.format_time()to represent theUNIX timestampsof the last historical bar’sopening timeandclosing timeas date-time strings, expressed in the function’s default time zone, the exchange time zone, UTC-0, and a user-specified time zone. It displays all four representations for comparison within atablein the bottom-right corner of the chart:",https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,,https://www.tradingview.com/pine-script-docs/concepts/time
Timezones,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,All built-in functions with atimezoneparameter accept a “string” argument specifying thetime zonethey use in their calculations. These functions can accept time zone strings in either of the following formats:,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,TheIANA time zone databasereference page lists possible time zone identifiers and their respective UTC offsets. The listed identifiers are valid astimezonearguments.,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"Note that various time zone strings expressed in UTC or IANA notation can represent thesameoffset from Coordinated Universal Time. For instance, these strings all represent a local time three hours ahead of UTC:",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"For thestr.format_time()function and the functions that calculate calendar-based values from aUNIX timestamp, includingmonth(),dayofweek(), andhour(), the “string” passed to thetimezoneparameter changes the returned value’s calculation to express the result in the specified time zone. See theFormatting dates and timesandCalendar-based functionssections for more information.",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"The example below shows how time zone strings affect the returned values of calendar-based functions. This script uses threehour()function calls to calculate “int” values representing the opening hour of each bar in the exchange time zone, UTC-0, and a user-specified UTC offset. It plots all three calculated hours in a separate pane for comparison:",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"For functions that returnUNIX timestampsdirectly, such astime()andtimestamp(), thetimezoneparameter defines the time zone of the function’s calendar-basedparameters, includingsession,year,month,day,hour,minute, andsecond. The parameter doesnotdetermine the time zone of the returned value, as UNIX timestamps aretime zone-agnostic. See theTesting for sessionsand`timestamp()`sections to learn more.",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"The following script calls thetimestamp()function to calculate the UNIX timestamp of a specific date and time, and it draws alabelat the timestamp’s corresponding bar location. The user-selectedtimezoneargument (timezoneInput) determines the time zone of the call’s calendar-based arguments. Consequently, the calculated timestamp varies with thetimezoneInputvalue because identical local times in various time zones correspond todifferentamounts of time elapsed since theUNIX Epoch:",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"Although time zone strings can use either UTC or IANA notation, we recommend usingIANA notationfortimezonearguments in most cases, especially if a script’s time calculations must align with the observed time offset in a specific country or subdivision. When a time function call uses anIANA time zone identifierfor itstimezoneargument, its calculations adjust automatically for historical and future changes to the specified region’s observed time, such as daylight saving time (DST) and updates to time zone boundaries, instead of using a fixed offset from UTC.",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"The following script demonstrates how UTC and IANA time zone strings can affect time calculations differently. It uses two calls to thehour()function to calculate the hour from the current bar’s opening timestamp using""UTC-4""and""America/New_York""astimezonearguments. The script plots the results of both calls for comparison and colors the main pane’s background when the returned values do not match. Although these twohour()calls may seem similar because UTC-4 is an observed UTC offset in New York, theydo notalways return the same results, as shown below:",https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,,https://www.tradingview.com/pine-script-docs/concepts/time
Time zonestrings,"The plots in the chart above diverge periodically because New York observes daylight saving time, meaning its UTC offsetchangesat specific points in a year. During DST, New York’s local time follows UTC-4. Otherwise, it follows UTC-5. Because the script’s firsthour()call uses""UTC-4""as itstimezoneargument, it returns the correct hour in New Yorkonlyduring DST. In contrast, the call that uses the""America/New_York""time zone string adjusts its UTC offset automatically to return the correct hour in New York atanytime of the year.",https://www.tradingview.com/pine-script-docs/concepts/time
Timevariables,Pine Script™ has several built-in variables that provide scripts access to different forms of time information:,https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"Thetimevariable holds theUNIX timestampof the current bar’sopening time, and thetime_closevariable holds the UNIX timestamp of the bar’sclosing time.",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"These timestamps are unique, time zone-agnostic “int” values, which programmers can use to anchordrawing objectsto specific bar times, calculate and inspect bar time differences, construct readable date/time strings with thestr.format_time()function, and more.",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"The script below displays bar opening and closing times in different ways. On each bar, itformatsthetimeandtime_closetimestamps into strings containing the hour, minute, and second in theexchange time zone, and it drawslabelsdisplaying the formatted strings at theopenandcloseprices. Additionally, the script displays strings containing the unformatted UNIX timestamps of the last chart bar within atablein the bottom-right corner:",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,,https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"It’s crucial to note that unlike thetimevariable, which has consistent behavior across chart types,time_closebehaves differently ontime-basedandnon-time-basedcharts.",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"Time-based charts have bars that typically open and close at regular,predictabletimes within a session. Thanks to this predictability,time_closecan accurately represent theexpectedclosing time of an open bar on a time-based chart, as shown on the last bar in the example above.",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"In contrast, the bars ontick chartsandprice-basedcharts (allnon-standard chartsexcludingHeikin Ashi) coverirregulartime intervals. Tick charts construct bars based on successive ticks in the data feed, and price-based charts construct bars based on significant price movements. The time it takes for new ticks or price changes to occur isunpredictable. As such, thetime_closevalue isnaon therealtime barsof these charts.",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"The following script uses thetimeandtime_closevariables withstr.tostring()andstr.format_time()to create strings containing bar opening and closingUNIX timestampsandformatteddate-time representations, which it displays inlabelsat each bar’shighandlowprices.",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,"When applied to aRenkochart, which forms new bars based onprice movements, the labels show correct results on all historical bars. However, the last bar has atime_closevalue ofnabecause the future closing time is unpredictable. Consequently, the bar’s closing time label shows a timestamp of""NaN""and anincorrectdate and time:",https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,,https://www.tradingview.com/pine-script-docs/concepts/time
`time` and `time_close`variables,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,Thetime_tradingdayvariable holds aUNIX timestamprepresenting the starting time (00:00 UTC) of the last trading day in the current bar’s final session. It is helpful primarily for date and time calculations ontime-basedcharts for symbols with overnight sessions that start and end ondifferentcalendar days.,https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,"On “1D” and lower timeframes, thetime_tradingdaytimestamp corresponds to the beginning of the day when the current sessionends, even for bars that open and close on the previous day. For example, the “Monday” session for “EURUSD” starts on Sunday at 17:00 and ends on Monday at 17:00 in theexchange time zone. Thetime_tradingdayvalues ofallintraday bars within the session represent Monday at 00:00 UTC.",https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,"On timeframes higher than “1D”, which can covermultiplesessions,time_tradingdayholds the timestamp representing the beginning of the last calendar day of the bar’sfinaltrading session. For example, on a “EURUSD, 1W” chart, the timestamp represents the start of the last trading day in the week, which is typically Friday at 00:00 UTC.",https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,"The script below demonstrates how thetime_tradingdayandtimevariables differ on Forex symbols. On each bar, it drawslabelsto display strings containing the variables’UNIX timestampsandformatted dates and times. It also uses thedayofmonth()function to calculate the UTC calendar day from both timestamps, highlighting the background when the calculated days do not match.",https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,"When applied to the “FXCM:EURUSD” chart with the “3h” (“180”) timeframe, the script highlights the background of thefirst barin each session, as each session opens on thepreviouscalendar day. Thedayofmonth()call that usestimecalculates the opening day on the session’s first bar, whereas the call that usestime_tradingdaycalculates the day when the sessionends:",https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,,https://www.tradingview.com/pine-script-docs/concepts/time
`time_tradingday`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,"Thetimenowvariable holds aUNIX timestamprepresenting the script’scurrent time. Unlike the values of other variables that hold UNIX timestamps, the values in thetimenowseries correspond to times when the scriptexecutes, not the times of specific bars or trading days.",https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,"A Pine script executes onlyonceper historical bar, and all historical executions occur when the script firstloadson the chart. As such, thetimenowvalue is relatively consistent on historical bars, with only occasional millisecond changes across the series. In contrast, on realtime bars, a script executes once foreach new updatein the data feed, which can happen several times per bar. With each new execution, thetimenowvalue updates on the latest bar to represent the current time.",https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,"Notice!Becausetimenowonly updates after script executions, its value doesnotalways correspond to thecontinuoustime displayed below the chart. When no new updates are available in the realtime data feed, a script on the chart remainsidle, in which case the variable’s timestamp does not change.",https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,"This variable is most useful on realtime bars, where programmers can apply it to track the times of the latest script executions, count the time elapsed within open bars, control drawings based on bar updates, and more.",https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,"The script below inspects the value oftimenowon the latest chart bars and uses it to analyze realtime bar updates. When the script first reaches the last chart bar, it declares three variables with thevaripkeyword to hold the latesttimenowvalue, the total time elapsed between the bar’s updates, and the total number of updates. It uses these values to calculate the average number of milliseconds between updates, which it displays in alabelalong with the current execution’s timestamp, aformattedtime and date in theexchange time zone, and the current number of bar updates:",https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,,https://www.tradingview.com/pine-script-docs/concepts/time
`timenow`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,"Theyear,month,weekofyear,dayofmonth,dayofweek,hour,minute, andsecondvariables holdcalendar-based“int” values calculated from the current bar’sopening time, expressed in theexchange time zone. These variables reference the same values thatcalendar-based functionsreturn when they use the defaulttimezoneargument andtimeas thetimeargument. For instance, theyearvariable holds the same value that ayear(time)call returns.",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,"Programmers can use these calendar-based variables for several purposes, such as:",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,"One of the most common use cases for these variables is checking for date or time ranges to control when a script displays visuals or executes calculations. This simple example inspects theyearvariable to determine when to plot a visible value. If theyearis 2022 or higher, the script plots the bar’sclose. Otherwise, it plotsna:",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,"When using these variables in conditions that isolate specific dates or times rather than ranges, it’s crucial to consider that certain conditions might not detect some occurrences of the values due to a chart’s timeframe, the opening times of chart bars, or the symbol’s active session.",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,"For instance, suppose we want to detect when the first calendar day of each month occurs on the chart. Intuitively, one might consider simply checking when thedayofmonthvalue equals 1. However, this condition only identifies when a baropenson a month’s first day. The bars on some charts can open and close indifferentmonths. Additionally, a chart bar might not contain the first day of a month if the market isclosedon that day. Therefore, we must create extra conditions that work in these scenarios to identify the first day inanymonth on the chart.",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,"The script below uses thedayofmonthandmonthvariables, and themonth()function, to create three conditions that detect the first day of the month in different ways. The first condition detects if the bar opens on the first day, the second checks if the bar opens in one month and closes in another, and the third checks if the chart skips the date entirely. The script drawslabelsshowing bar opening dates and highlights the background with different colors to visualize when each condition occurs:",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedvariables,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`last_bar_time`,"Thelast_bar_timevariable holds aUNIX timestamprepresenting thelastavailable bar’s opening time. It is similar tolast_bar_index, which references the latest bar index. On historical bars,last_bar_timeconsistently references thetimevalue of the last bar available when the script firstloadson the chart. The only time the variable’s value updates across script executions is when a new realtime bar opens.",https://www.tradingview.com/pine-script-docs/concepts/time
`last_bar_time`,"The following script uses thelast_bar_timevariable to get the opening timestamp of the last chart bar during its execution on thefirst bar. It displays the UNIX timestamp and aformatteddate and time in a single-celltablecreated only on that bar. When the script executes on the last available bar, it draws alabelshowing the bar’stimevalue and its formatted representation for visual comparison.",https://www.tradingview.com/pine-script-docs/concepts/time
`last_bar_time`,"As the chart below shows, both drawings displayidenticaltimes, verifying thatlast_bar_timecorrectly references the last bar’stimevalue on previous historical bars:",https://www.tradingview.com/pine-script-docs/concepts/time
`last_bar_time`,,https://www.tradingview.com/pine-script-docs/concepts/time
`last_bar_time`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Visible bartimes,"Thechart.left_visible_bar_timeandchart.right_visible_bar_timevariables reference the openingUNIX timestampsof the chart’s leftmost (first) and rightmost (last)visible barson every script execution. When a script uses these variables, it responds dynamically to visible chart changes, such as users scrolling across bars or zooming in/out. Each time the visible window changes, the scriptre-executesautomatically to update the variables’ values on all available bars.",https://www.tradingview.com/pine-script-docs/concepts/time
Visible bartimes,"The example below demonstrates how thechart.left_visible_bar_timeandchart.right_visible_bar_timevariables work across script executions. The script drawslabelsanchored to the visible bars’ times to display the UNIX timestamps. In addition, it draws two single-celltablesshowing corresponding dates and times in the standardISO 8601format. The script creates these drawings only when it executes on the first bar. As the script continues to execute on subsequent bars, it identifies each bar whosetimevalue equals either visible bars’ timestamp and colors it on the chart:",https://www.tradingview.com/pine-script-docs/concepts/time
Visible bartimes,,https://www.tradingview.com/pine-script-docs/concepts/time
Visible bartimes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`syminfo.timezone`,"Thesyminfo.timezonevariable holds atime zone stringrepresenting the current symbol’sexchangetime zone. The “string” value expresses the time zone as anIANA identifier(e.g.,""America/New_York""). The overloads oftime functionsthat include atimezoneparameter usesyminfo.timezoneas the default argument.",https://www.tradingview.com/pine-script-docs/concepts/time
`syminfo.timezone`,"Because this variable is the defaulttimezoneargument for all applicable time function overloads, it is unnecessary to use as an explicit argument, except for stylistic purposes. However, programmers can use the variable in other ways, such as:",https://www.tradingview.com/pine-script-docs/concepts/time
`syminfo.timezone`,"The following script uses thetimenowvariable to retrieve theUNIX timestampof its latest execution. Itformatsthe timestamp into date-time strings expressed in the main symbol’s exchange time zone and a requested symbol’s exchange time zone, which it displays along with the IANA identifiers in atableon the last chart bar:",https://www.tradingview.com/pine-script-docs/concepts/time
`syminfo.timezone`,,https://www.tradingview.com/pine-script-docs/concepts/time
`syminfo.timezone`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Timefunctions,"Pine Script™ features several built-in functions that scripts can use to retrieve, calculate, and express time values:",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Thetime()andtime_close()functions returnUNIX timestampsrepresenting the opening and closing times of bars on a specified timeframe. Both functions canfiltertheir returned values based on a givensessionin a specifictime zone. They each have the following signatures:,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"Code:
functionName(timeframe, bars_back) → series intfunctionName(timeframe, session, bars_back) → series intfunctionName(timeframe, session, timezone, bars_back) → series int",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Where:,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"Similar to thetimeandtime_closevariables, these functions behave differently ontime-basedandnon-time-basedcharts.",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"Time-based charts have bars that open and close atpredictabletimes, whereas the bars ontick chartsand allnon-standard charts, excludingHeikin Ashi, open and close at irregular,unpredictabletimes. Consequently,time_close()cannot calculate the expected closing times of realtime bars on non-time-based charts, so it returnsnaon those bars. Similarly, thetime()function with a negativebars_backvalue cannot accurately calculate the expected opening time of a future realtime bar on these charts. See thesecond exampleinthis sectionabove. That example script exhibits the same behavior on a price-based chart if it uses atime_close("""")call instead of thetime_closevariable.",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Typical use cases for thetime()andtime_close()functions include:,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"Thetime()andtime_close()functions’sessionandtimezoneparameters define thesessionsfor which they can returnnon-navalues. If a call to either function references a bar that opens/closes within the defined session in a giventime zone, it returns aUNIX timestampfor that bar. Otherwise, it returnsna. Programmers can pass the returned values to thena()function to identify which bars open or close within specified intervals, which is helpful for session-based calculations and logic.",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"This simple script identifies when a bar on the chart’s timeframe opens at or after 11:00 and before 13:00 in the exchange time zone on any trading day. It callstime()withtimeframe.periodas thetimeframeargument and the""1100-1300""session stringas thesessionargument, and then verifies whether the returned value isnawith thena()function. When the value isnotna, the script highlights the chart’s background to indicate that the bar opened in the session:",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"When using session strings intime()andtime_close()calls, it’s crucial to understand that such strings define start and end times in aspecifictime zone. The local hour and minute in one region may not correspond to the same point in UNIX time as that same hour and minute in another region. Therefore, calls to these functions with differenttimezonearguments can return non-na timestamps atdifferenttimes, as the specifiedtime zone stringchanges the meaning of the local times represented in thesessionargument.",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"This example demonstrates how thetimezoneparameter affects thesessionparameter in atime()function call. The script calculates anopensInSessioncondition that uses atime()call with arguments based oninputs. Thesession inputfor thesessionargument includes four preset options:""0000-0400"",""0930-1400"",""1300-1700"", and""1700-2100"". Thestring inputthat defines thetimezoneargument includes four IANA time zone options representing different offsets from UTC:""America/Vancouver""(UTC-7/-8),""America/New_York""(UTC-4/-5),""Asia/Dubai""(UTC+4), and""Austrailia/Sydney""(UTC+10/+11).",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"For any chosensessionInputvalue, changing thetimezoneInputvalue changes the specified session’s time zone. The script highlightsdifferent barswith each time zone choice because, unlikeUNIX timestamps, theabsolutetimes that local hour and minute values correspond tovariesacross time zones:",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"Thetimeframeparameter of thetime()andtime_close()functions specifies the timeframe of the bars in the calculation, allowing scripts to retrieve opening/closingUNIX timestampsfromhigher timeframesthan the current chart’s timeframe without requiringrequest.*()function calls.",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Programmers can use the opening/closing timestamps from higher-timeframe (HTF) bars to detect timeframe changes. One common approach is to calltime()ortime_close()with a consistenttimeframeargument across all executions on a time-based chart and measure the one-bar change in the returned value with theta.change()function. The result is anonzerovalue only when an HTF bar opens. One can also check whether the data has a time gap at that point by comparing thetime()value to the previous bar’stime_close()value. A gap is present when the opening timestamp on the current bar is greater than the closing timestamp on the previous bar.,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"The script below callstime(“1M”)to get the opening UNIX timestamp of the current bar on the “1M” timeframe. It detects when bars on that timeframe open by checking when theta.change()of the timestamp returns a value greater than 0. On each occurrence of the condition, the script detects whether the HTF bar opened after a gap by checking if the opening time is greater than the previous bar’stime_close(“1M”)value.",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,"The script drawslabelscontainingformatted“1M” opening times to indicate the chart bars that mark the start of monthly bars. If a monthly bar opens without a gap from the previous closing time, the script draws a blue label. If a monthly bar starts after a gap, it draws a red label. Additionally, if the “1M” opening time does not match the opening time of the chart bar, the script displays that bar’s formatted time in the label for comparison:",https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,,https://www.tradingview.com/pine-script-docs/concepts/time
`time()` and `time_close()`functions,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"Theyear(),month(),weekofyear(),dayofmonth(),dayofweek(),hour(),minute(), andsecond()functions calculatecalendar-based“int” values from aUNIX timestamp. Unlike thecalendar-based variables, which always hold exchange calendar values based on the current bar’s opening timestamp, these functions can return calendar values for any valid timestamp and express them in a chosentime zone.",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,Each of these calendar-based functions has the following two signatures:,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"Code:
functionName(time) → series intfunctionName(time, timezone) → series int",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,Where:,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"In contrast to the functions that return UNIX timestamps, a calendar-based function returns different “int” results for various time zones, as calendar values represent parts of alocal timein aspecific region.",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"For instance, the simple script below uses two calls todayofmonth()to calculate each bar’s opening day in the exchange time zone and the “Australia/Sydney” time zone. It plots the results of the two calls in a separate pane for comparison:",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"It’s important to understand that although thetimeargument in a calendar-based function call represents a single, absolute point in time, each function returns onlypartof the date and time information available from the timestamp. Consequently, a calendar-based function’s returned value doesnotdirectly correspond to auniquetime point, and conditions based on individual calendar values can apply tomultiplebars.",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"For example, this script uses thetimestamp()function to calculate a UNIX timestamp from a date “string”, and it calculates the calendar day from that timestamp, in the exchange time zone, with thedayofmonth()function. The script compares each bar’s opening day to the calculated day and highlights the background when the two are equal:",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,"Similar tocalendar-based variables, these functions are also helpful when testing for dates/times and detecting calendar changes on the chart. The example below uses theyear(),month(),weekofyear(), anddayofweek()functions on thetime_closetimestamp to create conditions that test if the current bar is the first bar that closes in a new year, quarter, month, week, and day. The script usesplotted shapes,labels, andbackground colorsto visualize the conditions on the chart:",https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,,https://www.tradingview.com/pine-script-docs/concepts/time
Calendar-basedfunctions,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,Thetimestamp()function calculates aUNIX timestampfrom a specified calendar date and time. It has the following three signatures:,https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"Code:
timestamp(year, month, day, hour, minute, second) → simple/series inttimestamp(timezone, year, month, day, hour, minute, second) → simple/series inttimestamp(dateString) → const int",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"The first two signatures listed includeyear,month,day,hour,minute, andsecondparameters that accept “int” values defining the calendar date and time. Atimestamp()call with either signature must includeyear,month, anddayarguments. The other parameters are optional, each with a default value of 0. Both signatures can return either“simple”or“series”values, depending on thequalified typesof the specified arguments.",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"The primary difference between the first two signatures is thetimezoneparameter, which accepts atime zone stringthat determines thetime zoneof thedate and timespecified by the other parameters. If atimestamp()call with “int” calendar arguments does not include atimezoneargument, it uses the exchange time zone (syminfo.timezone) by default.",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"The third signature listed has onlyoneparameter,dateString, which accepts a “string” representing a valid calendar date (e.g.,""20 Aug 2024""). The value can also include the time of day and time zone (e.g.,""20 Aug 2024 00:00:00 UTC+0""). If thedateStringargument does not specify the time of day, thetimestamp()call considers the time 00:00 (midnight).",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"Unlike the other two signatures, the default time zone for the third signature isGMT+0. It doesnotuse the exchange time zone by default because it interprets time zone information from thedateStringdirectly. Additionally, the third signature is the only one that returns a“const int”value. As shown in theTime inputsection of theInputspage, programmers can use this overload’s returned value as thedefvalargument in aninput.time()function call.",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"When using thetimestamp()function, it’s crucial to understand how time zone information affects its calculations. Theabsolutepoint in time represented by a specific calendar datedependson its time zone, as an identical date and time in various time zones can refer todifferentamounts of time elapsed since theUNIX Epoch. Therefore, changing the time zone of the calendar date and time in atimestamp()callcan changeits returnedUNIX timestamp.",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"The following script compares the results of four differenttimestamp()calls that evaluate the date 2021-01-01 in different time zones. The firsttimestamp()call does not specify time zone information in itsdateStringargument, so it treats the value as aUTCcalendar date. The fourth call also evaluates the calendar date in UTC because it includes""UTC0""as thetimezoneargument. The secondtimestamp()call uses the first signature listed above, meaning it uses the exchange time zone, and the third call uses the second signature with""America/New_York""as thetimezoneargument.",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,"The script draws atablewith rows displaying eachtimestamp()call, its assigned variable, the calculated UNIX timestamp, and aformattedrepresentation of the time. As we see on the “NASDAQ:MSFT” chart below, the first and fourth table rows showdifferenttimestamps than the first and third, leading to different formatted strings in the last column:",https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,,https://www.tradingview.com/pine-script-docs/concepts/time
`timestamp()`,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,"Programmers can formatUNIX timestampsinto human-readable dates and times, expressed in specifictime zones, using thestr.format_time()function. The function has the following signature:",https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,"Code:
str.format_time(time, format, timezone) → series string",https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,Where:,https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,"The general-purposestr.format()function can also format UNIX timestamps into readable dates and times. However, the functioncannotexpress time information indifferenttime zones. It always expresses dates and times inUTC+0. In turn, using this function to format timestamps often results inerroneouspractices, such as mathematically modifying a timestamp to try and represent the time in another time zone. However, a UNIX timestamp is a unique,time zone-agnosticrepresentation of a specific point in time. As such, modifying a UNIX timestamp changes theabsolute timeit represents rather than expressing the same time in a different time zone.",https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,"Thestr.format_time()function does not have this limitation, as it can calculate dates and times inanytime zone correctly without changing the meaning of a UNIX timestamp. In addition, unlikestr.format(), it is optimized specifically for processing time values. Therefore, we recommend that programmers usestr.format_time()instead ofstr.format()to format UNIX timestamps into readable dates and times.",https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,"Astr.format_time()call’sformatargument determines the time information its returned value contains. The function treats characters and sequences in the argument asformatting tokens, which act asplaceholdersfor values in the returned date/time “string”. The following table outlines valid formatting tokens and explains what each represents:",https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,"The following example demonstrates how various formatting tokens affect thestr.format_time()function’s result. The script calls the function with differentformatarguments to create date/time strings fromtime,timenow, andtime_closetimestamps. It displays eachformatvalue and the corresponding formatted result in atableon the last bar:",https://www.tradingview.com/pine-script-docs/concepts/time
Formatting dates andtimes,,https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"EveryUNIX timestamprepresents a specific point in time as the absolutetime differencefrom a fixed historical point (epoch). The specific epoch all UNIX timestamps reference ismidnight UTC on January 1, 1970. Programmers canformatUNIX timestamps into readable date-time strings with thestr.format_time()function because it uses the time difference from the UNIX Epoch in its date and time calculations.",https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"In contrast, the difference between two nonzero UNIX timestamps represents the number of milliseconds elapsed from one absolute point to another. The difference does not directly refer to a specific point in UNIX time if neither timestamp in the operation has a value of 0 (corresponding to the UNIX Epoch).",https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"Programmers may want to express the millisecond difference between two UNIX timestamps inother time units, such as seconds, days, etc. Some might assume they can use the difference as thetimeargument in astr.format_time()call to achieve this result. However, the function always treats itstimeargument as the time elapsed from theUNIX Epochto derive acalendar date/timerepresentation in a specifictime zone. Itdoes notexpress time differences directly. Therefore, attempting to format timestampdifferencesrather than timestamps withstr.format_time()leads to unintended results.",https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"For example, the following script calculates the millisecond difference between the current execution time (timenow) and the “1M” bar’s closing time (time_close(“1M”)) for a monthly countdown timer display. It attempts to express the time difference in another format usingstr.format_time(). It displays the function call’s result in atable, along with the original millisecond difference (timeLeft) andformatteddate-time representations of the timestamps.",https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"As we see below, the table shows correct results for the formatted timestamps and thetimeLeftvalue. However, the formatted time difference appears as""1970-01-12T16:47:10-0500"". Although thetimeLeftvalue is supposed to represent a difference between timestamps rather than a specific point in time, thestr.format_time()function still treats the value as aUNIX timestamp. Consequently, it creates a “string” expressing the value as adate and timein the UTC-5 time zone:",https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,,https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"To express the difference between timestamps in other time units correctly, programmers must write code thatcalculatesthe number of units elapsed instead of erroneously formatting the difference as a specific date or time.",https://www.tradingview.com/pine-script-docs/concepts/time
Expressing timedifferences,"The calculations required to express time differences depend on the chosen time units. The sections below explain how to express millisecond differences inweekly and smaller units, andmonthly and larger units.",https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,"Weeks and smaller time units (days, hours, minutes, seconds, and milliseconds) coverconsistentblocks of time. These units have the following relationship:",https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,"Using this relationship, programmers can define the span of these units by the number ofmillisecondsthey contain. For example, since every hour has 60 minutes, every minute has 60 seconds, and every second has 1000 milliseconds, the number of milliseconds per hour is60 * 60 * 1000, which equals3600000.",https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,"Programmers can usemodular arithmeticbased on the milliseconds in each unit to calculate the total number of weeks, days, and smaller spans covered by the difference between twoUNIX timestamps. The process is as follows, starting from thelargesttime unit in the calculation:",https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,"The following script implements this process in a customformatTimeSpan()function. The function accepts two UNIX timestamps defining a start and end point, and its “bool” parameters control whether it calculates the number of weeks or smaller units covered by the time range. The function calculates the millisecond distance between the two timestamps. It then calculates the numbers of complete units covered by that distance and formats the results into a “string”.",https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,The script callsformatTimeSpan()to express the difference between two separatetime inputvalues in selected time units. It then displays the resulting “string” in atablealongsideformattedrepresentations of the start and end times:,https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,,https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,"The image above shows the calculated time difference in mixed time units. By toggling the “bool” inputs, users can also isolate specific units in the calculation. For example, this image shows the result after enabling only the “Milliseconds” input:",https://www.tradingview.com/pine-script-docs/concepts/time
Weekly and smallerunits,,https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"Unlike weeks and smaller units, months and larger unitsvaryin length based on calendar rules. For example, a month can contain 28, 29, 30, or 31 days, and a year can contain 365 or 366 days.",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"Some programmers prefer to use the modular arithmetic outlined in theprevious section, withapproximate lengthsfor these irregular units, to calculate large-unit durations betweenUNIX timestamps. With this process, programmers usually define the units in either of the following ways:",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"Calculations involving approximate units producerough estimatesof the elapsed time. Such estimates are often practical when expressing relatively short durations. However, their precision diminishes with the size of the difference, drifting further away from the actual time elapsed.",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"Therefore, expressing time differences in monthly and larger units with precision requires a different calculation than the process outlined above. For a more precise estimate of months, years, and larger units elapsed, the calculations should use theactualspan of each individual unit rather than approximations, meaning it must account forleap yearsandvariationsin month sizes.",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"The advanced example below contains a customformatTimeDifference()function that calculates the years and months, in addition to days and smaller units, elapsed between two UNIX timestamps.",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"The function uses the process outlined in theprevious sectionto calculate the daily and smaller units within the interval. For the monthly and yearly units, which haveirregularlengths, the function uses awhileloop to iterate across calendar months. On each iteration, it increments monthly and yearly counters and subtracts the number of days in the added month from the day counter. After the loop ends, the function adjusts the year, month, and day counters to account for partial months elapsed between the timestamps. Finally, it uses the counters in astr.format()call to create a formatted “string” containing the calculated values.",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,"The script calls thisformatTimeDifference()function to calculate the years, months, days, hours, minutes, seconds, and milliseconds elapsed between two separatetime inputvalues and displays the result in alabel:",https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,,https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,Note that:,https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,Previous,https://www.tradingview.com/pine-script-docs/concepts/time
Monthly and largerunits,Next,https://www.tradingview.com/pine-script-docs/concepts/time
Introduction,"Thetimeframeof a chart is sometimes also referred to as itsintervalorresolution. It is the unit of time represented by one
bar on the chart. All standard chart types use a timeframe: “Bars”,
“Candles”, “Hollow Candles”, “Line”, “Area” and “Baseline”.
One non-standard chart type also uses timeframes: “Heikin Ashi”.",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Introduction,"Programmers interested in accessing data from multiple timeframes will
need to become familiar with how timeframes are expressed in Pine
Script™, and how to use them.",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Introduction,Timeframe stringscome into play in different contexts:,https://www.tradingview.com/pine-script-docs/concepts/timeframes
Timeframe stringspecifications,Timeframe strings follow these rules:,https://www.tradingview.com/pine-script-docs/concepts/timeframes
Timeframe stringspecifications,"They are composed of the multiplier and the timeframe unit, e.g.,
“1S”, “30” (30 minutes), “1D” (one day), “3M” (three
months).",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Timeframe stringspecifications,"The unit is represented by a single letter, with no letter used for
minutes: “T” for ticks, “S” for seconds, “D” for days, “W” for weeks, and
“M” for months.",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Timeframe stringspecifications,"When no multiplier is used, 1 is assumed: “S” is equivalent to
“1S”, “D” to “1D”, etc. If only “1” is used, it is interpreted
as 1 minute, since no unit letter identifier is used for minutes.",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Timeframe stringspecifications,"There is no “hour” unit; “1H” isnotvalid. The correct
format for one hour is “60” (remember no unit letter is specified
for minutes).",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Timeframe stringspecifications,The valid multipliers vary for each timeframe unit:,https://www.tradingview.com/pine-script-docs/concepts/timeframes
Comparingtimeframes,"It can be useful to compare different timeframe strings to determine,
for example, if the timeframe used on the chart is lower than the higher
timeframes used in the script.",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Comparingtimeframes,"Converting timeframe strings to a representation in fractional minutes
provides a way to compare them using a universal unit. This script uses
thetimeframe.in_seconds()function to convert a timeframe into float seconds and then converts the
result into minutes:",https://www.tradingview.com/pine-script-docs/concepts/timeframes
Comparingtimeframes,Note that:,https://www.tradingview.com/pine-script-docs/concepts/timeframes
Comparingtimeframes,Previous,https://www.tradingview.com/pine-script-docs/concepts/timeframes
Introduction,"This style guide provides recommendations on how to name variables and
organize your Pine scripts in a standard way that works well. Scripts
that follow our best practices will be easier to read, understand and
maintain.",https://www.tradingview.com/pine-script-docs/writing/style-guide
Introduction,You can see scripts using these guidelines published from theTradingViewandPineCodersaccounts on the platform.,https://www.tradingview.com/pine-script-docs/writing/style-guide
NamingConventions,We recommend the use of:,https://www.tradingview.com/pine-script-docs/writing/style-guide
Scriptorganization,"The Pine Script™ compiler is quite forgiving of the positioning of
specific statements or the versioncompiler annotationin the script. While other arrangements are syntactically
correct, this is how we recommend organizing scripts:",https://www.tradingview.com/pine-script-docs/writing/style-guide
Scriptorganization,"Code:
<license><version><declaration_statement><import_statements><constant_declarations><inputs><function_declarations><calculations><strategy_calls><visuals><alerts>",https://www.tradingview.com/pine-script-docs/writing/style-guide
<license>,"If you publish your open-source scripts publicly on TradingView (scripts
can also be published privately), your open-source code is by default
protected by the Mozilla license. You may choose any other license you
prefer.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<license>,"The reuse of code from those scripts is governed by ourHouse Rules on
Script
Publishingwhich preempt the author’s license.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<license>,The standard license comments appearing at the beginning of scripts are:,https://www.tradingview.com/pine-script-docs/writing/style-guide
<version>,"This is thecompiler annotationdefining the version of Pine Script™ the script will use. If
none is present, v1 is used. For v6, use:",https://www.tradingview.com/pine-script-docs/writing/style-guide
<declaration_statement>,"This is the mandatory declaration statement which defines the type of
your script. It must be a call to eitherindicator(),strategy(),
orlibrary().",https://www.tradingview.com/pine-script-docs/writing/style-guide
<import_statements>,"If your script uses one or more Pine Script™libraries, yourimportstatements belong here.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<constant_declarations>,"Scripts can declare variables qualified as “const”, i.e., ones
referencing a constant value.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<constant_declarations>,We refer to variables as “constants” when they meet these criteria:,https://www.tradingview.com/pine-script-docs/writing/style-guide
<constant_declarations>,"We useSNAKE_CASEto name these variables and group their declaration
near the top of the script. For example:",https://www.tradingview.com/pine-script-docs/writing/style-guide
<constant_declarations>,In this example:,https://www.tradingview.com/pine-script-docs/writing/style-guide
<constant_declarations>,Note that:,https://www.tradingview.com/pine-script-docs/writing/style-guide
<inputs>,"It ismucheasier to read scripts when all their inputs are in the
same code section. Placing that section at the beginning of the script
also reflects how they are processed at runtime, i.e., before the rest
of the script is executed.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<inputs>,"Suffixing input variable names withinputmakes them more readily
identifiable when they are used later in the script:maLengthInput,bearColorInput,showAvgInput, etc.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<function_declarations>,"All user-defined functions must be defined in the script’s global
scope; nested function definitions are not allowed in Pine Script™.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<function_declarations>,"Optimal function design should minimize the use of global variables in
the function’s scope, as they undermine function portability. When it
can’t be avoided, those functions must follow the global variable
declarations in the code, which entails they can’t always be placed in
the <function_declarations> section. Such dependencies on global
variables should ideally be documented in the function’s comments.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<function_declarations>,"It will also help readers if you document the function’s objective,
parameters and result. The same syntax used inlibrariescan be used to
document your functions. This can make it easier to port your functions
to a library should you ever decide to do so:",https://www.tradingview.com/pine-script-docs/writing/style-guide
<calculations>,"This is where the script’s core calculations and logic should be
placed. Code can be easier to read when variable declarations are placed
near the code segment using the variables. Some programmers prefer to
place all their non-constant variable declarations at the beginning of
this section, which is not always possible for all variables, as some
may require some calculations to have been executed before their
declaration.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<strategy_calls>,"Strategies are easier to read when strategy calls are grouped in the
same section of the script.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<visuals>,"This section should ideally include all the statements producing the
script’s visuals, whether they be plots, drawings, background colors,
candle-plotting, etc. See the Pine Script™ user manual’s section onherefor more
information on how the relative depth of visuals is determined.",https://www.tradingview.com/pine-script-docs/writing/style-guide
<alerts>,"Alert code will usually require the script’s calculations to have
executed before it, so it makes sense to put it at the end of the
script.",https://www.tradingview.com/pine-script-docs/writing/style-guide
Spacing,"A space should be used on both sides of all operators, except unary
operators (-1). A space is also recommended after all commas and when
using named function arguments, as inplot(series = close):",https://www.tradingview.com/pine-script-docs/writing/style-guide
Linewrapping,"Line wrapping can make long lines easier to read. Line wraps are defined
by using an indentation level that is not a multiple of four, as four
spaces or a tab are used to define local blocks. Here we use two spaces:",https://www.tradingview.com/pine-script-docs/writing/style-guide
Verticalalignment,"Vertical alignment using tabs or spaces can be useful in code sections
containing many similar lines such as constant declarations or inputs.
They can make mass edits much easier using the Pine Editor’s
multi-cursor feature (ctrl+alt+🠅):",https://www.tradingview.com/pine-script-docs/writing/style-guide
Explicittyping,"Including the type of variables when declaring them is not required.
However, it helps make scripts easier to read, navigate, and understand.
It can help clarify the expected types at each point in a script’s
execution and distinguish a variable’s declaration (using=) from its
reassignments (using:=). Using explicit typing can also make scripts
easier todebug.",https://www.tradingview.com/pine-script-docs/writing/style-guide
Explicittyping,Next,https://www.tradingview.com/pine-script-docs/writing/style-guide
Introduction,"TradingView’s close integration between the Pine Editor and the chart
interface facilitates efficient, interactive debugging of Pine Script™
code, as scripts can produce dynamic results in multiple locations, on
and off the chart. Programmers can utilize such results to refine their
script’s behaviors and ensure everything works as expected.",https://www.tradingview.com/pine-script-docs/writing/debugging
Introduction,"When a programmer understands the appropriate techniques for inspecting
the variety of behaviors one may encounter while writing a script, they
can quickly and thoroughly identify and resolve potential problems in
their code, which allows for a more seamless overall coding experience.
This page demonstrates some of the handiest ways to debug code when
working with Pine Script™.",https://www.tradingview.com/pine-script-docs/writing/debugging
Introduction,"Notice!Before venturing further on this page, we recommend familiarizing
yourself with Pine’sExecution modelandType system, as it’s
crucial to understand these details when debugging in the Pine Script™
environment.",https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,"Pine scripts can output their results in multiple different ways, any of
which programmers can utilize for debugging.",https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,"Theplot*()functions can display results in a chart pane, the
script’s status line, the price (y-axis) scale, and the Data Window,
providing simple, convenient ways to debug numeric and conditional
values:",https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,,https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,"Thebgcolor()function displays colors in the script pane’s background, and thebarcolor()function changes the colors of the main chart’s bars or candles. Both
of these functions provide a simple way to visualize conditions:",https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,,https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,"Pine’sdrawing types(line,box,polyline,label)
produce drawings in the script’s pane. While they don’t return results
in other locations, such as the status line or Data Window, they provide
alternative, flexible solutions for inspecting numeric values,
conditions, and strings directly on the chart:",https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,,https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,"Thelog.*()functions producePine Logsresults. Every time a script calls any of these functions, the script
logs a message in thePine Logspane,
along with a timestamp and navigation options to identify the specific
times, chart bars, and lines of code that triggered a log:",https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,,https://www.tradingview.com/pine-script-docs/writing/debugging
The lay of theland,"One can apply any of the above, or a combination, to establish debugging
routines to fit their needs and preferences, depending on the data types
and structures they’re working with. See the sections below for
detailed explanations of various debugging techniques.",https://www.tradingview.com/pine-script-docs/writing/debugging
Numericvalues,"When creating code in Pine Script™, working with numbers is inevitable.
Therefore, to ensure a script works as intended, it’s crucial to
understand how to inspect the numeric
(intandfloat)
values it receives and calculates.",https://www.tradingview.com/pine-script-docs/writing/debugging
Numericvalues,"Notice!This section discusses fundamentalchart-basedapproaches for
debugging numbers. Scripts can also convert numbers tostrings,
allowing one to inspect numbers using string-related techniques. For
more information, see theStringsandPine Logssections.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"One of the most straightforward ways to inspect a script’s numeric
values is to useplot*()functions, which can display results
graphically on the chart and show formatted numbers in the script’s
status line, the price scale, and the Data Window. The locations where aplot*()function displays its results depend on thedisplayparameter. By default, its value isdisplay.all.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Notice!Only a script’sglobal scopecan containplot*()calls, meaning
these functions can only accept global variables and literals. They
cannot use variables declared from the local scopes ofloops,conditional structures, oruser-defined functionsandmethods.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"The following example uses theplot()function to display the 1-bar change in the value of the built-intimevariable measured in chart timeframes (e.g., a plotted value of 1 on the
“1D” chart means there is a one-day difference between the opening
times of the current and previous bars). Inspecting this series can help
to identify time gaps in a chart’s data, which is helpful information
when designing time-based indicators.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Since we have not specified adisplayargument, the function usesdisplay.all,
meaning it will show data inallpossible locations, as we see below:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"When debugging multiple numeric values in a script, programmers may wish
to inspect them without interfering with the price scales or cluttering
the visual outputs in the chart’s pane, as distorted scales and
overlapping plots may make it harder to evaluate the results.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"A simple way to inspect numbers without adding more visuals to the
chart’s pane is to change thedisplayvalues in the script’splot*()calls to otherdisplay.*variables or expressions using
them.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Let’s look at a practical example. Here, we’ve drafted the following
script that calculates a custom-weighted moving average by dividing thesumofweight * closevalues by thesumof theweightseries:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Suppose we’d like to inspect the variables used in theaveragecalculation to understand and fine-tune the result. If we were to useplot()to display the script’sweight,numerator, anddenominatorin all
locations, we can no longer easily identify ouraverageline on the
chart since each variable has a radically different scale:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"While we could hide individual plots from the “Style” tab of the
script’s settings, doing so also prevents us from inspecting the
results in any other location. To simultaneously view the variables’
values and preserve the scale of our chart, we can change thedisplayvalues in our debug plots.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"The version below includes adebugLocationsvariable in the debugplot()calls with a value ofdisplay.all - display.paneto specify that all
locationsexceptthe chart pane will show the results. Now we can
inspect the calculation’s values without the extra clutter:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"A script’slocal scopesare sections of indented code withinconditional structures,functions,
andmethods. When working with variables declared within these scopes,
using theplot*()functions to display their values directlywill
notwork, as plots only work with literals andglobalvariables.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"To display a local variable’s values using plots, one can assign its
results to a global variable and pass that variable to theplot*()call.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Notice!The approach described below works for local variables declared withinconditional structures.
Employing a similar process forfunctionsandmethodsrequirescollections,user-defined types, or other built-in reference types. See theDebugging functionssection for more information.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"For example, this script calculates the all-time maximum and minimum
change in thecloseprice over alengthInputperiod. It uses anifstructure to declare a localchangevariable and update the globalmaxChangeandminChangeonce everylengthInputbars:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Suppose we want to inspect the history of thechangevariable using a
plot. While we cannot plot the variable directly since the script
declares it in a local scope, we can assign its value to anotherglobalvariable for use in aplot*()function.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,"Below, we’ve added adebugChangevariable with an initial value ofnato
the global scope, and the script reassigns its value within theifstructure using the localchangevariable. Now, we can useplot()with thedebugChangevariable to view the history of availablechangevalues:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plottingnumbers,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,"An alternative approach to graphically inspecting the history of a
script’s numeric values is to use Pine’sdrawing types, includinglines,boxes,polylines,
andlabels.",https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,"While Pine drawings don’t display results anywhere other than the chart
pane, scripts can create them from withinlocal scopes, including the
scopes offunctionsandmethods(see theDebugging functionssection to learn more). Additionally, scripts can position
drawings atanyavailable chart location, irrespective of the currentbar_index.",https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,"For example, let’s revisit the “Periodic changes” script from theprevious section. Suppose we’d like to inspect the history of the localchangevariablewithoutusing a plot. In this case, we can avoid
declaring a separate global variable and instead create drawing objects
directly from theifstructure’s local scope.",https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,"The script below is a modification of the previous script that usesboxesto
visualize thechangevariable’s behavior. Inside the scope of theifstructure, it callsbox.new()to create aboxthat spans from the barlengthInputbars ago to the currentbar_index:",https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,,https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Withdrawings,"For more information about usingboxesand
other relateddrawing types, see our User Manual’sLines and boxespage.",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditions,"Many scripts one will create in Pine involve declaring and evaluatingconditionsto dictate specific script actions, such as triggering
different calculation patterns, visuals, signals, alerts, strategy
orders, etc. As such, it’s imperative to understand how to inspect the
conditions a script uses to ensure proper execution.",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditions,"Notice!This section discusses debugging techniques based on chart visuals. To
learn aboutloggingconditions, see thePine Logssection below.",https://www.tradingview.com/pine-script-docs/writing/debugging
Asnumbers,"One possible way to debug a script’s conditions is to definenumeric
valuesbased on them, which allows programmers to inspect them using
numeric approaches, such as those outlined in theprevious section.",https://www.tradingview.com/pine-script-docs/writing/debugging
Asnumbers,"Let’s look at a simple example. This script calculates the ratio
between theohlc4price and thelengthInput-barmoving
average.
It assigns a condition to thepriceAbovevariable that returnstruewhenever the value of the ratio exceeds 1 (i.e., the price is above the
average).",https://www.tradingview.com/pine-script-docs/writing/debugging
Asnumbers,"To inspect the occurrences of the condition, we created adebugValuevariable assigned to the result of an expression that uses the ternary?:operator to return 1 whenpriceAboveistrueand 0 otherwise. The
script plots the variable’s value in all available locations:",https://www.tradingview.com/pine-script-docs/writing/debugging
Asnumbers,,https://www.tradingview.com/pine-script-docs/writing/debugging
Asnumbers,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"Theplotshape()andplotchar()functions provide utility for debugging conditions, as they can plot
shapes or characters at absolute or relative chart locations whenever
they contain atrueor non-naseriesargument.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"These functions can also displaynumericrepresentations of theseriesin the script’s status line and the Data Window, meaning
they’re also helpful for debuggingnumbers.
We show a simple, practical way to debug numbers with these functions in
theTipssection.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"The chart locations of the plots depend on thelocationparameter,
which islocation.abovebarby default.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"Notice!When usinglocation.abovebarorlocation.belowbar,
the function positions the shapes/characters relative to themain
chartprices. If the script plots its values in a separate chart pane,
we recommend debugging with otherlocationoptions to avoid affecting
the pane’s scale.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"Let’s inspect a condition using these functions. The following script
calculates anRSIwith alengthInputlength and acrossBelowvariable whose value is
the result of a condition that returnstruewhen the RSI crosses below
30. It callsplotshape()to display a circle near the top of the pane each time the condition
occurs:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"Suppose we’d like to display the shapes atpreciselocations rather
than relative to the chart pane. We can achieve this by usingconditional numbersandlocation.absolutein theplotshape()call.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"In this example, we’ve modified the previous script by creating adebugNumbervariable that returns thersivalue whencrossBelowistrueandnaotherwise. Theplotshape()function uses this new variable as itsseriesargument andlocation.absoluteas itslocationargument:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"Another handy way to debug conditions is to useplotarrow().
This function plots an arrow with a location relative to themain chart
priceswhenever theseriesargument is nonzero and notna. The
length of each arrow varies with theseriesvalue supplied. As withplotshape()andplotchar(),plotarrow()can also display numeric results in the status line and the Data Window.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"Notice!Since this function always positions arrows relative to the main chart
prices, we recommend only using it if the script occupies the main chart
pane to avoid otherwise interfering with the scale.",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"This example shows an alternative way to inspect ourcrossBelowcondition usingplotarrow().
In this version, we’ve setoverlaytotruein theindicator()function and added aplotarrow()call to visualize the conditional values. ThedebugNumberin this
example measures how far thersidropped below 30 each time the
condition occurs:",https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Plotting conditionalshapes,"To learn more aboutplotshape(),plotchar(),
andplotarrow(),
see this manual’sText and shapespage.",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,"An elegant way to visually represent conditions in Pine is to create
expressions that returncolorvalues based ontrueorfalsestates, as scripts can use them to
control the appearance ofdrawing objectsor the results ofplot*(),fill(),bgcolor(),
orbarcolor()calls.",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,"Notice!As withplot*()functions, scripts can only callfill(),bgcolor()andbarcolor()from theglobal scope, and the functions cannot accept any local
variables.",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,"For example, this script calculates the change incloseprices overlengthInputbars and declares two “bool” variables to
identify when the price change is positive or negative.",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,"The script uses these “bool” values as conditions internaryexpressions to assign the values of three “color” variables, then uses
those variables as thecolorarguments inplot(),bgcolor(),
andbarcolor()to debug the results:",https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,,https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Conditionalcolors,"See theColors,Fills,Backgrounds, andBar coloringpages for
more information about working with colors, filling plots, highlighting
backgrounds, and coloring bars.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,"Pine Script™‘sdrawing typesprovide flexible ways to visualize conditions on the chart,
especially when the conditions are within local scopes.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,"Consider the following script, which calculates a customfilterwith a
smoothing parameter (alpha) that changes its value within anifstructure based on recentvolumeconditions:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,"Suppose we’d like to inspect the conditions that control thealphavalue. There are several ways we could approach the task with chart
visuals. However, some approaches will involve more code and careful
handling.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,"For example, to visualize theifstructure’s conditions usingplotted shapesorbackground colors, we’d have to create additional variables or expressions in
the global scope for theplot*()orbgcolor()functions to access.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,"Alternatively, we can usedrawing typesto visualize the conditions concisely without those extra
steps.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,"The following is a modification of the previous script that callslabel.new()within specific branches of theconditional structureto drawlabelson the
chart whenever those branches execute. These simple changes allow us to
identify those conditions on the chart without much extra code:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usingdrawings,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"When a programmer needs to identify situations where more than one
condition can occur, they may constructcompound conditionsby
aggregating individual conditions with logical operators
(and,or).",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"For example, this line of code shows acompoundConditionvariable that
only returnstrueifcondition1and eithercondition2orcondition3occurs:",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"One may alternatively createnested conditionsusingconditional structuresorternary
expressions.
For example, thisifstructure assignstrueto thenestedConditionvariable ifcondition1andcondition2orcondition3occurs. However, unlike
the logical expression above, the branches of this structure also allow
the script to execute additional code before assigning the “bool”
value:",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"In either case, whether working with compound or nested conditions in
code, one will save many headaches and ensure they work as expected by
validating the behaviors of theindividual conditionsthat compose
them.",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"For example, this script calculates anrsiand themedianof thersioverlengthInputbars. Then, it creates five variables to
represent different singular conditions. The script uses these variables
in a logical expression to assign a “bool” value to thecompoundConditionvariable, and it displays the results of thecompoundConditionusing aconditional background color:",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,,https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"As we see above, it’s not necessarily easy to understand the behavior
of thecompoundConditionby only visualizing its end result, as five
underlying singular conditions determine the final value. To effectively
debug thecompoundConditionin this case, we must also inspect the
conditions that compose it.",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,"In the example below, we’ve added fiveplotchar()calls to displaycharacterson the chart and numeric values in the status line and Data
Window when each singular condition occurs. Inspecting each of these
results provides us with more complete information about thecompoundCondition’s behavior:",https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,,https://www.tradingview.com/pine-script-docs/writing/debugging
Compound and nestedconditions,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Strings,"Stringsare sequences of alphanumeric, control, and other characters (e.g.,
Unicode). They provide utility when debugging scripts, as programmers
can use them to represent a script’s data types as human-readable text
and inspect them withdrawing typesthat have text-related properties, or by usingPine Logs.",https://www.tradingview.com/pine-script-docs/writing/debugging
Strings,"Notice!This section discusses “string” conversions and inspecting strings vialabelsandtables.Boxescan also
display text. However, their utility for debugging strings is more
limited than the techniques covered in this section and thePine Logssection below.",https://www.tradingview.com/pine-script-docs/writing/debugging
Representing othertypes,"Users can create “string” representations of virtually any data type,
facilitating effective debugging when other approaches may not suffice.
Before exploring “string” inspection techniques, let’s briefly review
ways torepresenta script’s data using strings.",https://www.tradingview.com/pine-script-docs/writing/debugging
Representing othertypes,"Pine Script™ includes predefined logic to construct “string”
representations of several other built-in types, such asint,float,bool,array, andmatrix. Scripts can
conveniently represent such types as strings via thestr.tostring()andstr.format()functions.",https://www.tradingview.com/pine-script-docs/writing/debugging
Representing othertypes,"For example, this snippet creates strings to represent multiple values
using these functions:",https://www.tradingview.com/pine-script-docs/writing/debugging
Representing othertypes,"When working with “int” values that symbolize UNIX timestamps, such as
those returned from time-related functions and variables, one can also
usestr.format()orstr.format_time()to convert them to human-readable date strings. This code block
demonstrates multiple ways to convert a timestamp using these functions:",https://www.tradingview.com/pine-script-docs/writing/debugging
Representing othertypes,"When working with types thatdon’thave built-in “string”
representations, e.g.,color,map,user-defined types, etc., programmers can use custom logic or formatting to
construct representations. For example, this code callsstr.format()to represent a “color” value using itsr,g,b,
andtcomponents:",https://www.tradingview.com/pine-script-docs/writing/debugging
Representing othertypes,"There are countless ways one can represent data using strings. When
choosing string formats for debugging, ensure the results arereadableand provide enough information for proper inspection. The
following segments explain ways to validate strings by displaying them
on the chart usinglabels, and
the section after these segments explains how to display strings as
messages in thePine Logspane.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"Labelsallow
scripts to display dynamic text (“series strings”) at any available
location on the chart. Where to display such text on the chart depends
on the information the programmer wants to inspect and their debugging
preferences.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"When inspecting the history of values that affect the chart’s scale or
working with multiple series that have different types, a simple, handy
debugging approach is to drawlabelsthat
displaystring representationson successive bars.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"For example, this script calculates four series:highestClose,percentRank,barsSinceHigh, andisLow. It usesstr.format()to create a formatted “string” representing the series values and a
timestamp, then it callslabel.new()to draw alabelthat display the results at thehighon each bar:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"While the above example allows one to inspect the results of the
script’s series on any bar with alabeldrawing, consecutive drawings like these can clutter the chart,
especially when viewing longer strings.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"An alternative, more visually compact way to inspect successive bars’
values withlabelsis to utilize thetooltipproperty instead of thetextproperty, as alabelwill only show its tooltip when the cursorhoversover it.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"Below, we’ve modified the previous script by using thedebugStringas
thetooltipargument instead of thetextargument in thelabel.new()call. Now, we can view the results on specific bars without the extra
noise:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"It’s important to note that a script can display up to 500labeldrawings, meaning the above examples will only allow users to inspect
the strings from the most recent 500 chart bars.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"If a programmer wants to see the results fromearlierchart bars, one
approach is to create conditional logic that only allows drawings within
a specific time range, e.g.:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"If we use this structure in our previous example withchart.left_visible_bar_timeandchart.right_visible_bar_timeas thestartTimeandendTimevalues, the script will only createlabelsonvisible chart barsand avoid drawing on others. With this logic, we
can scroll to view labels onanychart bar, as long as there are up tomax_labels_countbars in the visible range:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"A frequent approach to debugging a script’s strings withlabelsis to
display them at theendof the chart, namely when the strings do not
change or when only a specific bar’s values require analysis.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,"The script below contains a user-definedprintLabel()function that
draws alabelat the last available time on the chart, regardless of when the script
calls it. We’ve used the function in this example to display a “Hello
world!” string, some basic chart information, and the data feed’s
current OHLCV values:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usinglabels,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Usingtables,"Tablesdisplay strings
within cells arranged in columns and rows at fixed locations relative to
a chart pane’s visual space. They can serve as versatile chart-based
debugging tools, as unlikelabels, they
allow programmers to inspect one ormore“series strings” in an
organized visual structure agnostic to the chart’s scale or bar index.",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingtables,"For example, this script calculates a customfilterwhose result is
the ratio of theEMAof weightedcloseprices to theEMAof theweightseries. For inspection of the variables used in the
calculation, it creates atableinstance on the first bar, initializes the table’s cells on the last
historical bar, then updates necessary cells with “string”
representations of the values frombarsBackbars ago on the latest
chart bar:",https://www.tradingview.com/pine-script-docs/writing/debugging
Usingtables,,https://www.tradingview.com/pine-script-docs/writing/debugging
Usingtables,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Usingtables,"It’s important to note that although tables can provide debugging
utility, namely when working with multiple series or creating on-chart
logs, they carry a higher computational cost than other techniques
discussed on this page and may requiremore code. Additionally, unlikelabels, one can only view a table’s state from the latest script
execution. We therefore recommend using themwiselyandsparinglywhile debugging, opting forsimplifiedapproaches where possible. For
more information about usingtableobjects, see theTablespage.",https://www.tradingview.com/pine-script-docs/writing/debugging
PineLogs,"Pine Logs areinteractive messagesthat scripts can output at specific
points in their execution. They provide a powerful way for programmers
to inspect a script’s data, conditions, and execution flow with minimal
code.",https://www.tradingview.com/pine-script-docs/writing/debugging
PineLogs,"Unlike the other tools discussed on this page, Pine Logs have a
deliberate design for in-depth script debugging. Scripts do not display
Pine Logs on the chart or in the Data Window. Instead, they print
messages with timestamps in the dedicatedPine Logs pane, which
provides specialized navigation features and filtering options.",https://www.tradingview.com/pine-script-docs/writing/debugging
PineLogs,"To access the Pine Logs pane, select “Pine Logs…” from the
Editor’s “More” menu or from the “More” menu of a script loaded on
the chart that useslog.*()functions:",https://www.tradingview.com/pine-script-docs/writing/debugging
PineLogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
PineLogs,"Notice!Onlypersonal scriptscan generate Pine Logs. A published scriptcannotcreate logs, even if it haslog.*()function calls in its
code. One must consider alternative approaches, such as those outlined
in the sections above, whenpublishing scriptswith
debugging functionality.",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,Scripts can create logs by calling the functions in thelog.*()namespace.,https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,Alllog.*()functions have the following signatures:,https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,"Code:
log.*(message) → voidlog.*(formatString, arg0, arg1, ...) → void",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,"The first overload logs a specifiedmessagein the Pine Logs pane. The
second overload is similar tostr.format(),
as it logs a formatted message based on theformatStringand the
additional arguments supplied in the call.",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,"Eachlog.*()function has a differentdebug level, allowing
programmers to categorize andfilterresults shown in the pane:",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,"This code demonstrates the difference between all threelog.*()functions. It callslog.info(),log.warning(),
andlog.error()on the first available bar:",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,"Pine Logs can execute anywhere within a script’s execution. They allow
programmers to track information from historical bars and monitor how
their scripts behave on realtime,unconfirmedbars. When executing on
historical bars, scripts generate a new message once for eachlog.*()call on a bar. On realtime bars, calls tolog.*()functions can create
new entries oneach new tick.",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,"For example, this script calculates the average ratio between each
bar’sclose - openvalue to itshigh - lowrange. When thedenominatoris nonzero, the script callslog.info()to print the values of the calculation’s variables on confirmed bars
andlog.warning()to print the values on unconfirmed bars. Otherwise, it useslog.error()to indicate that division by zero occurred, as such cases can affect theaverageresult:",https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Creatinglogs,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,"Pine Logs include some helpful features that simplify the inspection
process. Whenever a script generates a log, it automatically prefixes
the message with a granular timestamp to signify where the log event
occurred in the time series. Additionally, each entry contains“Source code”and“Scroll to bar”icons, which appear when
hovering over it in the Pine Logs pane:",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,"Clicking an entry’s “Source code” icon opens the script in the Pine
Editor and highlights the specific line of code that triggered the log:",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,"Clicking an entry’s “Scroll to bar” icon navigates the chart to the
specific bar where the log occurred, then temporarily displays a tooltip
containing time information for that bar:",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,"When a chart includes more than one script that generates logs, it’s
important to note that each script maintains its ownindependentmessage history. To inspect the messages from a specific script when
multiple are on the chart, select its title from the dropdown at the top
of the Pine Logs pane:",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspectinglogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"A single script can generate numerous logs, depending on the conditions
that trigger itslog.*()calls. While directly scrolling through the
log history to find specific entries may suffice when a script only
generates a few, it can become unwieldy when searching through hundreds
or thousands of messages.",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"The Pine Logs pane includes multiple options for filtering messages,
which allows one to simplify their results by isolating specificcharacter sequences,start times, anddebug levels.",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"Clicking the “Search” icon at the top of the pane opens a search bar,
which matches text to filter logged messages. The search filter also
highlights the matched portion of each message in blue for visual
reference. For example, here, we entered “confirmed” to match all
results generated by our previous script with the word somewhere in
their text:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"Notice that the results from this search also considered messages with“unconfirmed”as matches since the word contains our query. We can
omit these matches by selecting the “Whole Word” checkbox in the
options at the right of the search bar:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"This filter also supportsregular expressions
(regex), which allow
users to perform advanced searches that match customcharacter
patternswhen selecting the “Regex” checkbox in the search options.
For example, this regex matches all entries that contain “average”
followed by a sequence representing a number greater than 0.5 and less
than or equal to 1:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,average:\s*(0\.[6-9]\d*|0\.5\d*[1-9]\d*|1\.0*),https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"Clicking the “Start date” icon opens a dialog that allows users to
specify the date and time of the first log shown in the results:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"After specifying the starting point, a tag containing the starting time
will appear above the log history:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"Users can filter results bydebug levelusing the checkboxes available
when selecting the rightmost icon in the filtering options. Here, we’ve
deactivated the “info” and “warning” levels so the results will only
contain “error” messages:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"Another, more involved way to interactively filter a script’s logged
results is to createinputslinked to conditional logic that activates specificlog.*()calls in
the code.",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"Let’s look at an example. This code calculates anRMAofcloseprices and declares a few unique conditions to form acompound condition. The script useslog.info()to display important debugging information in the Pine Logs pane,
including the values of thecompoundConditionvariable and the
“bool” variables that determine its result.",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,"We declared thefilterLogsInput,logStartInput, andlogEndInputvariables respectively assigned to aninput.bool()and twoinput.time()calls for custom log filtering. WhenfilterLogsInputistrue, the
script will only generate a new log if the bar’stimeis between thelogStartInputandlogEndInputvalues, allowing us to
interactively isolate the entries that occurred within a specific time
range:",https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Filteringlogs,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingfunctions,"User-defined functionsandmethodsare custom functions written by users. They encapsulate sequences of
operations that a script can invoke later in its execution.",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingfunctions,"Everyuser-defined functionormethodhas alocal scopethat embeds into the script’s global scope. The
parameters in a function’s signature and the variables declared within
the function body belong to that function’s local scope, and they arenotdirectly accessible to a script’s outer scope or the scopes of
other functions.",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingfunctions,"The segments below explain a few ways programmers can debug the values
from a function’s local scope. We will use this script as the starting
point for our subsequent examples. It contains acustomMA()function
that returns an exponential moving average whose smoothing parameter
varies based on thesourcedistance outside the 25th and 75thpercentilesoverlengthbars:",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingfunctions,,https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,"When a programmer wants to inspect auser-defined function’slocal variables byplottingits values,coloringthe background or chart bars, etc., they mustextractthe
values to theglobal scope, as the built-in functions that produce
such outputs can only accept global variables and literals.",https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,"Since the values returned by a function are available to the scope where
a call occurs, one straightforward extraction approach is to have the
function return atuplecontaining all the values that need inspection.",https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,"Here, we’ve modified thecustomMA()function to return atuplecontaining
all the function’s calculated variables. Now, we can call the function
with atuple declarationto make the values available in the global
scope and inspect them withplots:",https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,,https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,"Another, moreadvancedway to extract the values of a function’s
local variables is to pass them to areference typevariable declared
in the global scope.",https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,"Function scopes can access global variables for their calculations.
While a script cannot directly reassign the values of global variables
from within a function’s scope, it can update theelements or
propertiesof those values if they are reference types, such asarrays,matrices,maps, anduser-defined types.",https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,"This version declares adebugDatavariable in the global scope that
references amapwith “string” keys and “float” values. Within the local scope of thecustomMA()function, the script putskey-value pairscontaining each
local variable’s name and value into the map. After calling the
function, the script plots the storeddebugDatavalues:",https://www.tradingview.com/pine-script-docs/writing/debugging
Extracting localvariables,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Local drawings andlogs,"Unlikeplot.*()functions and others that require values accessible to
the global scope, scripts can generatedrawing objectsandPine Logsfrom directly within a function, allowing programmers to
flexibly debug its local variableswithoutextracting values to the
outer scope.",https://www.tradingview.com/pine-script-docs/writing/debugging
Local drawings andlogs,"In this example, we usedlabelsandPine Logsto
displaystring representationsof the values within thecustomMA()scope. Inside the
function, the script callsstr.format()to create a formatted string representing the local scope’s data, then
callslabel.new()andlog.info()to respectively display the text on the chart in a tooltip and log an
“info” message containing the text in thePine Logspane:",https://www.tradingview.com/pine-script-docs/writing/debugging
Local drawings andlogs,,https://www.tradingview.com/pine-script-docs/writing/debugging
Local drawings andlogs,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingloops,"Loopsare structures that
repeatedly execute a code block based on acounter(for),
the contents of acollection(for…in),
or acondition(while).
They allow scripts to perform repetitive tasks without the need for
redundant lines of code.",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingloops,"Each loop instance maintains a separate local scope, which all outer
scopes cannot access. All variables declared within a loop’s scope are
specific to that loop, meaning one cannot use them in an outer scope.",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingloops,"As with other structures in Pine, there are numerous possible ways to
debug loops. This section explores a few helpful techniques, including
extracting local values forplots, inspecting values withdrawings, and tracing a loop’s execution withPine Logs.",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingloops,"We will use this script as a starting point for the examples in the
following segments. It aggregates theclosevalue’s rates of change over 1 -lookbackInputbars and accumulates
them in aforloop, then divides the result by thelookbackInputto calculate a
final average value:",https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingloops,,https://www.tradingview.com/pine-script-docs/writing/debugging
Debuggingloops,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting a singleiteration,"When a programmer needs to focus on a specific loop iteration, there are
multiple techniques they can use, most of which entail using aconditioninside the loop to trigger debugging actions, such as
extracting values to outer variables, creatingdrawings,loggingmessages, etc.",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting a singleiteration,"This example inspects the localrocvalue from a single iteration of
the loop in three different ways. When the loop counter’s value equals
thedebugCounterInput, the script assigns therocto anrocDebugvariable from the global scope forplotting, draws a verticallinefrom 0 to therocvalue usingline.new(),
and logs a message in thePine Logspane
usinglog.info():",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting a singleiteration,,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting a singleiteration,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,"When inspecting the values from several loop iterations, it’s often
helpful to utilizecollectionsor strings to gather the results for use in output functions
after the loop terminates.",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,"This version demonstrates a few ways to collect and display the loop’s
values from all iterations. It declares alogTextstring and adebugValuesarray in the global scope. Inside the local scope of theforloop, the scriptconcatenatesastring representationof thelengthandrocwith thelogTextand callsarray.push()to push the iteration’srocvalue into thedebugValuesarray.",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,"After the loop ends, the scriptplotsthefirstandlastvalue from thedebugValuesarray, draws alabelwith atooltipshowing astring representationof thearray,
and displays thelogTextin thePine Logspane
upon the bar’s confirmation:",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,"Another way to inspect a loop over several iterations is to generate
sequentialPine Logsor create/modifydrawing objectswithin the loop’s scope to trace its execution pattern with
granular detail.",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,"This example usesPine Logsto trace the execution flow of our script’s loop. It
generates a new “info” message on each iteration to track the local
scope’s calculations as the loop progresses on each confirmed bar:",https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,,https://www.tradingview.com/pine-script-docs/writing/debugging
Inspecting multipleiterations,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Organization andreadability,"When writing scripts, it’s wise to prioritize organized, readable
source codes. Code that’s organized and easy to read helps streamline
the debugging process. Additionally, well-written code is easier to
maintain over time.",https://www.tradingview.com/pine-script-docs/writing/debugging
Organization andreadability,"Here are a few quick tips based on ourStyle guideand the
examples on this page:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"There are a few handy techniques we often utilize when debugging our
code:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"When one establishes their typical debugging processes, it’s often
helpful to createkeyboard macrosto speed up repetitive tasks and
spend less time setting up debug outputs in each code.",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"The following is a simpleAutoHotkeyscript (notPine Script™
code) that includes hotstrings for the above five techniques. The script
generates code snippets by entering a specified character sequence
followed by a whitespace:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"Code:
; ————— This is AHK code, not Pine Script™. —————; Specify that hotstrings trigger when they end with space, tab, linefeed, or carriage return.#Hotstring EndChars `t `n `r:X:,,show::SendInput, plotchar(%Clipboard%, ""%Clipboard%"", """", color = chart.fg_color, display = display.all - display.pane){Enter}:X:,,highlight::SendInput, bgcolor(bool(%Clipboard%) ? color.new(color.orange, 80) : na, title = ""%Clipboard% highlight""){Enter}:X:,,print::SendInput, printLabel(string txt, float price = na) => int labelTime = math.max(last_bar_time, chart.right_visible_bar_time), var label result = label.new(labelTime, na, txt, xloc.bar_time, na(price) ? yloc.abovebar : yloc.price, na, label.style_none, chart.fg_color, size.large), label.set_text(result, txt), label.set_y(result, price), result`nprintLabel(){Left}:X:,,tooltip::SendInput, label.new(bar_index, high, color = color.new(chart.fg_color, 70), tooltip = str.tostring(%Clipboard%)){Enter}:X:,,log::SendInput, log.info(str.tostring(%Clipboard%)){Enter}",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"The “,,show” macro generates aplotchar()call that uses the clipboard’s contents for theseriesandtitlearguments. Copying avariableNamevariable or theclose > openexpression and typing “,,show” followed by a space will respectively
yield:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"The “,,highlight” macro generates abgcolor()call that highlights the chart pane’s background with aconditional colorbased on the variable or expression copied to the clipboard.
For example, copying thebarstate.isrealtimevariable and typing “,,highlight” followed by a space will yield:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"The “,,print” macro generates the one-lineprintLabel()function and
creates an emptyprintLabel()call with the cursor placed inside it.
All you need to do after typing “,,print” followed by a space is enter
the text you want to display:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"The “,,tooltip” macro generates alabel.new()call with atooltipargument that usesstr.tostring()on the clipboard’s contents. Copying thevariableNamevariable and
typing “,,tooltip” followed by a space yields:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,"The “,,log” macro generates alog.info()call with amessageargument that usesstr.tostring()on the clipboard’s contents to display string representations of
variables and expressions in thePine Logspane.
Copying the expressionbar_index % 2 == 0and typing “,,log”
followed by a space yields:",https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,Note that:,https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,Previous,https://www.tradingview.com/pine-script-docs/writing/debugging
Speeding up repetitivetasks,Next,https://www.tradingview.com/pine-script-docs/writing/debugging
Introduction,"Pine Script™ is a cloud-based compiled language geared toward efficient
repeated script execution. When a user adds a Pine script to a chart, it
executesnumeroustimes, once for each available bar or tick in the
data feeds it accesses, as explained in this manual’sExecution modelpage.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Introduction,"The Pine Script™ compiler automatically performs several internal
optimizations to accommodate scripts of various sizes and help them run
smoothly. However, such optimizationsdo notprevent performance
bottlenecks in script executions. As such, it’s up to programmers toprofilea script’s runtime performance and identify ways to modify
critical code blocks and lines when they need to improve execution
times.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Introduction,"This page covers how to profile and monitor a script’s runtime and
executions with thePine Profilerand explains some ways programmers can modify their code tooptimizeruntime performance.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Introduction,"For a quick introduction, see the following video, where we profile an example script and optimize it step-by-step, examining several common script inefficiencies and explaining how to avoid them along the way:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
PineProfiler,"Before diving intooptimization, it’s prudent to evaluate a script’s runtime and pinpointbottlenecks, i.e., areas in the code that substantially impact overall
performance. With these insights, programmers can ensure they focus on
optimizing where it truly matters instead of spending time and effort on
low-impact code.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
PineProfiler,"Enter thePine Profiler, a powerful utility that analyzes the
executions of all significant code lines and blocks in a script and
displays helpful performance information next to the lines inside the
Pine Editor. By inspecting the Profiler’s results, programmers can gain
a clearer perspective on a script’s overall runtime, the distribution
of runtime across its significant code regions, and the critical
portions that may need extra attention and optimization.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"The Pine Profiler can analyze the runtime performance of anyeditablescript coded in Pine Script™ v6. To profile a script, add it to the
chart, open the source code in the Pine Editor, and select “Enable
profiler mode” from the dropdown next to the “Add to chart/Update on
chart” option in the top-right corner:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"We will use the script below for our initial profiling example, which
calculates a customoscillatorbased on average distances from thecloseprice to upper and lowerpercentilesoverlengthInputbars. It includes a few different types ofsignificantcode regions, which come with some differences ininterpretationwhile profiling:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"Once enabled, the Profiler collects information from all executions of
the script’s significant code lines and blocks, then displays bars and
approximate runtime percentages to the left of the code lines inside the
Pine Editor:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"When a script contains at leastfoursignificant lines of code, the
Profiler will include “flame” icons next to thetop threecode
regions with the highest performance impact. If one or more of the
highest-impact code regions areoutsidethe lines visible inside the
Pine Editor, a “flame” icon and a number indicating how many critical
lines are outside the view will appear at the top or bottom of the left
margin. Clicking the icon will vertically scroll the Editor’s window to
show the nearest critical line:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"Hovering the mouse pointer over the space next to a line highlights the
analyzed code and exposes a tooltip with additional information,
including the time spent and the number of executions. The information
shown next to each line and in the corresponding tooltip depends on the
profiled code region. Thesection belowexplains different types of code the Profiler analyzes and
how to interpret their performance results.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,Notice!,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"As with profiling tools for other languages, the Pine Profilerwrapsa
script and its significant code withextra calculationsrequired to collect performance data. As such, a script’s
resource usageincreaseswhile profiling, and the Profiler’s
results reflect the script’s runtime with those calculations included.
Therefore, one should interpret the results asestimatesrather than
precise performance measurements.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,"Furthermore, the Profiler cannot collect and display individual
performance data for theinternal calculationsthat also affect
runtime, including the calculations required to track performance,
meaning the time values shown for all a script’s code regionswill
notadd up to exactly 100% of its overall runtime.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling ascript,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For a code line containing single-line expressions, the Profiler bar and
displayed percentage represent the relative portion of the script’s
total runtime spent on that line. The corresponding tooltip displays
three fields:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Here, we hovered the pointer over the space next to line 12 of our
profiled code to view its tooltip:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When a line of code consists of more than one expression separated by
commas, the number of executions shown in the tooltip represents thesumof each expression’s total executions, and the time value
displayed represents the total time spent evaluating all the line’s
expressions.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For instance, this global line from our initial example includes twovariable declarationsseparated by commas. Each uses thevarkeyword, meaning the script only executes them once on the first
available bar. As we see in the Profiler tooltip for the line, it
countedtwoexecutions (one for each expression), and the time value
shown is thecombinedresult from both expressions on the line:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When usingline wrappingfor readability or stylistic purposes, the Profiler
considers all portions of a wrapped line as part of thefirst linewhere it starts in the Pine Editor.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For example, although this code from our initial script occupies more
than one line in the Pine Editor, it’s still treated as asingleline
of code, and the Profiler tooltip displays single-line results, with the
“Line number” field showing thefirstline in the Editor that the
wrapped line occupies:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For a line at the start of alooporconditional structure, the Profiler bar and percentage represent the relative
portion of the script’s runtime spent on theentire code block, not
just the single line. The corresponding tooltip displays four fields:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Here, we hovered over the space next to line 19 in our initial script,
the beginning of a simpleifstructurewithoutelse
ifstatements. As we see below, the tooltip shows performance information
for the entire code block and the current line:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Users can also inspect the results from lines and nested blocks within a
code block’s range to gain more granular performance insights. Here, we
hovered over the space next to line 20 within the code block to view itssingle-line result:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When profiling aswitchstructure or anifstructure that includeselse
ifstatements, the “Line time” field will show the time spent executingallthe structure’s conditional expressions,notjust the
block’s first line. The results for the lines inside the code block
range will show runtime and executions for eachlocal block. This
format is necessary for these structures due to the Profiler’s
calculation and display constraints. Seethis sectionfor more information.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For example, the “Line time” for theswitchstructure in this script represents the time spent evaluatingall fourconditional statements within its body, as the Profilercannottrack
them separately. The results for each line in the code block’s range
represent the performance information for eachlocal block:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When the conditional logic in such structures involves significant
calculations, programmers may require more granular performance
information for each calculated condition. An effective way to achieve
this analysis is to usenestedifblocks
instead of the more compactswitchorif…else
ifstructures. For example, instead of:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,or:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"one can use nestedifblocks
for more in-depth profiling while maintaining the same logical flow:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Below, we changed the previousswitchexample to an equivalent nestedifstructure. Now, we can view the runtime and executions for each
significant part of the conditional pattern individually:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"User-defined functionsandmethodsare functions written by users. They encapsulate code sequences that a
script may execute several times. Users often write functions and
methods for improved code modularity, reusability, and maintainability.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"The indented lines of code within a function represent itslocal
scope, i.e., the sequence that executeseach timethe script calls
it. Unlike code in a script’s global scope, which a script evaluates
once on each execution, the code inside a function may activate zero,
one, ormultiple timeson each script execution, depending on the
conditions that trigger the calls, the number of calls that occur, and
the function’s logic.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"This distinction is crucial to consider while interpreting Profiler
results. When a profiled code containsuser-defined functionormethodcalls:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"This example contains a user-definedsimilarity()function that
estimates the similarity of two series, which the script calls onlyoncefrom the global scope on each execution. In this case, the
Profiler’s results for the code inside the function’s body correspond
to that specific call:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Let’s increase the number of times the script calls the function each
time it executes. Here, we changed the script to call ouruser-defined functionfive times:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"In this case, the local code results no longer correspond to asingleevaluation per script execution. Instead, they represent thecombinedruntime and executions of the local code fromall fivecalls. As we
see below, the results after running this version of the script across
the same data show 137,905 executions of the local code,five timesthe number from when the script only contained onesimilarity()function call:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Notice!When the local scopes of a script’suser-defined functionsormethodscontain calls torequest.*()functions, thetranslated formof the
script extracts such callsoutsidethe functions’ scopes and
evaluates themseparately. Consequently, the Profiler’s results for
lines with calls to thoseuser-defined functionswill notinclude the time spent on therequest.*()calls. See thesection belowto learn more.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Pine scripts can request data from othercontexts, i.e., different
symbols, timeframes, or data modifications than what the chart’s data
uses by calling therequest.*()family of functions or specifying an
alternatetimeframein theindicator()declaration statement.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When a script requests data from another context, it evaluates all
required scopes and calculations within that context, as explained in
theOther timeframes and datapage. This behavior can affect the runtime of a script’s
code regions and the number of times they execute.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"The Profiler information for any codelineorblockrepresents the results from executing the code inall
necessary contexts, which may or may not include the chart’s data.
Pine Script™ determines which contexts to execute code within based on
the calculations required by a script’s data requests and outputs.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Let’s look at a simple example. This initial script only uses the
chart’s data for its calculations. It declares apricesArrayvariable
with thevaripkeyword, meaning thearrayassigned to it persists across the data’s history and all available
realtime ticks. On each execution, the script callsarray.push()to push a newclosevalue into thearray,
and itplotsthearray’s
size.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"After profiling the script across all the bars on an intraday chart, we
see that the number of elements in thepricesArraycorresponds to the
number of executions the Profiler shows for thearray.push()call on line 8:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Now, let’s try evaluating the size of thepricesArrayfromanother
contextinstead of using the chart’s data. Below, we’ve added arequest.security()call witharray.size(pricesArray)as itsexpressionargument to retrieve the value calculated on the
“1D” timeframe and plotted that result instead.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"In this case, the number of executions the Profiler shows on line 8
still corresponds to the number of elements in thepricesArray.
However, it did not execute the same number of times since the script
did not require thechart’s datain the calculations. It only needed
to initialize thearrayand evaluatearray.push()across all the requesteddaily data, which has a different number of
price updates than our current intraday chart:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"If this script were to plot thearray.size()value directly in addition to the requested daily value, it would then
require the creation oftwoarrays(one for each context) and the execution ofarray.push()across both the chart’s dataandthe data from the daily timeframe.
As such, the declaration on line 5 will executetwice, and the results
on line 8 will reflect the time and executions accumulated from
evaluating thearray.push()call acrossboth separate datasets:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"It’s important to note that when a script calls auser-defined functionormethodthat containsrequest.*()calls in its local scope, the script’stranslated formextracts therequest.*()callsoutsidethe scope
and encapsulates the expressions they depend on withinseparate
functions. When the script executes, it evaluates the requiredrequest.*()calls first, thenpassesthe requested data to amodified formof theuser-defined function.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Since the translated script executes auser-defined function’sdata requests separatelybeforeevaluating non-requested
calculations in its local scope, the Profiler’s results for lines
containing calls to the functionwill notinclude the time spent on
itsrequest.*()calls or their required expressions.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"As an example, the following script contains a user-definedgetCompositeAvg()function with arequest.security()call that requests themath.avg()of 10ta.wma()calls with differentlengtharguments from a specifiedsymbol. The
script uses the function to request the average result using aHeikin
Ashiticker ID:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"After profiling the script, users might be surprised to see that the
runtime results shown inside the function’s body heavilyexceedthe
results shown for thesinglegetCompositeAvg()call:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"The results appear this way since the translated script includes
internal modifications thatmovedtherequest.security()call and its expressionoutsidethe function’s scope, and the
Profiler has no way to represent the results from those calculations
other than displaying them next to therequest.security()line in this scenario. The code below roughly illustrates how the
translated script looks:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When inspecting a profiled script’s results, it’s crucial to
understand thatnot allcode in a script necessarily impacts runtime
performance. Some code has no direct performance impact, such as a
script’s declaration statement andtypedeclarations. Other code regions with insignificant expressions, such as
mostinput.*()calls, variable references, orvariable declarationswithout significant calculations, have little tono effecton a script’s runtime. Therefore, the Profiler willnotdisplay
performance results for these types of code.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Additionally, Pine scripts do not execute code regions that theiroutputs(plots,drawings,logs, etc.) do
not depend on, as the compiler automaticallyremovesthem during
translation. Since unused code regions havezeroimpact on a script’s
performance, the Profiler willnotdisplay any results for them.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"The following example contains abarsInRangevariable and aforloop
that adds 1 to the variable’s value for each historicalcloseprice between the currenthighandlowoverlengthInputbars. However, the scriptdoes not usethese
calculations in its outputs, as it onlyplotsthecloseprice. Consequently, the script’s compiled formdiscardsthat
unused code and only considers theplot(close)call.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"The Profiler does not displayanyresults for this script since it
does not execute anysignificantcalculations:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"If we change the script to plot thebarsInRangevalue instead, the
declared variables and theforloop
are no longer unused since the output depends on them, and the Profiler
will now display performance information for that code:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"When possible, the compiler also simplifies certain instances ofredundant codein a script, such as some forms of identical
expressions with the samefundamental typevalues. This optimization allows the compiled script to only execute
such calculationsonce, on the first occurrence, andreusethe
calculated result for each repeated instance that the outputs depend on.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"If a script contains repetitive code and the compiler simplifies it, the
Profiler will only show results for thefirst occurrenceof the code
since that’s the only time the script requires the calculation.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For example, this script contains a code line that plots the value ofta.sma(close,
100)and 12 code lines that plot the value ofta.sma(close,
500):",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Since the last 12 lines all contain identicalta.sma()calls, the compiler can automatically simplify the script so that it
only needs to evaluateta.sma(close,
500)onceper execution rather than repeating the calculation 11 more
times.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"As we see below, the Profiler only shows results for lines 5 and 9.
These are the only parts of the code requiring significant calculations
since theta.sma()calls on lines 10-20 are redundant in this case:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Another type of repetitive code optimization occurs when a script
contains two or moreuser-defined functionsormethodswith identical compiled forms. In such a case, the compiler simplifies
the script byremovingthe redundant functions, and the script will
treat all calls to the redundant functions as calls to thefirstdefined version. Therefore, the Profiler will only show local code
performance results for thefirstfunction since the discarded
“clones” will never execute.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"For instance, the script below contains twouser-defined functions,metallicRatio()andcalcMetallic(), that calculate ametallic ratioof a given
order raised to a specified exponent:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"Despite the differences in the function and parameter names, the two
functions are otherwise identical, which the compiler detects while
translating the script. In this case, itdiscardsthe redundantcalcMetallic()function, and the compiled script treats thecalcMetallic()call as ametallicRatio()call.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,"As we see here, the Profiler shows performance information for thecalcMetallic()andmetallicRatio()calls on lines 21 and 22, but it
doesnotshow any results for the local code of thecalcMetallic()function on line 18. Instead, the Profiler’s information on line 13
within themetallicRatio()function reflects the local code results
frombothfunction calls:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Interpreting profiledresults,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"The Pine Profiler wraps all necessary code regions with specializedinternal functionsto track and collect required information across
script executions. It then passes the information to additional
calculations that organize and display the performance results inside
the Pine Editor. This section gives users a peek into how the Profiler
applies internal functions to wrap Pine code and collect performance
data.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"There are two main internal(non-Pine)functions the Profiler wraps
significant code with to facilitate runtime analysis. The first function
retrieves the current system time at specific points in the script’s
execution, and the second maps cumulative elapsed time and execution
data to specific code regions. We represent these functions in this
explanation asSystem.timeNow()andregisterPerf()respectively.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"When the Profiler detects code that requires analysis, it addsSystem.timeNow()above the code to get the initial time before
execution. Then, it addsregisterPerf()below the code to map and
accumulate the elapsed time and number of executions. The elapsed time
added on eachregisterPerf()call is theSystem.timeNow()valueafterthe execution minus the valuebeforethe execution.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"The followingpseudocodeoutlines this process for asingle lineof code, where_startXrepresents the starting time for
thelineXline:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"The process is similar forcode blocks. The difference is that theregisterPerf()call maps the
data to arange of linesrather than a single line. Here,lineXrepresents thefirstline in the code block, andlineYrepresents
the block’slastline:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"Let’s now look at how the Profiler wraps a full script and all its
significant code. We will start with this script, which calculates three
pseudorandom series and displays theiraverageresult. The script utilizes anobjectof auser-defined typeto store a pseudorandom state, amethodto calculate new values and update the state, and anif…else
ifstructure to update each series based on generated values:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"The Profiler will wrap the entire script and all necessary code regions,
excluding anyinsignificant, unused, or redundant code, with the aforementionedinternalfunctions to collect
performance data. Thepseudocodebelow demonstrates how this process
applies to the above script:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"After running the wrapped script to collect performance data,additionalinternal calculations organize the results and display
relevant information inside the Pine Editor:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"The“Line time”calculation forcode blocksalso occurs at this stage, as the Profiler cannot
individually wraploopheaders or the conditional statements iniforswitchstructures. This field’s value represents thedifferencebetween a
block’s total time and the sum of its local code times, which is why
the “Line time” value for aswitchblock or anifblock
withelse
ifexpressions represents the time spent onallthe structure’s
conditional statements, not just the block’sinitial lineof code. If
a programmer requires more granular information for each conditional
expression in such a block, they can reorganize the logic into anestedifstructure, as explainedhere.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
A look into the Profiler’s innerworkings,"Notice!The Profilercannotcollect individual performance data for any
requiredinternalcalculations and display their results inside the
Pine Editor. Consequently, the time values the Profiler displays for all
code regions in a scriptwill notadd up to 100% of its total
runtime.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"When a code’stime
complexityis not
constant or its execution pattern varies with its inputs, function
arguments, or available data, it’s often wise to profile the code
acrossdifferent configurationsand data feeds for a more well-rounded
perspective on its general performance.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"For example, this simple script uses aforloop
to calculate the sum of squared distances between the currentcloseprice andlengthInputprevious prices, then plots thesquare
rootof that sum on each bar. In this case, thelengthInputdirectly
impacts the calculation’s runtime since it determines the number of
times the loop executes its local code:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"Let’s try profiling this script with differentlengthInputvalues.
First, we’ll use the default value of 25. The Profiler’s results for
this specific run show that the script completed 20,685 executions in
about 96.7 milliseconds:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"Here, we’ve increased the input’s value to 50 in the script’s
settings. The results for this run show that the script’s total runtime
was 194.3 milliseconds, close totwicethe time from the previous run:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"In the next run, we changed the input’s value to 200. This time, the
Profiler’s results show that the script finished all executions in
approximately 0.8 seconds, aroundfour timesthe previous run’s time:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"We can see from these observations that the script’s runtime appears to
scalelinearlywith thelengthInputvalue, excluding other factors
that may affect performance, as one might expect since the bulk of the
script’s calculations occur within the loop and the input’s value
controls how many times the loop must execute.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Profiling acrossconfigurations,"Notice!It’s often wise to profile each configurationmore than onceto
reduce the impact of outliers while assessing how a script’s
performance varies with its inputs or data. See thesection belowfor more information.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"The runtime resources available to a scriptvaryover time.
Consequently, the time it takes to evaluate a code region, even one with
constantcomplexity,fluctuatesacross executions, and the cumulative performance results
shown by the Profilerwill varywith each independent script run.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"Users can enhance their analysis byrestartinga script several times
and profiling each independent run. Averaging the results from each
profiled run and evaluating the dispersion of runtime results can help
users establish more robust performance benchmarks and reduce the impact
ofoutliers(abnormally long or short runtimes) in their conclusions.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"Incorporating adummy input(i.e., an input that does nothing) into a
script’s code is a simple technique that enables users torestartit
while profiling. The input will not directly affect any calculations or
outputs. However, as the user changes its value in the script’s
settings, the script restarts and the Profiler re-analyzes the executed
code.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"For example, this scriptqueuespseudorandom values with a constant seed through anarraywith a fixed size, and it calculates and plots the array’saveragevalue on each bar. For profiling purposes, the script includes adummyInputvariable with aninput.int()value assigned to it. The input does nothing in the code aside from
allowing us torestartthe script each time we change its value:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"After the first script run, the Profiler shows that it took 308.6
milliseconds to execute across all of the chart’s data:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"Now, let’s change the dummy input’s value in the script’s settings to
restart it without changing the calculations. This time, it completed
the same code executions in 424.6 milliseconds, 116 milliseconds longer
than the previous run:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"Restarting the script again yields another new result. On the third run,
the script finished all code executions in 227.4 milliseconds, the
shortest time so far:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"After repeating this process several times and documenting the results
from each run, one can manually calculate theiraverageto estimate
the script’s expected total runtime:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,AverageTime = (time1 + time2 + ... + timeN) / N,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Repetitiveprofiling,"Notice!Whether profiling a script over a single run or multiple, it’s crucial
to understand thatresults will vary. While averaging results across
several profiled script runs can help derive more stable performance
estimates, such estimates arenotimpervious to variance.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimization,"Code optimization, not to be confused with indicator or strategy
optimization, involves modifying a script’s source code for improved
execution time, resource efficiency, and scalability. Programmers may
use various approaches to optimize a script when they need enhanced
runtime performance, depending on what a script’s calculations entail.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimization,"Fundamentally, most techniques one will use to optimize Pine code
involvereducingthe number of times critical calculations occur orreplacingsignificant calculations with simplified formulas or
built-ins. Both of these paradigms often overlap.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimization,"The following sections explain several straightforward concepts
programmers can apply to optimize their Pine Script™ code.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimization,"Notice!Before looking for ways to optimize a script,profile itto gauge its performance and identify thecritical code
regionsthat will benefit the most from optimization.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"Pine Script™ features a variety ofbuilt-infunctions and variables
that help streamline script creation. Many of Pine’s built-ins feature
internal optimizations to help maximize efficiency and minimize
execution time. As such, one of the simplest ways to optimize Pine code
is to utilize these efficient built-ins in a script’s calculations when
possible.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"Let’s look at an example where one can replace user-defined
calculations with a concise built-in call to substantially improve
performance. Suppose a programmer wants to calculate the highest value
of a series over a specified number of bars. Someone not familiar with
all of Pine’s built-ins might approach the task using a code like the
following, which uses aloopon each bar to comparelengthhistorical values of asourceseries:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"Alternatively, one might devise a more optimized Pine function by
reducing the number of times the loop executes, as iterating over the
history of thesourceto achieve the result is only necessary when
specific conditions occur:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"The built-inta.highest()function will outperformbothof these implementations, as its
internal calculations are highly optimized for efficient execution.
Below, we created a script that plots the results of callingpineHighest(),fasterPineHighest(), andta.highest()to compare their performance using theProfiler:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"Theprofiled resultsover 20,735 script executions show the call topineHighest()took the most time to execute, with a runtime of 57.9
milliseconds, about 69.3% of the script’s total runtime. ThefasterPineHighest()call performed much more efficiently, as it only
took about 16.9 milliseconds, approximately 20.2% of the total runtime,
to calculate the same values.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"The most efficientby far, however, was theta.highest()call, which only required 3.2 milliseconds (~3.8% of the total runtime)
to execute across all the chart’s data and compute the same values in
this run:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"While these results effectively demonstrate that the built-in function
outperforms ouruser-defined functionswith a smalllengthargument of 20, it’s crucial to
consider that the calculations required by the functionswill varywith the argument’s value. Therefore, we can profile the code while
usingdifferent argumentsto gauge how its runtime scales.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"Here, we changed thelengthargument in each function call from 20 to
200 andprofiled the scriptagain to observe the changes in performance. The time spent
on thepineHighest()function in this run increased to about 0.6
seconds (~86% of the total runtime), and the time spent on thefasterPineHighest()function increased to about 75 milliseconds. Theta.highest()function, on the other hand,did notexperience a substantial runtime
change. It took about 5.8 milliseconds this time, only a couple of
milliseconds more than the previous run.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,"In other words, while ouruser-defined functionsexperienced significant runtime growth with a higherlengthargument in this run, the change in the built-inta.highest()function’s runtime was relatively marginal in this case, thus further
emphasizing its performance benefits:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Usingbuilt-ins,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"The Pine Script™ compiler can automatically simplify some types ofrepetitive codewithout a programmer’s intervention. However, this
automatic process has its limitations. If a script contains repetitive
calculations that the compilercannotreduce, programmers can reduce
the repetitionmanuallyto improve their script’s performance.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"For example, this script contains avaluesAbove()methodthat counts the number of elements in anarrayabove the element at a specified index. The script plots the number of
values above the element at the last index of adataarray with a
calculatedplotColor. It calculates theplotColorwithin aswitchstructure that callsvaluesAbove()in all 10 of its conditional
expressions:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"Theprofiled resultsfor this script show that it spent about 2.5 seconds
executing 21,201 times. The code regions with the highest impact on the
script’s runtime are theforloop
within thevaluesAbove()local scope starting on line 8 and theswitchblock that starts on line 21:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"Notice that the number of executions shown for the local code withinvaluesAbove()is substantiallygreaterthan the number shown for the
code in the script’s global scope, as the script calls the method up to
11 times per execution, and the results for afunction’s local codereflect thecombinedtime and executions from each
separate call:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"Although eachvaluesAbove()call uses thesamearguments and returns
thesameresult, the compiler cannot automatically reduce this code
for us during translation. We will need to do the job ourselves. We can
optimize this script by assigning the value ofdata.valuesAbove(99)to
avariableandreusingthe value in all other areas requiring the
result.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"In the version below, we modified the script by adding acountvariable to reference thedata.valuesAbove(99)value. The script uses
this variable in theplotColorcalculation and theplot()call:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,"With this modification, theprofiled resultsshow a significant improvement in performance, as the script
now only needs to evaluate thevaluesAbove()callonceper
execution rather than up to 11 separate times:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducingrepetition,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"The built-in functions in therequest.*()namespace allow scripts to
retrieve data fromother contexts. While these functions provide utility in many applications,
it’s important to consider that each call to these functions can have a
significant impact on a script’s resource usage.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"A single script can contain up to 40 calls to therequest.*()family
of functions. However, users should strive to keep their scripts’request.*()calls wellbelowthis limit to keep the performance
impact of their data requests as low as possible.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"When a script requests the values of several expressions from thesamecontext with multiplerequest.security()orrequest.security_lower_tf()calls, one effective way to optimize such requests is tocondensethem
into a singlerequest.*()call that uses atupleas itsexpressionargument. This optimization not only
helps improve the runtime of the requests; it also helps reduce the
script’smemory usageand compiled size.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"As a simple example, the following script requests nineta.percentrank()values with different lengths from a specified symbol using nine
separate calls torequest.security().
It thenplotsall nine
requested values on the chart to utilize them in the outputs:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"The results fromprofiling the scriptshow that it took the script 340.8 milliseconds to complete
its requests and plot the values in this run:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"Since all therequest.security()calls request data from thesame context, we can optimize the
code’s resource usage by merging all of them into a singlerequest.security()call that uses atupleas itsexpressionargument:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,"As we see below, theprofiled resultsfrom running this version of the script show that it took
228.3 milliseconds this time, a decent improvement over the previous
run:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing `request.*()`calls,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,"Pine Script™‘sdrawing typesallow scripts to draw custom visuals on a chart that one
cannot achieve through other outputs such asplots. While these types
provide greater visual flexibility, they also have ahigherruntime
and memory cost, especially when a script unnecessarilyrecreatesdrawings instead of directly updating their properties to change their
appearance.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,"Mostdrawing types, excludingpolylines,
feature built-insetter functionsin their namespaces that allow
scripts to modify a drawingwithoutdeleting and recreating it.
Utilizing these setters is typically less computationally expensive than
creating a new drawing object when onlyspecific propertiesrequire
modification.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,"For example, the script below compares deleting and redrawingboxesto usingbox.set*()functions. On the first bar, it declares theredrawnBoxesandupdatedBoxesarraysand executes aloopto push
25boxelements into them.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,"The script uses a separateforloop
to iterate across thearraysand update the drawings on each execution. Itrecreatestheboxesin
theredrawnBoxesarray usingbox.delete()andbox.new(),
whereas itdirectly modifiesthe properties of theboxesin theupdatedBoxesarray usingbox.set_lefttop()andbox.set_rightbottom().
Both approaches achieve the same visual result. However, the latter is
more efficient:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,"The results fromprofiling this scriptshow that line 24, which contains thebox.new()call, is theheaviestline in thecode blockthat executes on each bar, with a runtime close todoublethe combined time spent on thebox.set_lefttop()andbox.set_rightbottom()calls on lines 27 and 28:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Avoidingredrawing,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,"When a script producesdrawing objectsthat change acrosshistorical bars, users will only ever
see theirfinal resultson those bars since the script completes its
historical executions when it first loads on the chart. The only time
one will see such drawingsevolveacross executions is duringrealtime bars, as new data flows in.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,"Since the evolving outputs from dynamicdrawingson historical bars arenever visibleto a user, one can
often improve a script’s performance byeliminatingthe historical
updates that don’t impact the final results.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,"For example, this script creates atablewith two columns and 21 rows to visualize the history of anRSIin a paginated, tabular format. The script initializes the cells of theinfoTableon thefirst
bar,
and it references the history of the calculatedrsito update thetextandbgcolorof the cells in the second column within aforloop
on each bar:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,"Afterprofilingthe script, we see that the code with the highest impact on
performance is theforloop
that starts on line 20, i.e., thecode blockthat updates the table’s cells:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,"This critical code region executesexcessivelyacross the chart’s
history, as users will only see thetable’sfinalhistorical result. The only time that users will see thetableupdate is on thelast historical barand across all subsequentrealtime bars. Therefore, we can optimize this script’s resource
usage by restricting the executions of this code to only thelast
available
bar.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,"In this script version, we placed theloopthat updates thetablecells within anifstructure that usesbarstate.islastas its condition, effectively restricting the code block’s executions
to only the last historical bar and all realtime bars. Now, the scriptloadsmore efficiently since all the table’s calculations only
requireonehistorical execution:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Reducing drawingupdates,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"When a script performs a critical calculation that changesinfrequentlythroughout all executions, one can reduce its runtime bysaving the resultto a variable declared with thevarorvaripkeywords andonlyupdating the value if the calculation changes. If
the script calculatesmultiplevalues excessively, one can store them
withincollections,matrices, andmapsorobjectsofuser-defined types.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"Let’s look at an example. This script calculates a weighted moving
average with custom weights based on a generalizedwindow
function. Thenumeratoris the sum of weightedclosevalues, and thedenominatoris the sum of the calculated weights. The
script uses aforloop
that iterateslengthInputtimes to calculate these sums, then it plots
their ratio, i.e., the resulting average:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"Afterprofilingthe script’s performance over our chart’s data, we see
that it took about 241.3 milliseconds to calculate the default 50-bar
average across 20,155 chart updates, and the critical code with thehighest impacton the script’s performance is the loopblockthat starts on line 17:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"Since the number of loop iterationsdependson thelengthInputvalue, let’s test how its runtime scales withanother configurationrequiring heavier looping. Here, we set the value to 2500.
This time, the script took about 12 seconds to complete all of its
executions:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"Now that we’ve pinpointed the script’shigh-impactcode and
established a benchmark to improve, we can inspect the critical code
block to identify optimization opportunities. After examining the
calculations, we can observe the following:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"In the modified script below, we’ve added aweightsvariable to
reference anarraythat stores each calculatedweight. This variable and thedenominatorboth include thevarkeyword in their declarations, meaning the values assigned to them willpersistthroughout all script executions until explicitly reassigned.
The script calculates their values using aforloop
that only executes on thefirst chart
bar.
Across all other bars, it calculates thenumeratorusing afor…inloop that references thesaved valuesfrom theweightsarray:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,"With this optimized structure, theprofiled resultsshow that our modified script with a highlengthInputvalue of 2500 took about 5.9 seconds to calculate across the same data,
abouthalfthe time of our previous version:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Storing calculatedvalues,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Loopsallow Pine scripts to
performiterativecalculations on each execution. Each time a loop
activates, its local code may executeseveral times, often leading to
asubstantial increasein resource usage.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Pine loops are necessary forsomecalculations, such as manipulating
elements withincollectionsor looking backward through a dataset’s history to
calculate valuesonlyobtainable on the current bar. However, in many
other cases, programmers use loops when theydon’t need to, leading
to suboptimal runtime performance. In such cases, one may eliminate
unnecessary loops in any of the following ways, depending on what their
calculations entail:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"This simple example contains anavgDifference()function that
calculates the average difference between the current bar’ssourcevalue and all the values fromlengthprevious bars. The script calls
this function to calculate the average difference between the currentcloseprice andlengthInputprevious prices, then itplotsthe result on the
chart:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"After inspecting the script’sprofiled resultswith the default settings, we see that it took about 64
milliseconds to execute 20,157 times:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Since we use thelengthInputas thelengthargument in theavgDifference()call and that argument controls how many times the
loop inside the function must iterate, our script’s runtime willgrowwith thelengthInputvalue. Here, we set the input’s value
to 2000 in the script’s settings. This time, the script completed its
executions in about 3.8 seconds:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"As we see from these results, theavgDifference()function can be
costly to call, depending on the specifiedlengthInputvalue, due to
itsforloop that executes on each bar. However,loopsarenotnecessary
to achieve the output. To understand why, let’s take a closer look at
the loop’s calculations. We can represent them with the following
expression:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Notice that it adds thecurrentsourcevaluelengthtimes. These
iterative additions are not necessary. We can simplify that part of the
expression tosource * length, which reduces it to the following:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,or equivalently:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"After simplifying and rearranging this representation of the loop’s
calculations, we see that we can compute the result in a simpler way andeliminatethe loop by subtracting the previous bar’srolling
sumofsourcevalues from thesource * lengthvalue, i.e.:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"ThefastAvgDifference()function below is aloop-freealternative
to the originalavgDifference()function that uses the above
expression to calculate the sum ofsourcedifferences, then divides
the expression by thelengthto return the average difference:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Now that we’ve identified a potential optimized solution, we can
compare the performance offastAvgDifference()to the originalavgDifference()function. The script below is a modified form of the
previous version that plots the results from calling both functions with
thelengthInputas thelengthargument:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Theprofiled resultsfor the script with the defaultlengthInputof 20 show a
substantial difference in runtime spent on the two function calls. The
call to the original function took about 47.3 milliseconds to execute
20,157 times on this run, whereas our optimized function only took 4.5
milliseconds:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Now, let’s compare the performance with theheavierlengthInputvalue of 2000. As before, the runtime spent on theavgDifference()function increased significantly. However, the time spent executing thefastAvgDifference()call remained very close to the result from the
previousconfiguration. In other words, while our original function’s runtime
scales directly with itslengthargument, our optimized function
demonstrates relativelyconsistentperformance since it does not
require a loop:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Eliminatingloops,"Notice!Not all iterative calculations will necessarily have loop-free
alternatives. In the case where a script canonlyachieve its
results through iteration, programmers can identify possible ways to
optimize loops to improve performance. See thenext sectionfor more information.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"Although Pine’sexecution modeland
the available built-ins ofteneliminatethe need forloopsin many cases, there
are still instances where a scriptwillrequireloopsfor some types of
tasks, including:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"When a script usesloopsthat a programmer cannoteliminate, there areseveral
techniquesone can use
to reduce their performance impact. This section explains two of the
most common, useful techniques that can help improve a required loop’s
efficiency.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"Notice!Before identifying ways tooptimizea loop, we recommend searching for
ways toeliminateit first. Ifno solutionexists that makes the loop
unnecessary, then proceed with attempting to reduce its overhead.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"The code executed within aloop’slocal scope can have amultiplicativeimpact on its
overall runtime, as each time a loop statement executes, it will
typically triggerseveraliterations of the local code. Therefore,
programmers should strive to keep a loop’s calculations as simple as
possible by eliminating unnecessary structures, function calls, and
operations to minimize the performance impact, especially when the
script must evaluate its loopsnumerous timesthroughout all its
executions.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"For example, this script contains afilteredMA()function that
calculates a moving average of up tolengthuniquesourcevalues,
depending on thetrueelements in a specifiedmaskarray.
The function queues the uniquesourcevalues into adataarray,
uses afor…inloop to iterate over thedataand calculate thenumeratoranddenominatorsums, then returns the ratio of those sums. Within the
loop, it only adds values to the sums when thedataelement is notnaand
themaskelement at theindexistrue. The script utilizes thisuser-defined functionto calculate the average of up to 100 uniquecloseprices filtered by arandMaskand plots the result on the chart:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"Afterprofiling the script, we see it took about two seconds to execute 21,778 times.
The code with the highest performance impact is the expression on line
37, which calls thefilteredMA()function. Within thefilteredMA()function’s scope, thefor…inloop has the highest impact, with theindexcalculation in the loop’s
scope (line 22) contributing the most to the loop’s runtime:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"The above code demonstrates suboptimal usage of afor…inloop, as wedo notneed to callarray.indexof()to retrieve theindexin this case. Thearray.indexof()function can becostlyto call within a loop since it must search
through thearray’scontents and locate the corresponding element’s indexeach timethe
script calls it.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"To eliminate this costly call from ourfor…inloop, we can use thesecond formof the structure, which produces atuplecontaining theindexand the element’s value on each
iteration:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"In this version of the script, we removed thearray.indexof()call on line 22 since it isnotnecessary to achieve the intended
result, and we changed thefor…inloop to use the alternative form:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"With this simple change, our loop is much more efficient, as it no
longer needs to redundantly search through thearrayon each iteration to keep track of the index. Theprofiled resultsfrom this script run show that it took only 0.6 seconds to
complete its executions, a significant improvement over the previous
version’s result:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"Loop-invariant codeis any code region within aloop’sscope that produces
anunchangingresult on each iteration. When a script’sloopscontain loop-invariant
code, it can substantially impact performance in some cases due to
excessive,unnecessarycalculations.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"Programmers can optimize a loop with invariant code bymovingthe
unchanging calculationsoutsidethe loop’s scope so the script only
needs to evaluate them once per execution rather than repetitively.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"The following example contains afeatureScale()function that creates
a rescaled version of anarray.
Within the function’sfor…inloop, it scales each element by calculating its distance from thearray.min()and dividing the value by thearray.range().
The script uses this function to create arescaledversion of apricesarray andplotsthe
difference between therescaled.first()andrescaled.avg()values on the chart:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"As we see below, theprofiled resultsfor this script after 20,187 executions show it completed
its run in about 3.3 seconds. The code with the highest impact on
performance is the line containing thefeatureScale()function call,
and the function’s critical code is thefor…inloop block starting on line 7:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"Upon examining the loop’s calculations, we can see that thearray.min()andarray.range()calls on line 8 areloop-invariant, as they will always produce thesame resultacross each iteration. We can make our loop much more
efficient by assigning the results from these calls to variablesoutsideits scope and referencing them as needed.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"ThefeatureScale()function in the script below assigns thearray.min()andarray.range()values tominValueandrangeValuevariablesbeforeexecuting thefor…inloop. Inside the loop’s local scope, itreferencesthe variables
across its iterations rather than repetitively calling thesearray.*()functions:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,"As we see from the script’sprofiled results, moving theloop-invariantcalculations outside the loop
leads to a substantial performance improvement. This time, the script
completed its executions in only 289.3 milliseconds:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Optimizingloops,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"Pine scripts createhistorical buffersfor all variables and function
calls their outputs depend on. Each buffer contains information about
the range of historical values the script can access with the
history-referencing operator[].",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"A scriptautomaticallydetermines the required buffer size for all its
variables and function calls by analyzing the historical references
executed during thefirst 244 barsin a dataset. When a script only
references the history of a calculated valueafterthose initial bars,
it willrestartits executions repetitively across previous bars
with successively larger historical buffers until it either determines
the appropriate size or raises a runtime error. Those repetitive
executions can significantly increase a script’s runtime in some cases.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"When a scriptexcessivelyexecutes across a dataset to calculate
historical buffers, one effective way to improve its performance isexplicitlydefining suitable buffer sizes using themax_bars_back()function. With appropriate buffer sizes declared explicitly, the script
does not need to re-execute across past data to determine the sizes.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"For example, the script below uses apolylineto draw a basic histogram representing the distribution of calculatedsourcevalues over 500 bars. On thelast available
bar,
the script uses aforloop
to look back through historical values of the calculatedsourceseries
and determine thechart pointsused by thepolylinedrawing. It alsoplotsthe
value ofbar_index + 1to verify the number of bars it executed
across:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"Since the scriptonlyreferences pastsourcevalues on thelast
bar, it willnotconstruct a suitable historical buffer for the
series within the first 244 bars on a larger dataset. Consequently, it
willre-executeacross all historical bars to identify the
appropriate buffer size.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"As we see from theprofiled resultsafter running the script across 20,320 bars, the number ofglobalcode executions was 162,560, which iseight timesthe
number of chart bars. In other words, the script had torepeatthe
historical executionsseven more timesto determine the appropriate
buffer for thesourceseries in this case:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"This script will only reference the most recent 500sourcevalues on
the last historical bar and all realtime bars. Therefore, we can help it
establish the correct bufferwithoutre-execution by defining a
500-bar referencing length withmax_bars_back().",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"In the following script version, we addedmax_bars_back(source,
500)after the variable declaration to explicitly specify that the script
will access up to 500 historicalsourcevalues throughout its
executions:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"With this change, our script no longer needs to re-execute across all
the historical data to determine the buffer size. As we see in theprofiled resultsbelow, the number of global code executions now aligns with
the number of chart bars, and the script took substantially less time to
complete all of its historical executions:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,Note that:,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,Notice!,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"When explicitly defining a buffer size for a problematic historical
reference withmax_bars_back(),
it’s imperative to ensure that the scriptwill notuse more data
than specified later in its executions, as the script will still
re-execute on historical bars and try to calculate the buffer if the
user-specified size is insufficient.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,"Another consideration when explicitly defining buffer sizes is that the
larger the buffer, the larger thememory cost. As such, programmers
should aim to keep the explicit buffer length limited toonlythe
maximum number of historical values the script will reference andnot
more. For example, defining a 5000-bar buffer when a script only
requires 500 historical values will result in an unnecessary waste of
memory.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Minimizing historical buffercalculations,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"Since thePine Profilermust performextra calculationsto collect performance
data, as explained inthis section, the time it takes to execute a scriptincreaseswhile
profiling.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"Most scripts will run as expected with the Profiler’s overhead
included. However, when a complex script’s runtime approaches aplan’s
limit,
using theProfileron it may cause its runtime toexceedthe limit. Such a
case indicates that the script likely needsoptimization, but it can be challenging to know where to start without
being able toprofile the code. The most effective workaround in this scenario is reducing
the number of bars the script must execute on. Users can achieve this
reduction in any of the following ways:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"Reducing the number of data points works in most cases because it
directly decreases the number of times the script must execute,
typically resulting in less accumulated runtime.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"As a demonstration, this script contains agcd()function that uses anaivealgorithm to calculate thegreatest common
divisorof two
integers. The function initializes itsresultusing the smallest
absolute value of the two numbers. Then, it reduces the value of theresultby one within awhileloop until it can divide both numbers without remainders. This structure
entails that the loop will iterate up toNtimes, whereNis the
smallest of the two arguments.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"In this example, the script plots the value ofgcd(10000, 10000 + bar_index). The smallest of the two arguments is
always 10,000 in this case, meaning thewhileloop within the function will require up to 10,000 iterations per script
execution, depending on thebar_indexvalue:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"When we add the script to our chart, it takes a while to execute across
our chart’s data, but it does not raise an error. However,afterenabling theProfiler, the script raises a runtime error stating that it exceeded
the Premium plan’sruntime
limit(40
seconds):",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"Our current chart has over 20,000 historical bars, which may be too many
for the script to handle within the alloted time while theProfileris active. We can try limiting the number of historical
executions to work around the issue in this case.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"Below, we includedcalc_bars_count = 10000in theindicator()function, which limits the script’s available history to the most
recent 10,000 historical bars. After restricting the script’s
historical executions, it no longer exceeds the Premium plan’s limit
while profiling, so we can now inspect its performance results:",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,"Notice!This process may require trial and error, as determining the number of
executions that a computationally heavy script can handle before timing
out is not necessarily straightforward. If a script takes too long to
execute after enabling theProfiler, experiment with different ways to limit its executions
until you can profile it successfully.",https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,Previous,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Working around Profileroverhead,Next,https://www.tradingview.com/pine-script-docs/writing/profiling-and-optimization
Introduction,"TradingView hosts a large global community of Pine Script™ programmers, and millions of traders. Script authors can publish their customindicators,strategies, andlibrariespublicly in theCommunity scriptsrepository, allowing others in our community to use and learn from them. They can also publishprivatescripts to createdraftsfor public releases, test features, or collaborate with friends.",https://www.tradingview.com/pine-script-docs/writing/publishing
Introduction,This page explains the script publishing process and provides recommendations to help authors publish their Pine scripts effectively.,https://www.tradingview.com/pine-script-docs/writing/publishing
Introduction,"Notice!Before you publish a script, ensure you read and understand ourHouse Rules,Script Publishing Rules, andVendor Requirements.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,"When aneditablescript is on the chart and opened in the Pine Editor, users can select the “Publish indicator/strategy/library” button in the top-right corner to open the “Publish script” window and create ascript publication:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,"After the author follows all the necessary steps toprepare the publicationand selects the “Publish private/public script” button on the last page of the “Publish script” window, TradingView generates a dedicatedscript widgetandscript page, which feature options for users to boost, share, report, and comment on the publication.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,"The script widget is apreviewof the publication that appears in all relevant locations on TradingView, depending on the specifiedprivacyandvisibilitysettings. It shows the script’s title, a compressed view of the published chart, and a brief preview of the script’s description. An icon in the top-right corner of the widget indicates whether the published script is anindicator,strategy, orlibrary:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,"Clicking on the widget opens the script page. The top of the page shows information about the script’s visibility, its title, and an enlarged view of the published chart:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,"For publishedstrategies, the script page also includes the option for users to view theStrategy Testerreport below the title.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptpublications,"Below the chart or strategy report are the publication’s complete description, release notes from script updates, additional information, and user comments.",https://www.tradingview.com/pine-script-docs/writing/publishing
Privacytypes,"Script publications have one of twoprivacy types, which determine how users can discover them:publicorprivate. Public scripts are discoverable to all members of the TradingView community, whereas private scripts are accessible only via their URLs. Authors set a script publication’s privacy type using the “Privacy settings” field on thesecond pageof the “Publish script” window:",https://www.tradingview.com/pine-script-docs/writing/publishing
Privacytypes,,https://www.tradingview.com/pine-script-docs/writing/publishing
Privacytypes,"Notice!Ensure you select the correct option in this field when youpreparea publication, as youcannotchange a script’s privacy type after you publish it.",https://www.tradingview.com/pine-script-docs/writing/publishing
Public,"A script published with the “Public” setting is available in theCommunity scriptsfeed and discoverable to all TradingView users worldwide. Unlike public ideas, everyone accesses the sameglobal repositoryfor public scripts, regardless of which localized TradingView version they use.",https://www.tradingview.com/pine-script-docs/writing/publishing
Public,"Users can discover public scripts by navigating the Community scripts feed directly, viewing theScriptstab of an author’s profile, searching the “Community” tab of the “Indicators, Metrics & Strategies” menu, or specifying script keywords in the search bar at the top of many TradingView pages. We also feature exceptional public scripts in ourEditors’ picks.",https://www.tradingview.com/pine-script-docs/writing/publishing
Public,"Because public scripts are available to our global community and arenotfor private use, they must meet the criteria defined in ourHouse Rules,Script Publishing Rules, andVendor Requirements. Ourscript moderatorsanalyze public scripts using these criteria. Script publications that do not follow these rules becomehiddenfrom the community.",https://www.tradingview.com/pine-script-docs/writing/publishing
Public,"Notice!When you publish a public script, you have only15 minutesto edit or delete it. After that period expires, the publication is finalized andcannotbe changed or removed. Therefore, before you publish a public script, validate that everything appears as intended and complies with our rules. The recommended approach is to start with aprivatescript, which you canalwaysedit or delete.",https://www.tradingview.com/pine-script-docs/writing/publishing
Private,"A script published with the “Private” setting isnotavailable in theCommunity scriptsfeed, and users cannot find the publication using TradingView’s search features. The script widget is visible only to the author, from their profile’sScriptstab. Other users cannot see the script widget, and they cannot view the script page without having access to its URL.",https://www.tradingview.com/pine-script-docs/writing/publishing
Private,"Authors canalwaysedit or delete private script publications, unlikepublicscripts, using the available options in the top-right corner of the script page. This capability makes private scripts ideal for testing features, collaborating with friends, and creatingdraft publicationsbefore committing to public releases. To learn more about how private publications differ from public ones, seethis articlein our Help Center.",https://www.tradingview.com/pine-script-docs/writing/publishing
Private,"Notice!Private scripts are strictly forprivate use. Our script moderators do not analyze privately published scripts as long as theyremainprivate. As per ourScript Publishing RulesandVendor Requirements, you cannot reference or link to private publications in any public TradingView content. Additionally, if you share links to private scripts in social networks or other public content, those scripts arenotconsidered private.",https://www.tradingview.com/pine-script-docs/writing/publishing
Visibilitytypes,"A script publication’svisibility typedetermines whether other users can see the source code, and whether anyone or only authorized individuals can use the script. The possible types areopen-source,protected, andinvite-only. The “Visibility” options on thesecond pageof the “Publish script” window specify a script’s visibility type:",https://www.tradingview.com/pine-script-docs/writing/publishing
Visibilitytypes,,https://www.tradingview.com/pine-script-docs/writing/publishing
Visibilitytypes,"Notice!As with theprivacy type, youcannotchange a script’s visibility type after you publish it. Make sure you select the appropriate option whilepreparingyour publication.",https://www.tradingview.com/pine-script-docs/writing/publishing
Open,"A script published with the “Open” setting isopen-source, meaning anyone who views the publication or uses the script can access its Pine Script™ code. Most script publications on TradingView use this setting because it allows programmers to demonstrate their Pine knowledge and provide code for others to verify, learn from, modify, and build upon.",https://www.tradingview.com/pine-script-docs/writing/publishing
Open,An open-source script’s page displays the source code in an expandable window above the comments. The window also includes the option to view the source code directly inside the Pine Editor in a separate tab:,https://www.tradingview.com/pine-script-docs/writing/publishing
Open,,https://www.tradingview.com/pine-script-docs/writing/publishing
Open,"When a user adds the script to their chart, they can also view the source code in the Pine Editor at any time by selecting the “Source code” option in the script’s status line:",https://www.tradingview.com/pine-script-docs/writing/publishing
Open,,https://www.tradingview.com/pine-script-docs/writing/publishing
Open,Note that:,https://www.tradingview.com/pine-script-docs/writing/publishing
Open,"TipOpen-source scripts are eligible for inclusion in ourEditors’ pickssection, which showcases exceptional publications from our growing community of script authors. The Editors’ picks are selected frompublic, open-source scripts that are original, provide potential value to users, include a helpful description, and comply with ourHouse Rules.",https://www.tradingview.com/pine-script-docs/writing/publishing
Protected,"A script published with the “Protected” setting hasclosed-sourcecode, meaning the code is protected and not viewable to any user except the author. Although users cannot access the source code, they can add the script to their charts and use it freely. This visibility option is available only to script authors with paidplans.",https://www.tradingview.com/pine-script-docs/writing/publishing
Protected,"Closed-source script publications are ideal for authors wanting to share their unique Pine Script™ creations with the community without exposing their distinct calculations and logic. They arenotfor sharing closed-source scripts that reproduce the behaviors ofopen-sourceones. As such, when an author publishes a closed-source script, the publication’s description should include information that helps users understand the script’s unique characteristics that require protecting the code. See ourScript Publishing Rulesto learn more.",https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,"A script published with the “Invite-only” setting has closed-source code. No user except the author can view the code. Additionally, unlike aprotectedscript, only usersinvitedby the author can add the script to their charts and use it. This visibility option is available only to script authors with Premium and higher-tierplans.",https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,"Below the description on the invite-only script page, the author can see a“Manage access”button. This button opens a dialog box where the author specifies which users have access to the script:",https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,,https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,"Script authors typically use invite-only publications to provide interested users with unique scripts, often in exchange for payment. As such, invite-only script authors are consideredvendors. In addition to theHouse RulesandScript Publishing Rules, which apply toallscript authors, vendors must understand and follow ourVendor Requirements.",https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,Notice!,https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,"Publicinvite-only scripts are theonlypublished scripts for which authors can require payment to access. Selling access toprivatescripts is prohibited, and authors cannot charge users for access toopen-sourceorprotectedscripts because they are, by definition,freeto use.",https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,TradingView does not benefit from script sales. Transactions concerning invite-only scripts are strictly betweenusersandvendors; they do not involve TradingView.,https://www.tradingview.com/pine-script-docs/writing/publishing
Invite-only,,https://www.tradingview.com/pine-script-docs/writing/publishing
Preparing apublication,"At the start of the script publishing process, authors verify and refine theirsource codeto ensure correct functionality. Then, they prepare theirchart visualsand, for strategies, thestrategy report, to showcase their script’s behaviors. After finalizing these details, authors select the “Publish…” button to open the “Publish script” window, where they set thetitle, write a helpfuldescription, and then define the publication’ssettings.",https://www.tradingview.com/pine-script-docs/writing/publishing
Preparing apublication,"The sections below provide a step-by-step overview of this preparation process and list practical recommendations for creating helpful, user-friendly publications based on ourScript Publishing Rulesand best practices.",https://www.tradingview.com/pine-script-docs/writing/publishing
Sourcecode,"When an author publishes a script, the publication creates an independent copy of the source code, which becomes part of the publication’sversion history. If the published code contains incorrect or misleading calculations, produces unexpected behaviors, or uses excessive runtime resources, those issues are only fixable throughscript updates.",https://www.tradingview.com/pine-script-docs/writing/publishing
Sourcecode,"Therefore, regardless of a publication’s intendedvisibility type, we recommend validating the source codebeforepublishing it to confirm that the script is readable, usable, programmed correctly, and compliant.",https://www.tradingview.com/pine-script-docs/writing/publishing
Sourcecode,When preparing source code to publish:,https://www.tradingview.com/pine-script-docs/writing/publishing
Chart,"When an author publishes a script, the publicationcopiestheir current chart to showcase the visual outputs. If the author has drawings, images, or other scripts on their chart, the published chart also includes them. Therefore, before opening the “Publish script” window, confirm that the chart is clean and ready for publishing.",https://www.tradingview.com/pine-script-docs/writing/publishing
Chart,When preparing a chart for a script publication:,https://www.tradingview.com/pine-script-docs/writing/publishing
Strategyreport,"Strategiessimulate trades based on programmed rules, displaying their hypothetical performance results and properties inside theStrategy Tester. When an author publishes a strategy script, the script page uses the Strategy Tester’s information to populate its“Strategy report”display.",https://www.tradingview.com/pine-script-docs/writing/publishing
Strategyreport,"Because traders often use a strategy script’s performance information to determine the potential viability of a trading system, programmers must verify that their scripts haverealisticproperties and results. Before publishing a strategy script, check its information in the “Strategy Tester” tab to validate that everything appears as intended.",https://www.tradingview.com/pine-script-docs/writing/publishing
Strategyreport,"To maintain realism when publishing strategies, follow these guidelines based on ourScript Publishing Rules:",https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,"After preparing thesource code,chart visuals, andstrategy reportfor a script publication, open the “Publish Script” window and draft a meaningful title and description to help users understand the script. First, confirm that the correct code is open in the Pine Editor, then select the “Publish…” button in the top-right corner.",https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,The first page of the “Publish Script” window contains two text fields thatcannotbe empty:,https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,,https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,"The first field determines the publication’stitle, which appears at the top of the script widget and page. TradingView also uses the specified title to determine the publication’sURL. By default, this field proposes the text from thetitleargument of the script’s declaration statement. It is typically best to use that title. However, some authors prefer to use different or modified titles.",https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,When defining the title of a script publication:,https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,"The second text field determines the publication’sdescription. The toolbar at the top contains several options that insertmarkup tagsinto the field for adding text formats, Pine code blocks, lists, and more. The script page displays the complete, parsed text from this field below the published chart or strategy report:",https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,,https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,"Most of the markup for publication descriptions requires surrounding raw text with anopening tag(e.g.,[b]) and a matchingclosing tagwith a forward slash (e.g.,[/b]). Some tags also require additional syntax. Here, we list the available tags and explain how they work:",https://www.tradingview.com/pine-script-docs/writing/publishing
Title anddescription,"Writing a helpful description is acritical stepin the script publishing process, as users rely on the provided information to understand a published script. Below, we list a few helpful recommendations for preparing descriptions based on some of the key criteria outlined in ourScript Publishing Rules:",https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,Thesecondpage of the “Publish script” window is where authors specify a script publication’s settings and search tags. This page is accessible only after adding atitle and descriptionfor the script on the previous page and selecting the “Continue” button:,https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,,https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,"The two fields at the top of the page specify the script’sprivacyandvisibilitytypes. Ensure both fields use the correct options, as these settingscannotchange after the script is published.",https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,"TipEven if you intend to share your script publicly, we recommend publishing aprivateversion first. You can use the private publication as adraftof the release to ensure the content is correct, then create a newpublicversion with the verified description. See the section onprivate draftsbelow to learn more.",https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,"Note that setting the publication’s visibility type toinvite-onlyreveals an additional“Author’s instructions”field, which cannot remain empty. This field is where vendors provide necessary information for users torequest accessto their script, such as direct contact details and links to instructional pages. The contents of this field will appear below the description on the invite-only script page:",https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,,https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,"The remaining input fields on this page provide options to assigntags(keywords) to the publication for discoverability. The “Category” field contains a menu where the author can select up tothreepreset category tags for the publication. If the script ispublic, users can search the specified categories to discover it:",https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,,https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,"The publication can also includecustom, non-preset search tags for additional discoverability. To add custom tags to the publication, select the “Show more” option, then enter a list of searchable keywords in the “Tags” field:",https://www.tradingview.com/pine-script-docs/writing/publishing
Publicationsettings,,https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,"After following all necessary steps topreparea script publication, including fine-tuning the source code, cleaning the chart, and adding a helpfultitle and description, select the “Publish…” button at the bottom of the last page of the “Publish script” window to publish the script.",https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,"If the publication’sprivacy typeis set topublic, there is a checkbox above the “Publish…” button, which the author must select before they can create the publication. This checkbox confirms awareness of theHouse Rulesand the consequence of the script becominghiddenfrom the community if it does not follow them:",https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,,https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,"When the script is published, the “Publish script” window closes automatically, and TradingView opens the new publication’s script page. The page includes “Edit” and “Delete” buttons in the top-right corner. If the script is public, these buttons are available for only15 minutes. If private, they arealwaysavailable.",https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,"Selecting the “Edit” button opens the “Edit script” window, where the author can change the title, description, and search tags:",https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,,https://www.tradingview.com/pine-script-docs/writing/publishing
Publishing andediting,Note that:,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"Authors canupdatetheirpublicorprivatescripts over time to add new features, fix bugs, optimize performance, etc. To publish an update to an existing script, confirm that the new source code differs from the code in the last published version. Then, add the updated script to the chart and select the “Publish…” option in the top-right of the Pine Editor to open the “Publish script” window.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"After opening the window, select the “Update existing script” option at the top of the first page:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"In this publishing mode, the first text field specifies theexistingscript to update,notthe title of a new publication. Enter the existing publication’s title in the field or select the title from the available options in the dropdown menu:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"Below the title field is a checkbox specifying whether the update will affect the publication’s chart. If unchecked (default), the script page will copy the author’scurrent chartto showcase the changes. If checked, the publication will continue using itsexistingchart display:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"Notice!If you plan to update the publication’s chart,prepare the chartbefore opening the “Publish script” window, just as you would with a new publication.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,The text field below the checkbox is where the author explains thechangesmade to the script. The publication will display the parsed text from this field beneath the description as datedrelease noteson the script page. The contents of this fielddo notmodify the publication’s original description and are displayedin additionto it:,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"When publishing release notes, prepare them similarly to thedescription. Provide self-contained information allowing users to understand the changes included in the update, how they impact the script’s functionality, and what benefits the changes provide over the previous version.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"Notice!After you publish a script update, the release notes are finalizedimmediatelyandcannotbe changed. Therefore, we recommend usingprivate draftsto validate script updates before committing topublicreleases.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"The bottom of the page contains an expandabledifference checker, which displays a side-by-side or inline comparison between the new source code and the last published version. We recommend inspecting and confirming the code differencesbeforepublishing an update, because all updates are preserved in the script’sversion history:",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,,https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,"After confirming the details on the first page of the “Publish script” window, select “Continue” to move to the final page, then select the “Publish new version” button at the bottom to finalize the script update.",https://www.tradingview.com/pine-script-docs/writing/publishing
Scriptupdates,Note that:,https://www.tradingview.com/pine-script-docs/writing/publishing
Tips,"Use the following tips and our recommendations in thePreparing a publicationsection above to create helpful, compliant script publications.",https://www.tradingview.com/pine-script-docs/writing/publishing
Privatedrafts,"New script authors occasionally overlook the importance of reviewing their content before sharing it publicly, leading to unintentional errors in their published script descriptions, such as typos, incorrect statements, or House Rule violations.",https://www.tradingview.com/pine-script-docs/writing/publishing
Privatedrafts,"The title and description of apublicscript are editable for only 15 minutes. After that time, the content becomesfinal. If the published text contains mistakes, the authorcannoteditorupdatethe publication to fix them.",https://www.tradingview.com/pine-script-docs/writing/publishing
Privatedrafts,"In contrast,privatescripts are always editable, making them valuable tools fordraftingpublic script releases. Private drafts help authors avoid uncaught mistakes in their public versions and ensure quality for script users. Therefore, we strongly recommend startingeveryscript publication with a private draft.",https://www.tradingview.com/pine-script-docs/writing/publishing
Privatedrafts,"When using private publications as drafts for public releases, follow this simple process:",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"Many traders usepublicscripts in their analysis to reinforce trade decisions. Likewise, many programmers learn from public scripts and use publishedlibrariesin their Pine projects. New and experienced users alike should be able to rely on the script publications from our community for helpful content and original, potentially beneficial tools.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"OurScript Publishing Rulesestablish the core criteria for publishing scripts on TradingView, and ourVendor Requirementsdefine additional criteria forvendors. The script moderators curate theCommunity scriptsbased on these rules and ourHouse Rules. If a publication does not meet these criteria, it becomeshidden, and our moderators send the author a message explaining the issues that need correction. The author can thenprepareanew publicationwith the necessary corrections if they want to share their script publicly.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"We recommend all authors review and understand our rules and verify a script publication’s compliancebeforepublishing it. Below, we list a few simple tips:",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,Publish original content,https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"Publish a script publicly if you believe it is original and might benefit the community. Avoid rehashing, mimicking, or copying existing scripts or other public domain code. Likewise, avoid publishing scripts that combine available indicators or other code without a clear purpose. In other words, aim to provide a helpful tool for the community based onyourunique interests and expertise.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,Reuse code responsibly,https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"Authors can publish scripts that reuse open-source code from other publications. However, they must meet the “Open-source reuse” criteria in ourScript Publishing Rules, which take precedence over all open-source licenses. These criteria include crediting the original author, making meaningful improvements to the code, and sharing the codeopen-sourceunless the original author grantsexplicit permissionto publish it closed-source.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,Use a clear chart,https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"A script publication’s chart showcases the script’s visual outputs to help users understand how it works. This display is not for demonstrating complex charting setups with multiple scripts or drawing tools. If the chart of a published script contains unnecessary scripts or drawings, it will not add clarity for users, and it can potentially mislead them.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"Therefore, when publishing a public script, ensure the chart only includes what isnecessaryto demonstrate its outputs and behaviors. See the “Chart” section of ourScript Publishing Rulesto understand our chart criteria, andthis portionof thePreparing a publicationsection above for detailed recommendations.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,Provide helpful documentation,https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"Similar to how users rely on our documentation to understand Pine, users rely on the documentation in an author’s publications to understand their scripts. When a script publication does not include a helpful description that explains the script’s workings and how to use it, users often struggle to understand and use it effectively. Therefore, when sharing a script publicly, include a clear description explaining everything users need to know about it and its use.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,See the “Description” and “Language” sections of ourScript Publishing Rulesto understand the criteria for helpful script descriptions. TheTitle and descriptionsection above provides detailed recommendations based on these criteria.,https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,"For examples of compliant script descriptions, refer to the publications featured in ourEditors’ picks. To see examples of our recommended description format, refer to the publications from theTradingViewandPineCodersaccounts.",https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,Previous,https://www.tradingview.com/pine-script-docs/writing/publishing
HouseRules,Next,https://www.tradingview.com/pine-script-docs/writing/publishing
Introduction,As is mentioned in ourWelcomepage:,https://www.tradingview.com/pine-script-docs/writing/limitations
Introduction,"Because each script uses computational resources in the cloud, we
must impose limits in order to share these resources fairly among our
users. We strive to set as few limits as possible, but will of course
have to implement as many as needed for the platform to run smoothly.
Limitations apply to the amount of data requested from additional
symbols, execution time, memory usage and script size.",https://www.tradingview.com/pine-script-docs/writing/limitations
Introduction,"If you develop complex scripts using Pine Script™, sooner or later you
will run into some of the limitations we impose. This section provides
you with an overview of the limitations that you may encounter. There
are currently no means for Pine Script™ programmers to get data on the
resources consumed by their scripts. We hope this will change in the
future.",https://www.tradingview.com/pine-script-docs/writing/limitations
Introduction,"In the meantime, when you are considering large projects, it is safest
to make a proof of concept in order to assess the probability of your
script running into limitations later in your project.",https://www.tradingview.com/pine-script-docs/writing/limitations
Introduction,"Below, we describe the limits imposed in the Pine Script™ environment.",https://www.tradingview.com/pine-script-docs/writing/limitations
Scriptcompilation,"Scripts must compile before they are executed on charts. Compilation
occurs when you save a script from the Pine Editor or when you add a
script to the chart. A two-minute limit is imposed on compilation time,
which will depend on the size and complexity of your script, and whether
or not a cached version of a previous compilation is available. When a
compile exceeds the two-minute limit, a warning is issued. Heed that
warning by shortening your script because after three consecutives
warnings a one-hour ban on compilation attempts is enforced. The first
thing to consider when optimizing code is to avoid repetitions by using
functions to encapsulate oft-used segments, and call functions instead
of repeating code.",https://www.tradingview.com/pine-script-docs/writing/limitations
Scriptexecution,"Once a script is compiled it can be executed. See theEvents triggering the execution of a scriptfor a list of the events triggering the execution of a
script. The time allotted for the script to execute on all bars of a
dataset varies with account types. The limit is 20 seconds for basic
accounts, 40 for others.",https://www.tradingview.com/pine-script-docs/writing/limitations
Loopexecution,"The execution time for any loop on any single bar is limited to 500
milliseconds. The outer loop of embedded loops counts as one loop, so it
will time out first. Keep in mind that even though a loop may execute
under the 500 ms time limit on a given bar, the time it takes to execute
on all the dataset’s bars may nonetheless cause your script to exceed
the total execution time limit. For example, the limit on total
execution time will make it impossible for you script to execute a 400
ms loop on each bar of a 20,000-bar dataset because your script would
then need 8000 seconds to execute.",https://www.tradingview.com/pine-script-docs/writing/limitations
Plotlimits,"A maximum of 64 plot counts are allowed per script. The functions that
generate plot counts are:",https://www.tradingview.com/pine-script-docs/writing/limitations
Plotlimits,The following functions do not generate plot counts:,https://www.tradingview.com/pine-script-docs/writing/limitations
Plotlimits,"One function call can generate up to seven plot counts, depending on the
function and how it is called. When your script exceeds the maximum of
64 plot counts, the runtime error message will display the plot count
generated by your script. Once you reach that point, you can determine
how many plot counts a function call generates by commenting it out in a
script. As long as your script still throws an error, you will be able
to see how the actual plot count decreases after you have commented out
a line.",https://www.tradingview.com/pine-script-docs/writing/limitations
Plotlimits,"The following example shows different function calls and the number of
plot counts each one will generate:",https://www.tradingview.com/pine-script-docs/writing/limitations
Plotlimits,"This example generates a plot count of 56. If we were to add two more
instances of the last call toplotcandle(),
the script would throw an error stating that the script now uses 70 plot
counts, as each additional call toplotcandle()generates seven plot counts, and 56 + (7 * 2) is 70.",https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits","Contrary toplots, which can
cover the chart’s entire dataset, scripts will only show the last 50lines,boxes,polylines,
andlabelson
the chart by default. One can increase the maximum number for each of
thesedrawing typesvia themax_lines_count,max_boxes_count,max_polylines_count, andmax_labels_countparameters of the
script’sindicator()orstrategy()declaration statement. The maximum number ofline,box,
andlabelIDs is 500, and the maximum number ofpolylineIDs is 100.",https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits","In this example, we set the maximum number of recent labels shown on the
chart to 100:",https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits","It’s important to note when setting any of a drawing object’s
properties tonathat
its ID still exists and thus contributes to a script’s drawing totals.
To demonstrate this behavior, the following script draws a “Buy” and
“Sell”labelon each bar, withxvalues determined by thelongConditionandshortConditionvariables.",https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits","The “Buy” label’sxvalue isnawhen
the bar index is even, and the “Sell” label’sxvalue isnawhen
the bar index is odd. Although themax_labels_countis 10 in this
example, we can see that the script displays fewer than 10labelson the
chart since the ones withnavalues also count toward the total:",https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits",,https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits","To display the desired number of labels, we must eliminate label
drawings we don’t want to show rather than setting their properties tona. The
example below uses anifstructure to conditionally draw the “Buy” and “Sell” labels,
preventing the script from creating new label IDs when it isn’t
necessary:",https://www.tradingview.com/pine-script-docs/writing/limitations
"Line, box, polyline, and labellimits",,https://www.tradingview.com/pine-script-docs/writing/limitations
Tablelimits,"Scripts can display a maximum of ninetableson the chart, one
for each of the possible locations:position.bottom_center,position.bottom_left,position.bottom_right,position.middle_center,position.middle_left,position.middle_right,position.top_center,position.top_left,
andposition.top_right.
When attempting to place two tables in the same location, only the
newest instance will show on the chart.",https://www.tradingview.com/pine-script-docs/writing/limitations
Number ofcalls,"A script can use up to 40uniquecalls to the functions in therequest.*()namespace. A subsequent call to the samerequest.*()function with the same arguments is not unique. This limitation applies when using anyrequest.*()functions, including:",https://www.tradingview.com/pine-script-docs/writing/limitations
Number ofcalls,"When a script executes two or more identicalrequest.*()function calls, only thefirstcall counts toward this limit. The repeated calls do not count because theyreusethe data from the first call rather than executing a redundant request. Note that when a script importslibraryfunctions containingrequest.*()calls within their scopes, those callsdocount toward this limit, even if the script already calls the samerequest.*()function with the same arguments in its main scope.",https://www.tradingview.com/pine-script-docs/writing/limitations
Number ofcalls,"The script below callsrequest.security()with the same arguments 50 times within aforloop. Although the script contains more than 40request.*()calls, itdoes notraise an error because each call isidentical. In this case, it reuses the data from the first iteration’srequest.security()call for the repeated calls on all subsequent iterations:",https://www.tradingview.com/pine-script-docs/writing/limitations
Number ofcalls,"Here, we modified the above script to callrequest.security()with a differenttimeframeargument on each iteration, meaning all 50 calls are nowunique. This time, the script will reach therequest.*()call limit while executing the loop and raise a runtime error because it requests adistinctdataset on each iteration:",https://www.tradingview.com/pine-script-docs/writing/limitations
Number ofcalls,Note that:,https://www.tradingview.com/pine-script-docs/writing/limitations
Intrabars,"Scripts can retrieve up to the most recent 200,000intrabars(lower-timeframe bars) via therequest.security()orrequest.security_lower_tf()functions, depending on the user’s plan:",https://www.tradingview.com/pine-script-docs/writing/limitations
Intrabars,"Therequest.*()functions limit requested data via thecalc_bars_countparameter. If this parameter is not specified, the default is used, which is 100,000 bars. If the plan permits more, this limit can be increased by passing a greater value.",https://www.tradingview.com/pine-script-docs/writing/limitations
Intrabars,"The number of bars on the chart’s timeframe covered by 100,000
intrabars varies with the number of intrabars each chart bar contains.
For example, requesting data from the 1-minute timeframe while running
the script on a 60-minute chart means each chart bar can contain up to
60 intrabars. In this case, the minimum number of chart bars covered by
the intrabar request is 1,666, as 100,000 / 60 = 1,666.67. It’s
important to note, however, that a provider may not report data foreveryminute within an hour. Therefore, such a request may cover more
chart bars, depending on the available data.",https://www.tradingview.com/pine-script-docs/writing/limitations
Tuple elementlimit,"All therequest.*()function calls in a script taken together cannot
return more than 127 tuple elements. When the combined tuple size of allrequest.*()calls will exceed 127 elements, one can instead utilizeuser-defined types (UDTs)to request a greater number of values.",https://www.tradingview.com/pine-script-docs/writing/limitations
Tuple elementlimit,"The example below outlines this limitation and the way to work around
it. The firstrequest.security()call represents using a tuple with 128 elements as theexpressionargument. Since the number of elements is greater than 127, it would
result in an error.",https://www.tradingview.com/pine-script-docs/writing/limitations
Tuple elementlimit,"To avoid the error, we can use those same values asfieldswithin anobjectof aUDTand pass its ID to theexpressioninstead:",https://www.tradingview.com/pine-script-docs/writing/limitations
Tuple elementlimit,Note that:,https://www.tradingview.com/pine-script-docs/writing/limitations
Compiledtokens,"Before the execution of a script, the compiler translates it into a
tokenizedIntermediate Language(IL). Using an IL allows Pine Script™
to accommodate larger scripts by applying various memory and performance
optimizations. The compiler determines the size of a script based on thenumber of tokensin its IL form,notthe number of characters or
lines in the code viewable in the Pine Editor.",https://www.tradingview.com/pine-script-docs/writing/limitations
Compiledtokens,"The compiled form of each indicator, strategy, and library script is
limited to 80,000 tokens. When a script imports libraries, the total
number of tokens from all imported libraries cannot exceed 1 million.
There is no way to inspect a script’s compiled form, nor its IL token
count. As such, you will only know your script exceeds the size limit
when the compiler reaches it.",https://www.tradingview.com/pine-script-docs/writing/limitations
Compiledtokens,"In most cases, a script’s compiled size will likely not reach the
limit. However, if a compiled script does reach the token limit, the
most effective ways to decrease compiled tokens are to reduce repetitive
code, encapsulate redundant calls within functions, and utilizelibrarieswhen possible.",https://www.tradingview.com/pine-script-docs/writing/limitations
Compiledtokens,"It’s important to note that the compilation process omits anyunusedvariables, functions, types, etc. from the final IL form, where
“unused” refers to anything thatdoes notaffect the script’s
outputs. This optimization prevents superfluous elements in the code
from contributing to the script’s IL token count.",https://www.tradingview.com/pine-script-docs/writing/limitations
Compiledtokens,"For example, the script below declares auser-defined typeand auser-defined methodand defines a sequence of calls using them:",https://www.tradingview.com/pine-script-docs/writing/limitations
Compiledtokens,"Despite the inclusion ofarray.new<myType>(),myType.new(), andarr.m()calls in the script, the only thing
actuallyoutputby the script isplot(close). The rest of the code
does not affect the output. Therefore, the compiled form of this script
will have thesamenumber of tokens as:",https://www.tradingview.com/pine-script-docs/writing/limitations
Variables perscope,"Scripts can contain up to 1,000 variables in each of its scopes. Pine
scripts always contain one global scope, represented by non-indented
code, and they may contain zero or more local scopes. Local scopes are
sections of indented code representing procedures executed withinfunctionsandmethods, as well asif,switch,for,for…in,
andwhilestructures, which allow for one or more local blocks. Each local block
counts as one local scope.",https://www.tradingview.com/pine-script-docs/writing/limitations
Variables perscope,The branches of a conditional expression using the?:ternary operator do not count as local blocks.,https://www.tradingview.com/pine-script-docs/writing/limitations
Scopecount,"The total number of scopes in a script, including its global scope and
each local scope from theuser-defined functions,methods,conditional structuresit
uses, cannot exceed 550.",https://www.tradingview.com/pine-script-docs/writing/limitations
Scopecount,"It’s important to note that therequest.security(),request.security_lower_tf(),
andrequest.seed()functionsduplicatethe scopes required to evaluate the values of
theirexpressionargument in another context. The scopes produced by
each call to theserequest.*()functions also count toward the
script’s scope limit.",https://www.tradingview.com/pine-script-docs/writing/limitations
Scopecount,"For example, suppose we created a script with a global variable that
depends on the local scopes of 300ifstructures. The total scope count for this script is301(1 global
scope + 300 local scopes):",https://www.tradingview.com/pine-script-docs/writing/limitations
Scopecount,"Since the total number of scopes is within the limit, it will compile
successfully. Now, suppose we callrequest.security()to evaluate the value ofxfrom another context andplotits value as well. In
this case, it will effectivelydoublethe script’s scope count since
the value ofxdepends onallthe script’s scopes:",https://www.tradingview.com/pine-script-docs/writing/limitations
Scopecount,"We can resolve this issue by encapsulating theifblocks
within auser-defined function, as the scope of a function counts as one embedded scope:",https://www.tradingview.com/pine-script-docs/writing/limitations
Compilation requestsize,The size of the compilation request for a script cannot exceed 5MB. The compilation request is all of the information that is sent to the compiler. This information comprises the script itself and any libraries the script imports.,https://www.tradingview.com/pine-script-docs/writing/limitations
Compilation requestsize,"Unlike the limit for compiled tokens, the request size limit includes unused parts of code. This is because the script is not compiled yet, so any unused code has not yet been optimized out.",https://www.tradingview.com/pine-script-docs/writing/limitations
Compilation requestsize,"To reduce the compilation request size, you can:",https://www.tradingview.com/pine-script-docs/writing/limitations
Collections,"Pine Script™ collections (arrays,matrices,
andmaps) can have a maximum
of 100,000 elements. Each key-value pair in a map contains two elements,
meaningmapscan contain a
maximum of 50,000 key-value pairs.",https://www.tradingview.com/pine-script-docs/writing/limitations
Maximum barsback,"References to past values using the[]history-referencing operator are dependent on the size of the historical
buffer maintained by the Pine Script™ runtime, which is limited to a
maximum of 5000 bars.This Help Center
pagediscusses the historical buffer and how to change its size using either
themax_bars_backparameter or themax_bars_back()function.",https://www.tradingview.com/pine-script-docs/writing/limitations
Maximum barsforward,"When positioning drawings usingxloc.bar_index, it is possible to use
bar index values greater than that of the current bar asxcoordinates. A maximum of 500 bars in the future can be referenced.",https://www.tradingview.com/pine-script-docs/writing/limitations
Maximum barsforward,"This example shows how we use the [maxval] parameter in ourinput.int()function call to cap the user-defined number of bars forward we draw a
projection line so that it never exceeds the limit:",https://www.tradingview.com/pine-script-docs/writing/limitations
Chartbars,"The number of bars appearing on charts is dependent on the amount of
historical data available for the chart’s symbol and timeframe, and on
the type of account you hold. When the required historical date is
available, the minimum number of chart bars is:",https://www.tradingview.com/pine-script-docs/writing/limitations
Trade orders inbacktesting,"A script can place a maximum of 9000 orders when backtesting strategies. Once it reaches that limit, the earlier orders aretrimmedto store the information of new orders. Programmers can use thestrategy.closedtrades.first_indexvariable to reference the index of the earliest untrimmed trade.",https://www.tradingview.com/pine-script-docs/writing/limitations
Trade orders inbacktesting,"When using Deep Backtesting, the order limit is 1,000,000.",https://www.tradingview.com/pine-script-docs/writing/limitations
Trade orders inbacktesting,Previous,https://www.tradingview.com/pine-script-docs/writing/limitations
Get real OHLC price on a Heikin Ashichart,"Suppose, we have a Heikin Ashi chart (or Renko, Kagi, PriceBreak etc)
and we’ve added a Pine script on it:",https://www.tradingview.com/pine-script-docs/faq/general
Get real OHLC price on a Heikin Ashichart,"You may see that variablecis a Heikin Ashicloseprice which is
not the same as real OHLC price. Becauseclosebuilt-in variable is
always a value that corresponds to a visible bar (or candle) on the
chart.",https://www.tradingview.com/pine-script-docs/faq/general
Get real OHLC price on a Heikin Ashichart,"So, how do we get the real OHLC prices in Pine Script™ code, if current
chart type is non-standard? We should userequest.securityfunction in
combination withticker.newfunction. Here is an example:",https://www.tradingview.com/pine-script-docs/faq/general
Get real OHLC price on a Heikin Ashichart,"In a similar way we may get other OHLC prices:open,highandlow.",https://www.tradingview.com/pine-script-docs/faq/general
Get non-standard OHLC values on a standardchart,"Backtesting on non-standard chart types (e.g. Heikin Ashi or Renko) is
not recommended because the bars on these kinds of charts do not
represent real price movement that you would encounter while trading. If
you want your strategy to enter and exit on real prices but still use
Heikin Ashi-based signals, you can use the same method to get Heikin
Ashi values on a regular candlestick chart:",https://www.tradingview.com/pine-script-docs/faq/general
Plot arrows on thechart,You may use plotshape with styleshape.arrowupandshape.arrowdown:,https://www.tradingview.com/pine-script-docs/faq/general
Plot arrows on thechart,,https://www.tradingview.com/pine-script-docs/faq/general
Plot arrows on thechart,You may use theplotcharfunction with any unicode character:,https://www.tradingview.com/pine-script-docs/faq/general
Plot arrows on thechart,,https://www.tradingview.com/pine-script-docs/faq/general
Plot a dynamic horizontalline,"There is the functionhlinein Pine Script™, but it is limited to only
plot a constant value. Here is a simple script with a workaround to plot
a changing hline:",https://www.tradingview.com/pine-script-docs/faq/general
Get a 5-dayshigh,"Lookback 5 days from the current bar, find the highest bar, plot a star
character at that price level above the current bar",https://www.tradingview.com/pine-script-docs/faq/general
Get a 5-dayshigh,,https://www.tradingview.com/pine-script-docs/faq/general
Count bars in adataset,"Get a count of all the bars in the loaded dataset. Might be useful for
calculating flexible lookback periods based on number of bars.",https://www.tradingview.com/pine-script-docs/faq/general
Query the last non-navalue,You can use the script below to avoid gaps in a series:,https://www.tradingview.com/pine-script-docs/faq/general
Query the last non-navalue,Previous,https://www.tradingview.com/pine-script-docs/faq/general
Query the last non-navalue,Next,https://www.tradingview.com/pine-script-docs/faq/general
How do I make an alert available from myscript?,"In indicator scripts, there are two ways to define triggers foralerts:",https://www.tradingview.com/pine-script-docs/faq/alerts
How do I make an alert available from myscript?,"In strategy scripts, there are also two ways to define alert triggers:",https://www.tradingview.com/pine-script-docs/faq/alerts
How do I make an alert available from myscript?,These methods make alert triggers available but do notcreatealerts directly. Users must create alerts using a script’s alert triggers by selecting the appropriate trigger in the “Condition” dropdown of the “Create Alert” dialog box.,https://www.tradingview.com/pine-script-docs/faq/alerts
How do I make an alert available from myscript?,Programmers can define multiple alert triggers of one or more types in a script.,https://www.tradingview.com/pine-script-docs/faq/alerts
Usability,"Any script can include calls to thealertcondition()andalert()functions within their code. However,alertcondition()calls have no effect unless the script is anindicator.Librariescanexportfunctions containingalert()calls, but they cannot issue alert triggers directly.",https://www.tradingview.com/pine-script-docs/faq/alerts
Usability,Order fillalert triggers are available only fromstrategies.,https://www.tradingview.com/pine-script-docs/faq/alerts
Options for creatingalerts,"Eachalertcondition()call in an indicator script defines one distinct trigger and one corresponding option in the “Condition” dropdown menu of the “Create Alert” dialog box. If the user wants multiple alerts, they must create each oneseparately.",https://www.tradingview.com/pine-script-docs/faq/alerts
Options for creatingalerts,"By contrast, if a script includes one or morealert()function calls, onlyoneoption appears in the “Condition” dropdown menu, titled “Any alert() function call”. Selecting this option creates asingle alertthat activates based on the occurrences ofanyexecutedalert()call.",https://www.tradingview.com/pine-script-docs/faq/alerts
Options for creatingalerts,"Similarly, for strategy scripts, the “Order fills and and alert() function calls” or “Order fills only” option in the “Condition” dropdown menu creates an alert that fires whenanyorder fill eventoccurs.",https://www.tradingview.com/pine-script-docs/faq/alerts
How alertsactivate,"Thealertcondition()function operates exclusively in an indicator’sglobal scope. Scripts cannot include calls to this function within anylocal block, such as theindentedcode within anifstructure. The function triggers an alert when its specifiedconditionistrue. Users can set the allowedfrequencyof the alert trigger using the “Frequency” field in the “Create Alert” dialog box.",https://www.tradingview.com/pine-script-docs/faq/alerts
How alertsactivate,"Thealert()function has noconditionparameter. Scripts trigger the alerts on anyalert()call based on each call’sfreqargument. Therefore, programmers typically include such calls within the local scopes ofconditional structuresto control when they execute.",https://www.tradingview.com/pine-script-docs/faq/alerts
How alertsactivate,"Order fill alert triggers are available fromstrategiesautomaticallywithout requiring extra code. However, programmers can customize the default alert messages. These alerts fire onorder fill events, which occur when thebroker emulatorfills a strategy’sorders.",https://www.tradingview.com/pine-script-docs/faq/alerts
Messages,"Themessageparameter of thealertcondition()function populates the “Message” field of the “Create Alert” dialog box with a default message, which script users can customize to suit their alert needs. It accepts a “const string” argument, meaning its value cannot change after compilation. However, the argument can includeplaceholdersto make the message’s informationdynamic.",https://www.tradingview.com/pine-script-docs/faq/alerts
Messages,"Themessageparameter of thealert()function accepts a “series string” argument, allowing programmers to createdynamic messagesthat can include “string” representations of a script’s calculated values. Unlikealertcondition(), this function does not populate a “Message” field in the “Create Alert” dialog box, and it does not process placeholders. Programmers can allow users to customizealert()messages by creatinginputsin the script’s settings.",https://www.tradingview.com/pine-script-docs/faq/alerts
Messages,"Order fill alerts have a default message that describes a strategy’s order fill event. This default message contains strategy-specificplaceholders, which the alert replaces with current strategy information each time it fires. Programmers can override the default message using the//@strategy_alert_messagecompiler annotation, which allows text and strategy placeholders, butnotscript variables. Script users can edit the default message from the “Message” field in the “Create Alert” dialog.",https://www.tradingview.com/pine-script-docs/faq/alerts
Messages,"Thealert_messageparameter in a strategy’sorder placement commandsallows programmers to define distinct messages for each order fill event. The parameter accepts “series string” values that can change on each event. To use the values from this parameter in a strategy’s order fill alerts, include the{{strategy.order.alert_message}}placeholder in the//@strategy_alert_messageannotation, or include it in the “Message” field when creating an alert.",https://www.tradingview.com/pine-script-docs/faq/alerts
Limitations,Thealertcondition()function has some limitations:,https://www.tradingview.com/pine-script-docs/faq/alerts
Limitations,"By contrast, all calls to thealert()function count asonealert, regardless of the number of calls in the code. In addition,alert()callsdo notcontribute to a script’s plot count.",https://www.tradingview.com/pine-script-docs/faq/alerts
Limitations,"Similarly, if a user creates a strategy alert based onorder fill events, it counts asonealert, even though it can fire multiple times with distinct messages from different order executions.",https://www.tradingview.com/pine-script-docs/faq/alerts
Example `alertcondition()`alert,The script below demonstrates a simplealertcondition()call that triggers alerts when the current bar’scloseis above the value from the previous chart bar. It also uses aplotshape()call to indicate each bar where thetriggerConditionoccurred:,https://www.tradingview.com/pine-script-docs/faq/alerts
Example `alertcondition()`alert,Seethis sectionof theAlertspage to learn more.,https://www.tradingview.com/pine-script-docs/faq/alerts
Example `alert()`alert,This example uses thevstop()function from ourtalibrary to calculate a volatility stop value and trend information based on the Average True Range (ATR). ThestopValuetrails behind the chart’scloseto form a trend-following system.,https://www.tradingview.com/pine-script-docs/faq/alerts
Example `alert()`alert,"The script triggers an alert with analert()call each time the trend direction changes. The alert’s message is a “series string” that shows the trend’s new direction and the current stop value. An additional alert occurs whenever thestopValuemoves in the current trend direction, with a message containing the updated value:",https://www.tradingview.com/pine-script-docs/faq/alerts
Example `alert()`alert,Seethis sectionof theAlertspage for more information.,https://www.tradingview.com/pine-script-docs/faq/alerts
Example strategyalert,"This example strategy places amarket orderwithstrategy.entry()and a stop-loss and take-profit (bracket) order withstrategy.exit()when a 5-bar moving average crosses over a 10-bar moving average. The stop-loss price is 1% below the currentcloseand the take-profit price is 2% above theclose. Order fill alerts occur when the broker emulator fills an entry or exit order. Bothorder placement commandsinclude uniquealert_messagearguments that combine placeholders and “string” representations of thelimitandstopvalues to output details like the trade action, position size, chart symbol, and order prices:",https://www.tradingview.com/pine-script-docs/faq/alerts
Example strategyalert,"For more information about order fill events, seethis sectionof theAlertspage. To learn more about how strategy scripts work, see theStrategiespage.",https://www.tradingview.com/pine-script-docs/faq/alerts
"If I change my script, does my alertchange?","No, not without creating a new alert.",https://www.tradingview.com/pine-script-docs/faq/alerts
"If I change my script, does my alertchange?","When a user creates an alert using the “Create Alert” dialog box, that action saves a “snapshot” of the script, its inputs, and the current chart’s context on TradingView’s servers. This snapshot acts as an independentcopyof the script instance and chart. Therefore, any changes to the script, its inputs, or the user’s chartdo notaffect that created alert. To update an alert after making changes,deletethe existing alert andcreatea new one.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,"Here are some common reasons why alerts might not work as expected, and how to solve them:",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,Make sure the alert is active and has not expired,https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,"Scripts that include alert triggersdo notdirectly create alerts. Users must create alerts in the “Create Alert” dialog box, where they specify the “Condition” that triggers the alert and the “Expiration” time. Created alerts do not fire after they expire. See this Help Center article onSetting up alerts.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,Check the alert logs,https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,"An alert can fire without a notification, depending on the alert’s settings. Check the logs in thealert managerto see whether an alert occurred. To set up notifications for an alert, use the options in the “Notifications” tab of the “Create/Edit Alert” dialog box.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,Check for repainting,https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,"If an alert fires at a different time than expected,repaintingmight be the cause. Refer to theRepaintingpage for more information.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,Limit the frequency of alerts,https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,"If more than 15 alerts occur within three minutes, the system automaticallyhaltsfurther alerts. Thisfrequency limithelps prevent excessive notifications and potential server overload.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,Debug script errors,https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,"If a script instance raises aruntime errorat some point during its executions, alerts from that instancecannotfire because the error stops the script from continuing to execute its code. Some common issues that can halt alerts include:",https://www.tradingview.com/pine-script-docs/faq/alerts
Why aren’t my alertsworking?,Seethis pagefor additional details about common error messages and troubleshooting tips.,https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,"Sometimes, alerts may fire when users do not expect according to what their script displays on the chart.Repaintingis the typical cause of such issues.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,"A chart’s realtime and historical bars often rely ondifferentdata feeds. Data providers may retroactively adjust the reported values on realtime bars, which the displayed data reflectsafterusers refresh their charts or restart their scripts. Such adjustments can cause discrepancies where a triggered alert’s timing may not align with the script’s output after reloading it.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,"Scripts may also behave differently on historical and realtime bars, which can lead to repainting. On historical bars, scripts execute once per bar close, whereas on realtime bars, where alerts fire, scripts execute once foreach new tickfrom the data feed. Therefore, if a script behaves differently on those bars, users may see differences between its signals and triggered alerts after reloading the chart.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,Below are some common repainting issues that can affect a script’s alerts:,https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,Alerts firing before bar close,https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,"Most scripts havefluid data valuesthat update after new ticks during an unconfirmed realtime bar and finalize after the bar closes. Consequently, an alert that fires on an open bar may not reflect thefinal stateof the condition after the bar’s confirmation. Set the alert’s frequency to “Once Per Bar Close” to avoid this issue.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,Using `calc_on_every_tick` in strategies,https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,"When a strategy script includescalc_on_every_tick = truein its declaration statement or the user selects the “On every tick” option in the “Recalculate” section of the strategy’sproperties, it recalculates oneveryprice update in the realtime data. This behavior can cause strategies to repaint because historical bars do not contain the same information as realtime bars. Seethis sectionof theStrategiespage to learn more.",https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,Incorrect usage of `request.security()` calls,https://www.tradingview.com/pine-script-docs/faq/alerts
Why is my alert firing at the wrongtime?,"Usingrequest.security()calls to fetch data from alternative timeframes can cause discrepancies on historical bars that scriptscannotreproduce on realtime bars. Ensure you follow the best practices fornon-repaintingdata requests to avoid such discrepancies, especially with higher-timeframe data. See theAvoiding repaintingsection of theOther timeframes and datapage and theHigher-timeframe requestspublication from PineCoders for more information.",https://www.tradingview.com/pine-script-docs/faq/alerts
Can I use variable messages withalertcondition()?,"Themessageparameter of thealertcondition()function requires a “const string” argument, whichcannot changeafter compilation. However, the “string” can includeplaceholders, which an alert substitutes with corresponding dynamic values from a script each time it fires.",https://www.tradingview.com/pine-script-docs/faq/alerts
Can I use variable messages withalertcondition()?,"The script below demonstrates twoalertcondition()calls whosemessagearguments include placeholders for dynamic values. Each time alerts from these triggers occur, the message displays information about the current chart’s exchange, symbol, price, and volume:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I include values that change in myalerts?,The method for including dynamic values in alert messages varies with the type of alert trigger:,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I get custom alerts on manysymbols?,"To manage alerts across multiple symbols using a custom script, one option is to set an individual alert on each symbol. There is no automated method to set the same alert across many symbols simultaneously in a single action. It’s also important to note that the TradingViewscreeneruses built-in filters and does not support custom Pine Script™ code.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I get custom alerts on manysymbols?,"Scripts can retrieve data from othercontexts(symbols, timeframes, and modifiers such as non-standard chart calculations and extended sessions) using the functions in therequest.*()namespace. With these functions, programmers can design scripts that retrieve data from up to 40 unique contexts. Search for “screener” in the Community scripts for in-depth examples.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I get custom alerts on manysymbols?,"Here is an example incorporating three symbols. ThecheckForAlert()function callsrequest.security()to fetch data from a specified context and evaluate the user-definedcheckForRsiConditions()function using that data. Then, the function callsalert()using the result to create an alert trigger. The script calls this function three times, creating distinct alert triggers for each specified symbol:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I get custom alerts on manysymbols?,Note that:,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,"Firing an alert only on its first occurrence can help avoid redundant notifications and isolate specific conditions or state changes, which is beneficial in several use cases. For instance, if a user relies on alerts to automate order placement, restricting redundant alerts to their first occurrence can help avoid accidentally placing excessive orders.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,"For alerts withalertcondition()triggers, setting them to fire once using the “Only Once” option in the “Create Alert” dialog box is not an optimal solution because it requiresmanualreactivation each time an alert occurs. Alerts from thealert()function do not have an “Only Once” frequency option. The programmer must use conditional logic to ensure the call executes at the appropriate time.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,There are two primary ways to code repeating alerts that fire on only the first instance of a condition:,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,Using more strict criteria,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,"Rather than relying on a continuous condition likeclose > ma, which may remaintruefor multiple consecutive bars, try using a more strict condition liketa.crossover(close, ma). For simple cases, this is the easiest method.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,Using state control,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,"More complex scenarios may require controlling and trackingstates, which entails setting flags or specific values to signify certain conditions.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,"The example script below manages separate bullish and bearish states, and it colors the background to represent each state. When a bullish or bearish state first occurs, analert()call executes and the script plots a triangle on the chart. It also plots smaller triangles to show where other signals occur within a state, which do not trigger additional alerts:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I trigger an alert for only the first instance of acondition?,//,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I run my alert on a timer ordelay?,"It is possible to program logic to delay alert triggers so that they occurafterthe initial condition. However, because Pine scripts execute on realtime bars only after newprice updates, and an alert only fires when a scriptexecutes, it is difficult to predict the exact time of a delayed alert.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I run my alert on a timer ordelay?,"There are no price updates in a closed market, meaning an alert with a delay will not fire until the market opens again. Similarly, thinly traded securities may have very infrequent price updates in unpredictable intervals, which can cause a larger delay than intended.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I run my alert on a timer ordelay?,"The Pine script below implements atime-delayedalert, which is subject to the limitations above. When the currentcloseis higher than a moving average, a delay counter starts. After the delay passes, the alert fires once, and another alertcannotfire until the timer resets. Users can specify whether the timer resets on each bar using the script’sresetInput:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I run my alert on a timer ordelay?,,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I run my alert on a timer ordelay?,Note that:,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I run my alert on a timer ordelay?,"This script relies on variables declared with thevaripkeyword, which do not revert to their last committed states during realtime bar calculations. Seethis sectionof the User Manual to learn more about using this keyword. To learn about howrollbackworks, see theExecution modelpage.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,"Alerts can send messages containing JavaScript Object Notation (JSON) towebhooks. Pine Script™ does not include any built-in functions to produce JSON, but programmers can create JSON messages in Pine by constructing “string” representations.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,"When constructing JSON representations, ensure the keys and values intended as strings in the JSON-formatted text usedouble quotes, not single quotes.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,The following example shows three ways to construct JSON strings in Pine Script™:,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,Static JSON Strings,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,Define separate alerts with predefined JSON-formatted strings. This method is the simplest.,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,Placeholders,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,"Useplaceholdersin the alert message, such as{{close}}and{{volume}}, to adddynamicvalues to the JSON. The alert instance replaces the placeholders with corresponding values when it fires. This method can create richer alerts, especially forstrategies, which haveextra placeholdersfor their calculated values. Seethis sectionabove for an example.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,Dynamic strings,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,"Use the functions in thestr.*()namespace and “string” concatenation to create dynamic JSON-formatted text. This method is the most customizable and advanced. Our script below shows a simple, straightforward example of this approach. When using dynamic string formatting to construct JSON strings, ensure the resulting JSON isvalidfor all the combined values.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,"Before using the JSON-formatted string in alerts for real-world applications, such as sending messages to place orders,testandvalidatethe JSON message to ensure it works as intended:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I create JSON messages in myalerts?,"Refer tothis Wikipedia pageto learn more about JSON format. To learn more about how alerts send information using webhooks, see the Help Center article onwebhooks.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,Sending alerts from a Pine script to a Discord chat room is possible usingwebhooks.,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,"The message for Discord communication requiresJSON format. Theminimumrequirement for a valid message is{""content"": ""Your message here""}.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,"The script example below usesplaceholdersto dynamically populate alert messages with script values, including the new high or low price, and the chart’s symbol and timeframe:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,"To send these alert messages to Discord, follow these steps:",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,1. Create a Discord webhook,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,2. Set up an alert on TradingView,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,3. Test the integration,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,Consult Discord’sWebhook Resourceto learn about advanced JSON message configurations.,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,"For more information about dynamic values in alert messages, refer toHow can I include values that change in my alerts?.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toDiscord?,"To learn about using JSON format in script alerts, seeHow can I create JSON messages in my alerts?.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toTelegram?,"Sending TradingView alerts directly to Telegram is challenging due to protocol differences and formatting requirements. One solution is to use an intermediary service, which receives webhook alerts from TradingView, formats them as required by Telegram, and then forwards them to a Telegram bot.",https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toTelegram?,See the Telegram Bot APIdocumentationfor detailed technical information.,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toTelegram?,Previous,https://www.tradingview.com/pine-script-docs/faq/alerts
How can I send alerts toTelegram?,Next,https://www.tradingview.com/pine-script-docs/faq/alerts
What data structures can I use in PineScript™?,"Pine data structures resemble those in other programming languages, with some important differences:",https://www.tradingview.com/pine-script-docs/faq/data-structures
What data structures can I use in PineScript™?,Tuple: An arbitrary—and temporary—grouping of values of one or more types.,https://www.tradingview.com/pine-script-docs/faq/data-structures
What data structures can I use in PineScript™?,Array: An ordered sequence of values of a single type.,https://www.tradingview.com/pine-script-docs/faq/data-structures
What data structures can I use in PineScript™?,Matrix: A two-dimensional ordered sequence of values of a single type.,https://www.tradingview.com/pine-script-docs/faq/data-structures
What data structures can I use in PineScript™?,Object: An arbitrary—and persistent—collection of values of one or more types.,https://www.tradingview.com/pine-script-docs/faq/data-structures
What data structures can I use in PineScript™?,"Map: Anunorderedsequence of key-value pairs, where the keys are of a single type and the values are of a single type.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What data structures can I use in PineScript™?,The following sections describe each data structure in more detail.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Tuples,"Atuplein Pine Script™ is a list of values that is returned by afunction,method, or local block. Unlike in other languages, tuples in Pine serve no other function.
Tuples do not have names and cannot be assigned to variables.
Apart from the fact that the values are requested and returned together, the values have no relation to each other, in contrast to the other data structures described here.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Tuples,"To define a tuple, enclose a comma-separated list of values in square brackets.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Tuples,"Using a tuple to request several values from the same symbol and timeframe using arequest.security()call is more efficient than making several calls. For instance, consider a script that contains separaterequest.security()calls for theopen,high,low, andcloseprices:",https://www.tradingview.com/pine-script-docs/faq/data-structures
Tuples,"Using a tuple can consolidate these calls into a singlerequest.security()function call, reducing performance overhead:",https://www.tradingview.com/pine-script-docs/faq/data-structures
Tuples,See theTuplessection in the User Manual for more information.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Arrays,Arraysstore multiple values of the sametypein a single variable. Eachelementin an array can be efficiently accessed by itsindex—an integer corresponding to its position within the array.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Arrays,"Arrays can contain an arbitrary number of elements. Scripts can loop through arrays, testing each element in turn for certain logical conditions. There are also many built-in functions to perform different operations on arrays. This flexibility makes arrays very versatile data structures.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Arrays,"Arrays can be created with either thearray.new<type>()orarray.from()function. In this simple example, we store the last five closing prices in an array and display it in a table:",https://www.tradingview.com/pine-script-docs/faq/data-structures
Arrays,See theArrayssection in the User Manual for more information.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Matrices,"Amatrixis a two-dimensional array, made of rows and columns, like a spreadsheet. Matrices, like arrays, store values of the same built-in or user-definedtype.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Matrices,"Matrices have many built-in functions available to organize and manipulate their data. Matrices are useful for modeling complex systems, solving mathematical problems, and improving algorithm performance.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Matrices,"This script demonstrates a simple example of matrix addition. It creates a 3x3 matrix, calculates itstranspose, then calculates thematrix.sum()of the two matrices. This example displays the original matrix, itstranspose, and the resulting sum matrix in a table on the chart.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Matrices,,https://www.tradingview.com/pine-script-docs/faq/data-structures
Matrices,See theMatricessection in the User Manual for more information.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Objects,Pine Script™objectsare containers that group together multiple fields into one logical unit.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Objects,Objects areinstancesofuser-defined types(UDTs). UDTs are similar tostructsin traditional programming languages. They define the rules for what an object can contain. Scripts first create a UDT by using thetypekeyword and then create one or more objects of that type by using the UDT’s built-innew()method.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Objects,"UDTs arecompositetypes; they contain an arbitrary number of fields that can be of any type. A UDT’s field type can even be another UDT, which means that objects can contain other objects.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Objects,"Our example script creates a newpivotobject each time a new pivot is found, and draws a label using each of the object’s fields:",https://www.tradingview.com/pine-script-docs/faq/data-structures
Objects,See the User Manual page onObjectsto learn more about working with UDTs.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Maps,"Mapsin Pine Script™ are similar todictionariesin other programming languages, such as dictionaries in Python, objects in JavaScript, or HashMaps in Java.
Maps store elements as key-value pairs, where each key is unique. Scripts can access a particular value by looking up its associated key.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Maps,"Maps are useful when accessing data directly without searching through each element, as you need to do with arrays. For example, maps can be more performant and simpler than arrays for associating specific attributes with symbols, or dates with events.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Maps,"The following example illustrates the practical application of maps for managing earnings dates and values as key-value pairs, with dates serving as the keys:",https://www.tradingview.com/pine-script-docs/faq/data-structures
Maps,,https://www.tradingview.com/pine-script-docs/faq/data-structures
Maps,"Here, we userequest.earnings()with the barmerge parameter set tobarmerge.gaps_onto return the earnings value on bars where earnings data is available, and returnnaotherwise.
We add non-na values to the map, associating the dates that earnings occurred with the earnings numbers. Finally, on the last historical bar, the scriptloops through the map, logging each key-value pair to display the map’s contents.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Maps,"To learn more about working with maps, refer to theMapssection in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between a series and anarray?,"In Pine Script™,“series”variables are calculated on each bar. Historical values cannot change. Series values can change during the realtime bar, but when the bar closes, the value for that bar becomes fixed and immutable.
These fixed values are automatically indexed for each bar. Scripts can access values from previous bars by using the[] history-referencing operator) to go back one or more bars.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between a series and anarray?,"Where “series” variables are strictly time-indexed, and the historical values are created automatically,arraysare created, filled, and manipulated arbitrarily by a script’s logic. Programmers can change the size of arrays dynamically by using functions thatinsert or remove elements. Any element in an array can also be altered using thearray.set()function.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between a series and anarray?,"The concept oftime seriesis a fundamental aspect of Pine Script™. Its series-basedexecution modelprocesses scripts bar-by-bar. This built-in behavior mimics looping, allowing a series to track values, accumulate totals, or perform calculations across a sequence of data on each bar.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between a series and anarray?,"Simple calculations can thus be done efficiently using “series” variables. Using arrays for similar tasks requires manually creating a dataset, managing its size, and using loops to process the array’s contents, which can be far less efficient.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between a series and anarray?,"Arrays, of course, can do many things that series variables cannot. Scripts can use arrays to store a fixed set of values, store complex data such as User-Defined Types, manipulate objects for visual display, and more.
In general, use arrays to handle data that doesn’t fit the time series model, or for complex calculations. Arrays can also mimic series by creating custom datasets, as in thegetSerieslibrary.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between a series and anarray?,Notice!An array is itself a series. Historical values of an array can beaccessed by using the history-referencing operator.,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Pine Script™arraysare one-dimensional collections that can hold multiple values of a single type.,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Declaring arrays,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,"Declare an array by using one of the following functions:array.new<type>(),array.from(),
orarray.copy().
Arrays can be declared with thevarkeyword to have their values persist from bar to bar, or without it, so that the values initialize again on each bar.
For more on the differences between declaring arrays with or withoutvar, seethis sectionof this FAQ.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Adding and removing elements,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Pine Script™ provides several functions for dynamically adjusting the size and contents of arrays.,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Adding elements,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Removing elements,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,"The flexibility afforded by these functions supports various data management strategies, such asqueuesorstacks, which are useful for custom datasets or sliding window calculations.
Read more about implementing a stack or queue inthis FAQ entry.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Calculations on arrays,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,"Because arrays are nottime seriesdata structures, performing operations across an array’s elements requires special functions designed for arrays.
Programmers can write custom functions to perform calculations on arrays. Additionally, built-in functions enable computations like finding the maximum, minimum, or average values within an array.
See theCalculation on arrayssection of the User Manual for more information.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,Script example,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,"This script example demonstrates a practical application of arrays by tracking the opening prices of the last five sessions. The script declares a float array to hold the prices using thevarkeyword, allowing it to retain its values from bar to bar.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,"At the start of each session, we update the array by adding the new opening price and removing the oldest one. This process, resembling aqueue, keeps the array’s size constant while maintaining a moving window of the session opens for the last five days.
Built-in array functions return the highest, lowest, and average opening price over the last five sessions. We plot these values to the chart.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,,https://www.tradingview.com/pine-script-docs/faq/data-structures
How do I create and use arrays in PineScript™?,"For more information about arrays, see theArrayspage in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,"Using thevarkeyword, a script can declare anarrayvariable in a script that is initialized only once, during the first iteration on the first chart bar.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,Persistent arrays,https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,"When an array is declared withvar, it is initialized only once, at the first execution of the script. This allows the array to retain its contents and potentially grow in size across bars, making it ideal for cumulative data collection or tracking values over time.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,Non-persistent arrays,https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,"Arrays declared withoutvarare reinitialized on every new bar, effectively resetting their content. This behavior suits scenarios where calculations are specific to the current bar, and historical data retention is unnecessary.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,Example script,https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,"Here, we initialize two arrays. Arrayais declared without using thevarkeyword, while arraybis declared withvar, allowing us to observe and compare their behavior. Throughout the runtime, we incrementally add an element to
each array on each bar. We use atableto present and compare both the sizes of these arrays and the number of chart bars, effectively illustrating the impact of
different declaration methods on array behavior:",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,Results,https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the difference between an array declared with or without`var`?,"For further details, consult the sections concerning variabledeclaration modesand their use inarray declarationsin the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,Scripts can usearraysto createqueuesandstacks.,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,Stacks,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,"A stack uses the “last in, first out” (LIFO) principle, where the most recently added item is the first to be taken away.
Think of this like a stack of plates, where you can only place a new plate on top or remove the top plate. To use an array as a stack, add elements to the end of the array usingarray.push()and remove elements from the end of the array usingarray.pop().",https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,Queues,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,"A queue uses the “first in, first out” (FIFO) principle, where the first item to be added is the first to be removed. This kind of queue in code is like a queue in real life, such as in a coffee shop, where no matter how many people join the end of the queue, the first person still gets served first. To use an array as a queue, add elements to the end of the array usingarray.push()and remove them from the beginning usingarray.shift().",https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,"Stacks are particularly useful for accessing the most recent data, such as for tracking price levels. Queues are used for sequential data processing tasks, like event handling. Two example scripts follow, to illustrate these different usages.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,Example: Arrays as stacks,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,"This script uses arrays as stacks to manage pivot points. It drawslinesfrom the pivot points and extends the lines with each new bar until price intersects them.
When the script detects a pivot point, it adds (pushes) a new line to the stack. With each new bar, the script extends the end point of each line in the stack.
It then checks whether price has intersected the high or low pivot lines at the top of the stack. If so, the script removes (pops) the intersected line from the stack, meaning that it will no longer be extended with new bars.
Note that we do not need to iterate through the arrays to check all the lines, because price is always between only the high and low pivot lines at the end of each array.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,Example: Arrays as queues,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,"This script uses arrays as queues to track pivot points for monitoring recent support and resistance levels. It dynamically updateslinesextending from the four most recent pivot highs and lows to the current bar with each new bar. When the script detects a new pivot high or low, it adds a line that represents this pivot to the respective queue.
To maintain the queue’s size at a constant four items, the script removes the oldest line in the queue whenever it adds a new line.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,,https://www.tradingview.com/pine-script-docs/faq/data-structures
What are queues andstacks?,"For more information on manipulating arrays, see theArrayssection in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,"In Pine Script™, there are no built-in functions to apply operations across the entire array at once. Instead, scripts need to iterate through the array, performing the operation on each element one at a time.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,"The easiest way to retrieve each element in an array is by using afor…instructure. This type of loop retrieves each element in turn, without the need for specifying the number of iterations.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,"The simple form of the loop has the formatfor element in array, whereelementis a variable that is assigned the current array element being accessed.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,"If the script’s logic requires the position of the element in the array, use the two-argument form:for [index, element] in array. This form returns both the current element and its index in atuple.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,Example: retrieving array elements,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,This first example script uses an array as aqueueto storelinesrepresenting the latest four pivot highs and lows. Thefor…inloop performs two tasks:,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,Note that neither of these operations requires knowing the index of the array element.,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,Example: retrieving array elements and indices,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I perform operations on all elements in anarray?,"In our second script, we use the two-argument variant of thefor…inloop to access elements and their indices in an array.
This method facilitates operations that depend on element indices, such as managing parallel arrays or incorporating index values into calculations.
The script pairs a boolean array with an array of positive and negative random integers. The boolean array flags whether each corresponding integer in the primary array is positive.",https://www.tradingview.com/pine-script-docs/faq/data-structures
What’s the most efficient way to search anarray?,"The obvious way to search for an element in an array is to use aloopto check each element in turn.
However, there are more efficient ways to search, which can be useful in different situations.
Some of the following functions return only the index of a value. Programmers can then usearray.get()if the script needs the actual value.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Checking if a value is present in anarray,"If all the script needs to do is to check whether a certain value is present in an array or not, use thearray.includes()function.
If the element is found, the function returnstrue; otherwise, it returnsfalse.
This method does not return the index of the element.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Checking if a value is present in anarray,"The following example script checks if the value3is present in thevaluesarray, and displays either “found” or “not found” in alabel.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Finding the position of anelement,"If the script requires thepositionof an element, programmers can use thearray.indexof()function.
This function returns the index of thefirstoccurrence of a value within an array. If the value is not found, the function returns-1.
This method does not show whether there are multiple occurrences of the search value in the array. Depending on the script logic, this method might not be suitable if the array contains values that are not unique.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Finding the position of anelement,"The following script searches for the first occurrence of101.2in thepricesarray and displays “found” and the value’s index in a label, or “not found” otherwise.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Binarysearch,"If the script requires the position of the element in a sorted array, the functionarray.binary_search()returns the index of a value more efficiently thanarray.indexof(). The performance improvement is significant for large arrays. If the value is not found, the function returns-1.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Binarysearch,Notice!The array must be of type “int” or “float” and must besortedin ascending order forarray.binary_search()to work.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Binarysearch,"This script uses a binary search to find the value100.5within an array of prices. The script displays the original array, the sorted array, the target value (100.5), and the result of the search.
If the value is found, it displays “found”, along with the index of the value. If the value is not found, it displays “not found”.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Binarysearch,"If a script does not need the exact value, the functionsarray.binary_search_leftmost()andarray.binary_search_rightmost()provide an effective way to locate the nearest index to a given value in sorted arrays.
These functions return the index of the value, if it is present. If the value is not present, they return the index of the element that is closest to the search value on the left (smaller) or right (larger) side.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugarrays?,"To debug arrays, scripts need to display the contents of the array at certain points in the script.
Techniques that can display the contents of arrays include using plots, labels, tables, and Pine Logs.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugarrays?,"For information about commonly encountered array-related errors, refer to the arrayError Handlingsection in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Plotting,"Using theplot()function to inspect the contents of an array can be helpful because this function can show numerical values on the script’s status line, the price
scale, and the Data Window. It is also easy to review historical values.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Plotting,Limitations of this approach include:,https://www.tradingview.com/pine-script-docs/faq/data-structures
Plotting,"Here we populate an array with theopen,high,lowandclose(OHLC) prices on each bar. The script retrieves all the elements of the array and plots them on the chart.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Usinglabels,"Usinglabelsto display array values on certain bars is particularly useful for non-continuous data points or to view all elements of an array simultaneously.
Scripts can create labels within any local scope, includingfunctionsandmethods. Scripts can also position drawings at any available chart location, irrespective of the currentbar_index.
Unlike plots, labels can display the contents of a variety of array types, including boolean and string arrays.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Usinglabels,Limitations of using labels include:,https://www.tradingview.com/pine-script-docs/faq/data-structures
Usinglabels,"In the following example script, we monitor the close price at the last four moving average (MA) crosses in a queued array and use a label to display this array from a local scope whenever a cross occurs:",https://www.tradingview.com/pine-script-docs/faq/data-structures
Usinglabels,"For more information, see thedebugging with labelssection in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using labeltooltips,"If programmers want to be able to inspect the values in an array on every bar, displaying the contents of the array in a label is not convenient, because the labels overlap and become difficult to read.
In this case, displaying the array contents in a label tooltip can be visually clearer. This method has the same advantages and limitations asusing labelsin the section above.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using labeltooltips,"This example script plots a fast and a slow moving average (MA). It maintains one array of the most recent three values of the fast MA, and one array for the slow MA. The script prints empty labels on each bar.
The tooltip shows the values of the MA arrays and whether or not the MAs crossed this bar. The labels are displayed in a semi-transparent color, and the tooltip is visible only when the cursor hovers over the label.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Usingtables,Usingtablesfor debugging offers a more organized and scalable alternative to labels. Tables can display multiple“series”strings in a clear format that remains unaffected by the chart’s scale or the index of the bars.,https://www.tradingview.com/pine-script-docs/faq/data-structures
Usingtables,"Limitations of using tables for debugging include that, unlike labels, the state of a table can only be viewed from the most recent script execution, making it hard to view historical data.
Additionally, tables are computationally more expensive than other debugging methods and can require more code.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Usingtables,"In the following example script, we create and display two unrelated arrays, to show how flexible this approach can be. The first array captures the times of the last six bars where a Golden Cross occurred. The second array records the last eight bar indices where the Relative Strength Index (RSI) reached new all-time highs within the chart’s history. We use thewhenSince()function from the PineCoders’getSerieslibrary to create and update the arrays. This function treats the arrays asqueues, and limits their size.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using PineLogs,"Pine Logsare messages that display in the Pine Logs pane, along with a timestamp when the logging function was called.
Scripts can create log messages at specific points during the execution of a script. Pine Logs can display any script values or variables at any part of your code, includinglocal scopes,functions, andloops.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using PineLogs,"By logging messages to the console whenever there is a modification to the array, programmers can track the logical flow of array operations in much more detail than by using other approaches.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using PineLogs,"The script below updates a previous example script from the section onqueues and stacksto add logging. It uses arrays asstacksto track lines drawn from pivot points. When a pivot occurs, the script adds a new line to the stack and continues to extend the lines on each bar until an intersection with price occurs. If an intersection is found, the script removes (pops) the intersected line from the stack, meaning it will no longer be extended with new bars.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using PineLogs,"Theconsole messagesare time stamped and offer detailed information about when elements are added to and removed from the arrays, the current size of the arrays, and the specific prices at which elements were added.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Using PineLogs,,https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use matrices or multidimensional arrays in PineScript™?,"Pine Script™ does not directly support multidimensional arrays; however, it providesmatricesanduser-defined types(UDTs).
Programmers can use these data structures to create and manipulate complex datasets.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use matrices or multidimensional arrays in PineScript™?,Matrices,https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use matrices or multidimensional arrays in PineScript™?,"Pine Scriptmatricesare like two-dimensional arrays. They organize data in a rectangular grid, facilitating operations like transformations, linear algebra, and other complex calculations. They are particularly useful for quantitative modeling, such as portfolio optimization, correlation matrix analysis, and more.
Just as inarrays, all elements in a matrix must be of the sametype, which can be a built-in or auser-definedtype. Pine Script™ provides a range of functions formanipulatingand performingcalculationson matrices, including addition, subtraction, multiplication, and more.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use matrices or multidimensional arrays in PineScript™?,Using UDTs for multidimensional structures,https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use matrices or multidimensional arrays in PineScript™?,"Programmers can achieve similar functionality to multidimensional arrays through defininguser-defined types(UDTs). For example, a script can define a UDT that includes an array as one of its fields. UDTs themselves can be contained in arrays. In this way, scripts can effectively have arrays of arrays.",https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use matrices or multidimensional arrays in PineScript™?,"For more information, see the sections onMatrices,Maps, andObjectsin the User Manual.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugobjects?,"To debugobjects, create custom functions that break down an object into its constituent fields and convert these fields into strings.
See theDebuggingsection of the User Manual for information about methods to display debug information.
In particular,Pine Logscan display extensive and detailed debug information. See the FAQ section about debugging arraysusing Pine Logsfor an explanation of using logs for debugging.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugobjects?,"In our example script, we create auser-defined type(UDT) namedopenLine, which includes fields such asprice,openTime, and a line object calledlevel.
On the first bar of each session, the script initializes a newopenLineinstance. This object tracks the session’s opening price and time, and it draws a line at the open price, extending from the session’s start to
its close. An array stores eachopenLineobject. A custom functiondebugOpenLine()breaks anopenLineobject into its individual fields, converts the fields to strings, and then logs a message that displays these strings in the console.",https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugobjects?,,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugobjects?,Previous,https://www.tradingview.com/pine-script-docs/faq/data-structures
How can I debugobjects?,Next,https://www.tradingview.com/pine-script-docs/faq/data-structures
Can I use a variable length infunctions?,"Manybuilt-intechnical analysis (TA) functions have alengthparameter, such asta.sma(source, length).
A majority of these functions can process “series” lengths, i.e., lengths that can change from bar to bar.
Some functions, however, only accept “simple” integer lengths, which must be known on bar zero and not change during the execution of the script.",https://www.tradingview.com/pine-script-docs/faq/functions
Can I use a variable length infunctions?,Check the Reference Manual entry for a function to see what type of values a function can process.,https://www.tradingview.com/pine-script-docs/faq/functions
Can I use a variable length infunctions?,Additional resources,https://www.tradingview.com/pine-script-docs/faq/functions
Can I use a variable length infunctions?,"For more advanced versions of functions that support “series” lengths, or for extra technical analysis tools explore theta libraryon the TradingView profile.
This library offers a range of extended TA-related capabilities and custom implementations.",https://www.tradingview.com/pine-script-docs/faq/functions
Can I use a variable length infunctions?,User-defined functions,https://www.tradingview.com/pine-script-docs/faq/functions
Can I use a variable length infunctions?,"For built-in functions that do not accept “series” lengths and for which the functionality is not available in theta library, consider creating auser-defined function.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,"To calculate certain values that are dependent on varying lengths, which also reset under specific conditions, theta.barssince()function can be useful.
This function counts the number of bars since the last occurrence of a specified condition, automatically resetting the count each time this condition is met.
There are, however, some considerations to take into account when using this function for this purpose.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,"Firstly, before the condition is met for the first time in a chart’s history,ta.barssince()returnsna. This value is not usable as a length for functions and can cause errors, especially during execution on a chart’s early bars.
For a more robust version, usenz()to replace thenareturn ofta.barssince()with zero for early bars.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,"Secondly, when the condition is met,ta.barssince()returns zero for that bar, since zero bars have elapsed since the condition was last true.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,"Since lengths cannot be zero, it is necessary to add one to a returned value of zero, ensuring that the length is always at least one.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,"Here’s an example of how to use these principles for a practical purpose. The following example script calculates the highest and lowest price points since the start of a new day.
We usetimeframe.change()to detect the start of a new day, which is our condition.
Theta.barssince()function calculates the number of bars that elapsed since this condition was last met.
The script passes this number, or “lookback”, to theta.lowest()andta.highest()functions, which determine the highest and lowest points since the start of the new day:",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,,https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate values depending on variable lengths that reset on acondition?,"Notice!When scripts pass variable lengths to built-in functions, an error can occur if the specified number of bars back is excessively large and increases dynamically and unpredictably.
The error message “Pine cannot determine the referencing length of a series. Try using max_bars_back” indicates this issue. For more information on resolving this problem, refer to theHelp Centerarticle andUser Manualentry on the topic.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I round a number to xincrements?,"Rounding numbers to specific increments is useful for tasks like calculating levels for grid trading, dealing with fractional shares, or aligning trading parameters to specific pip values.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I round a number to xincrements?,"In this example, theroundToIncrement()function accepts a value and an increment as parameters. It divides the value by the increment, rounds the result, then multiplies it by the increment to give the rounded value.
To demonstrate the function, the closing price is rounded to the nearest increment defined in the user menu:",https://www.tradingview.com/pine-script-docs/faq/functions
How can I control the precision of values my scriptdisplays?,Theprecisionandformatarguments in theindicator()orstrategy()declaration statement control the number of decimals in the values that a script displays.,https://www.tradingview.com/pine-script-docs/faq/functions
How can I control the precision of values my scriptdisplays?,"By default, scripts use the precision of the price scale. To display more decimal places, specify aprecisionargument that exceeds the value of the current price scale.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I control the precision of values used in mycalculations?,"Themath.round(number, precision)variation of themath.round()function rounds values according to a specified precision.
Alternatively, themath.round_to_mintick()function rounds values to the nearest tick precision of the chart’s symbol.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I round toticks?,"To round values to the tick precision of a chart’s symbol, use the functionmath.round_to_mintick().
To convert the resulting number to a string, usestr.tostring(myValue, format.mintick)to first round the number to tick precision and then return its string representation, wheremyValueis the number to convert into a rounded string.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,"There are different ways to abbreviate large numerical values, such as volume. For instance, the number 1,222,333.0 can be simplified to 1.222M.
Here are some methods to accomplish this:",https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,Apply a global setting,https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,"Use the argumentformat = format.volumewithin either theindicator()orstrategy()statements. Using this setting, displays all values in the script in their abbreviated forms.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,Abbreviate specific values,https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,"To abbreviate only certain values for string display, use thestr.tostring(value, format.volume)function.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,Use a custom function,https://www.tradingview.com/pine-script-docs/faq/functions
How can I abbreviate largevalues?,"To specify a custom precision or abbreviate values up to trillions, use a custom function. In the following example script, theuser-defined functionabbreviateValue()divides thevalueby a power of ten based on its magnitude, and adds an abbreviation letter (K, M, B, or T) to represent the magnitude of the original value.
The function also adds a subtle space between the value and the magnitude letter. Theprint()function displays the value on the chart for visualization.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate usingpips?,"Use the custom functioncalcBaseUnit()in the following example script to return the correct pip value for Forex symbols, or the base unit of change for non-forex symbols:",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate usingpips?,"Notice!This function might not address all potential scenarios, so confirm the results with your broker to ensure the function’s output matches the broker’s values.",https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,The method of calculating averages depends on the type of values to average.,https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,Distinct variables,https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,"To find the average of a small number of discrete variables, use the functionmath.avg(number0, number1, …).
Simply pass each of the variables as an argument to this function.",https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,Bar prices,https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,"To find the average price of a single bar, use the built-in variableshl2,hlc3, andohlc4.",https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,Series values,https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,"To compute the average of the lastnvalues in a series, use the functionta.sma(series,n).",https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,Custom datasets,https://www.tradingview.com/pine-script-docs/faq/functions
How do I calculateaverages?,"To average a custom set of values, organize them into anarrayand usearray.avg(). For complex datasets, programmers can use thematrix.avg()function to average the contents of a matrix. For a deeper understanding of averaging custom datasets, refer to  thisconditional averagespublication.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate an average only when a certain condition istrue?,"The usual methods of calculating averages, which were discussed in thecalculating averages sectionabove, apply acrossalldata points in a range.
To calculate averages of only those values that occur under specific conditions, calculateconditional averagesusing custom functions.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate an average only when a certain condition istrue?,The example script below imports alibrarycalledConditionalAveragesand uses two of its functions:,https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate an average only when a certain condition istrue?,"The condition for these conditional averages issession opening bars, which we determine using thesession.isfirstbar_regularvariable.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate an average only when a certain condition istrue?,,https://www.tradingview.com/pine-script-docs/faq/functions
How can I calculate an average only when a certain condition istrue?,Notice!TheConditionalAveragesandgetSerieslibraries by PineCoders offer additional functions for conditional averaging and the creation of custom datasets.,https://www.tradingview.com/pine-script-docs/faq/functions
How can I generate a randomnumber?,"Use themath.random()function to generate random numbers.
This example script creates a circle plot with random RGB color values and a random y value between 0 and 1:",https://www.tradingview.com/pine-script-docs/faq/functions
How can I evaluate a filter I am planning touse?,"To evaluate a filter, insert your filter code into theFilter Information Box - PineCoders FAQscript.
This script conducts an impulse response analysis and shows the filter’s characteristics in a label on the chart.",https://www.tradingview.com/pine-script-docs/faq/functions
How can I evaluate a filter I am planning touse?,"For further details and a guide on integrating your filter into the code, refer to the publication’s description.",https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,"Thenz()function replaces anynavalues with zero, or with a user-defined value if thereplacementargument is specified. This function helps to preventnavalues from interfering with calculations.",https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,"The following example script shows an exaggerated failure as a result of a singlenavalue. ThebarRangeRawvariable isnaonly once, on the first bar, because it references a bar that does not exist, using the history-referencing operator. The alternative variablebarRangeWithNzusesnz()to prevent annavalue from ever occurring.",https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,"ThedependentCalculationvariable takes one of these values and uses it to calculate a crude average of the bar range.
If the input to this calculation is everna, the series will benaforever after that.",https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,"Choose between the two values for bar range using the input setting, and the range either displays or not. In the latter case, the Data Window shows that the value ofdependentCalculationisϴ, meaningna.",https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,"Thenz()function is also useful to protect against any potential divide-by-zero errors. It guarantees a return value even when an equation unintentionally features a zero in the denominator. Consider the following code snippet that intentionally creates a divide-by-zero
scenario by setting the denominator to zero. Without thenz()function, this expression would returnna,
instead of zero:",https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,Previous,https://www.tradingview.com/pine-script-docs/faq/functions
What does nz()do?,Next,https://www.tradingview.com/pine-script-docs/faq/functions
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,TheVolumeandVisible Range Volume Profileindicators (along with some other built-in indicators) are written in Java. They display data on the main chart pane in a unique way:,https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,It is difficult for Pine Script™ indicators to plot values in the same way.,https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,Limitations of `plot.style_columns`,https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,"Volume, or another series, plotted as columns, is anchored to the bottom of the chart, and the width and length of the bars can adjust dynamically. However, the tops of the bars are defined by absolute price values. This means that it is not possible for the series to be plotted on the main chart without distorting the price scale. Also, plots must be defined during processing of the bar they are plotted on, and cannot be plotted retroactively.",https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,Limitations of drawings,https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,"Drawing objects such aslines and boxesare anchored to an absolute price scale, not to the edge of the chart. Drawing objects do not adjust their length automatically. Lines do not adjust their width automatically. Although boxes can be drawn exactly one bar wide, and so adjust their width automatically, they cannot be drawn so as to fit exactly in one bar; they always draw from the middle of one bar to the middle of another.",https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,The following example script demonstrates some techniques for approximating the way that the built-inVolumeindicator displays.,https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,"Notice!The bottom margin of the chart must be set to zero in order for the lines to start from the bottom edge of the chart. To set the margin, right-click the chart background and click “Settings…” then “Canvas”, and set the “Bottom” margin in the “Margins” section. To preserve the same space at the bottom of the chart, the user can add a bottom margin in the script settings.",https://www.tradingview.com/pine-script-docs/faq/indicators
Can I create an indicator that plots like the built-in Volume or Volume Profileindicators?,This script has some other limitations:,https://www.tradingview.com/pine-script-docs/faq/indicators
Can I use a Pine script with the TradingViewscreener?,"The TradingViewscreeneruses only its built-in filters, and cannot use a Pine script.Search for “screener”in the Community Collection to find scripts that use therequest.security()function to screen pre-set lists of symbols.",https://www.tradingview.com/pine-script-docs/faq/indicators
Can I use a Pine script with the TradingViewscreener?,"See alsothis FAQ entryfor an example script that generates alerts on multiple
symbols.
Note that using severalrequest.security()calls can cause scripts to compile and run more slowly than expected.",https://www.tradingview.com/pine-script-docs/faq/indicators
Can I use a Pine script with the TradingViewscreener?,"Notice!Scripts can make a maximum of 40 distinctrequest.*()function calls. Therefore, scripts can retrive data from a maximum of 40 symbols.",https://www.tradingview.com/pine-script-docs/faq/indicators
How can I use the output from one script as input toanother?,"Scripts with an input of typeinput.source()can take a plot from another script (up to a maximum of ten) as an input.
Select the script and plot to take as input in the script’s “Settings” tab. If the user removes the script from the chart and adds it again, they must select the correct inputs again.",https://www.tradingview.com/pine-script-docs/faq/indicators
How can I use the output from one script as input toanother?,"The sources used as external inputs must originate from indicators; they cannot originate from strategies. However, plots originating from indicatorscanbe used in strategies.",https://www.tradingview.com/pine-script-docs/faq/indicators
How can I use the output from one script as input toanother?,"For further information, refer tothis blog postand theSource input sectionin the User Manual.",https://www.tradingview.com/pine-script-docs/faq/indicators
Can my script draw on the main chart when it’s running in a separatepane?,"Scripts that have theoverlayparameter in theindicator()orstrategy()functions set tofalseappear in a separate pane to the main chart.
Such scripts can affect the display of the main chart in only two ways:",https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,"The option “Export chart data…” in the dropdown menu at the top right corner of the chart exports a comma-separated values (CSV) file that includes time, OHLC data, and any plots generated by your script. This option can also export strategy data.",https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,"To include specific information in the CSV file, ensure that it is plotted by the script.
If this extra information is far from the symbol’s price and the existing indicator plots, and plotting it on the chart could distort the scale of the script, or if you prefer not to display
certain plots, consider using thedisplayparameter in theplot()function.",https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,Here is an example plot that displays the close only in the Data Window. The plot title “No chart display” becomes the column header for this value in the CSV file.,https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,"Alternatively, the “Scale price chart only” in the chart settings maintains the script’s scale. To access these settings, right-click on the chart’s price scale.",https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,"To determine if a condition is true or false, use theplotshape()function, which records a 1 (for true) or 0 (for false) in the CSV file.",https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,Previous,https://www.tradingview.com/pine-script-docs/faq/indicators
Is it possible to export indicator data to afile?,Next,https://www.tradingview.com/pine-script-docs/faq/indicators
What kinds of data can I get from a highertimeframe?,"Generally speaking, therequest.security()function can get the same kinds of data from another timeframe that is available on the chart timeframe. Scripts can retrieve built-in variables likeopen,high,low,close,volume, andbar_index.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What kinds of data can I get from a highertimeframe?,"Therequest.security()function can also evaluate built-in or user-defined functions in the requestedcontext(timeframe and symbol). For example, the following example script retrieves theAverage True Range(ATR) value from the daily (1D) timeframe by passing theta.atr()function as theexpressionargument.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What kinds of data can I get from a highertimeframe?,Notice!This scriptrepaintselapsed realtime bars when the daily value is finalized. See theHow to avoid repainting when using the `request.security()` function?FAQ section to find out how to prevent repainting.,https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Which `security.*` function should I use for lowertimeframes?,"Therequest.security()function is intended for accessing data at timeframes that are equal to or higher than the chart’s current timeframe.
It ispossibleto retrieve data from lower timeframes (LTF) using this function. However, the function returns the value from onlyoneLTF bar within the chart’s current bar (the last bar, by default).",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Which `security.*` function should I use for lowertimeframes?,"If the script supplies theexpressionas a variable or simple calculation, directly or within a function, the data thatrequest.security()returns from a lower timeframe is generally of limited use (see the first script inthis sectionfor an example). It is possible, however, to construct a function that performs meaningful calculations on the LTF bars and then returns the result on the last bar. The following example script counts the number of LTF bars in a chart bar and returns this value on the last LTF bar. For simplicity, the timeframes are hardcoded to""1D""and""1W""and the script should therefore be run from a chart on the weekly timeframe.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Which `security.*` function should I use for lowertimeframes?,"When using therequest.security()function on a lower timeframe, all calculations that reference individual LTF bars must be donewithin the requested context, and only theresultof the calculation is returned.
Using therequest.security_lower_tf()function for intrabar analysis is usually easier and more powerful, because it returns anarrayof data fromallavailable intrabars within a chart bar. Returning the data for each bar allows scripts to perform calculations on specific bars or all bars in the main script context.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Which `security.*` function should I use for lowertimeframes?,"In the following version of our example script, we userequest.security_lower_tf()to perform the same calculations. With this approach, we do not need to explicitly define the current chart’s timeframe, nor do we need a custom function.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Which `security.*` function should I use for lowertimeframes?,"Notice!While easier to work with, this approach is more computationally expensive, because the script has to commit to memory an array of several values instead of a single value. If the logic of the script allows for it — as it does in our case, where both approaches return identical data — it’s often better to use the first approach in big scripts with a lot of intrabar computations, due to the performance benefits it brings.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Which `security.*` function should I use for lowertimeframes?,"See the sections in the User Manual page “Other timeframes and Data” aboutrequest.security_lower_tf()and
usingrequest.security()on lower timeframesto learn more about the differences between running these functions on a lower timeframe.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How to avoid repainting when using the `request.security()`function?,Repaintingcan be a problem when retrieving data from higher or lower timeframes usingrequest.security().,https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How to avoid repainting when using the `request.security()`function?,"Retrieving data from a different symbol on the chart’s timeframe does not risk repainting. Requesting data from the chart’s own symbol and timeframe does not result in repainting either, but it is usually unnecessary to userequest.security()rather than simply referencing the chart’s own values (except when modifying the chart’s ticker usingticker.*()functions). When using the chart’s timeframe, there is no need to offset the data, change the defaultlookaheadvalue, or usebarmerge.lookahead_onin order to avoid repainting.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Highertimeframes,"Values from ahigher timeframe(HTF) often repaint because ahistorical baron the chart might include data from arealtime baron the HTF. Realtime values can change throughout the bar; for example, thecloseprice reflects thelatestprice update in a realtime bar. When the HTF bar closes and its values become fixed, the relevant historical chart barschangeto adjust to the fixed HTF values. This behavior is described in theHistorical and realtime behaviorsection of the User Manual. Users expect historical bars not to change, which is one reason why repainting is such a concern.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Highertimeframes,"To prevent repainting, use confirmed values that remain consistent across all bars. The most robust method is to offset all expressions by 1. For example, instead ofclose, which is equivalent toclose[0], useclose[1]. Therequest.security()call must also usebarmerge.lookahead_on.
This method returns data that is up to one HTF bar “late”, and is thus not subject to change.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Highertimeframes,"Notice!Failing to offset theexpressionargument results inlookahead bias, where the script appears to have access to historical values before they would actually have occurred.
See thelookaheadandfuture leaksections for more information.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Highertimeframes,"The following example script demonstrates the use of a single bar offset to theexpressionargument andbarmerge.lookahead_oninrequest.security()to ensure that the data behaves the same on historical and realtime bars.
The script triggers aruntime errorif the chart’s timeframe exceeds or matches the daily timeframe, to prevent the return of inaccurate values.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Highertimeframes,See theAvoiding repaintingsection of the User Manual for more information.,https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Lowertimeframes,"Although therequest.security()function is intended to operate on timeframes greater than or equal to the chart timeframe, itcanrequest data from alower timeframe(LTF), with limitations. When accessing data from a LTF, the function evaluates the given expression in the LTF context and returns the result from asingleLTF bar per chart bar. The specific LTF bar returned depends on thelookaheadparameter:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Lowertimeframes,"In most cases, using therequest.security_lower_tf()function is more suitable for lower timeframes, as it returns anarraycontaining data fromallavailable intrabars within a chart bar. See the section onrequest.security_lower_tf()to learn more.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How can I convert the chart’s timeframe into a numericformat?,"Thetimeframe.in_seconds()function converts a timeframe specified intimeframe.periodformat into an equivalent number of seconds. Having the timeframe in a numeric format means that scripts can calculate the number of time units within a specific timeframe, or perform operations that adjust the timeframe used in HTF calls in relation to the chart’s timeframe, as described inthis FAQ entry.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How can I convert the chart’s timeframe into a numericformat?,"In this script example, we use thetimeframe.in_seconds()function to determine the chart’s timeframe, measured in seconds. Since no specifictimeframeargument is specified, the function defaults to usingtimeframe.period, which returns the chart’s current timeframe. The script then converts the timeframe in seconds into various other units of time, including minutes, hours, and days, and displays the original string and converted numeric values in atable:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How can I convert a timeframe in “float” minutes into a string usable with`request.security()`?,The built-in functiontimeframe.from_seconds()function converts a number of seconds into a timeframe string that is compatible withrequest.security().,https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How can I convert a timeframe in “float” minutes into a string usable with`request.security()`?,"The example script below converts a user-defined number of minutes into a timeframe string using thetimeframe.from_seconds()function.
The script then requests the close price from that timeframe usingrequest.security()and plots it.
Additionally, we display the resulting timeframe string in atableon the chart’s top right corner:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How do I define a higher timeframe that is a multiple of the charttimeframe?,"This example script uses thetimeframe.in_seconds()andtimeframe.from_seconds()functions to calculate a higher timeframe that is a fixed multiple of the chart’s current timeframe. Using the input for the multiplier, the user can define the ratio between the chart’s
timeframe and the higher timeframe. The script then calculates theRelative Strength Index(RSI) for both the chart’s timeframe and the  higher timeframe, plotting both in a separate pane for comparison. We display the calculated higher timeframe string in atableon the main chart pane by usingforce_overlay:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How can I plot a moving average only when the chart’s timeframe is 1D orhigher?,"To plot a moving average on a chart only if it has a timeframe of daily (“1D”) or higher, scripts can use thetimeframe.in_seconds()function to convert the chart’s current timeframe into seconds. Since a day consists of 86400 seconds, any timeframe equal to or exceeding this value corresponds to a daily or longer duration.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
How can I plot a moving average only when the chart’s timeframe is 1D orhigher?,"The example script below calculates and plots aSimple Moving Average(SMA) of the closing prices over the last 200 bars.
The script uses aternary operatorto return the moving average on timeframes of 1D or greater, ornaif the timeframe is shorter than one day. Becauseplot()calls cannot be in a local scope, scripts cannot conditionally call this function. Passing annavalue as theseriesargument is an effective way to not plot anything. Note that plotting annavaluedoescount towards the script’splot limit.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"Therequest.security()function can access data from a differentcontext, such as a different symbol or timeframe. There are different considerations when accessing data from a timeframehigherorlowerthan the chart timeframe.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"First, let’s consider an example of plotting data from alowertimeframe. The following script plots a 21-periodExponential Moving Average(EMA) derived from the 1-hour (1H) timeframe on any chart, irrespective of the timeframe of that chart:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"Assuming that we run this script on a chart with a daily timeframe, we encounter the following problems:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"Unlikerequest.security(), therequest.security_lower_tf()function is intended for use on lower timeframes. It returns anarraycontaining data from all available intrabars within a chart bar. Seethis sectionof the User Manual to learn more.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"We could rewrite the script to userequest.security_lower_tf(), but plotting a moving average from a lower timeframe is still not very practical.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"A more logical approach is to plot MAs from ahighertimeframe. This strategy shows broader market trends within the context of shorter-term price movements. For example, plotting a daily MA on a 1H chart provides insights into how intraday prices are trending relative to the longer-term daily average.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What happens if I plot a moving average from the 1H timeframe on a differenttimeframe?,"In the following example script, we plot the 21 EMA calculated at the 1H timeframe, but only when the chart’s timeframe isequal to or lower than1H. We call therequest.security()functionin the recommended wayto avoid repainting.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Why do intraday price and volume values differ from values retrieved with `request.security()` at daily timeframes andhigher?,"Intradayopen,high,low,close, andvolume(OHLCV) values can be different from those fromrequest.security()at daily timeframes and higher for a number of reasons, including the following:",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Why do intraday price and volume values differ from values retrieved with `request.security()` at daily timeframes andhigher?,"For an extended list of factors with detailed explanations, refer to theData feedssection in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Why do intraday price and volume values differ from values retrieved with `request.security()` at daily timeframes andhigher?,Previous,https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
Why do intraday price and volume values differ from values retrieved with `request.security()` at daily timeframes andhigher?,Next,https://www.tradingview.com/pine-script-docs/faq/other-data-and-timeframes
What does “scope”mean?,Thescopeof a variable is the part of a script that defines the variable and in which it can be referenced. There are two main types of scope:globalandlocal.,https://www.tradingview.com/pine-script-docs/faq/programming
What does “scope”mean?,"Global Scope:The global scope is all of the script that is not inside afunction,if statement, or otherconditional structure. Code from anywhere in the script can access global variables. There is only one global scope.",https://www.tradingview.com/pine-script-docs/faq/programming
What does “scope”mean?,Local Scope:Code that is inside a function or in any local block (one that is inset by four spaces) defines a local scope. Only code that is in the same local scope can access a local variable. There can be many local scopes.,https://www.tradingview.com/pine-script-docs/faq/programming
What does “scope”mean?,The following example script gives an “Undeclared identifier” error when we try to access a local variable from the global scope.,https://www.tradingview.com/pine-script-docs/faq/programming
What does “scope”mean?,"To fix this error, we can declare the variable in the global scope, thus making it accessible from any scope in the script, and then conditionally modify it within a local block:",https://www.tradingview.com/pine-script-docs/faq/programming
What does “scope”mean?,"Similarly, the following script gives an “Undeclared identifier” error when we try to access a variable defined in one local scope from another local scope. In this case, local scope 1containslocal scope 2, but the same problem would be present if they were on the same level. When a scope contains another one, the inner scope can access variables declared in the outer one, but not vice versa.",https://www.tradingview.com/pine-script-docs/faq/programming
What does “scope”mean?,"For more information about scopes, see theCodesection of the User Manual.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I convert a script to a newer version of PineScript™?,See theMigration Guidessection of the User Manual for instructions about upgrading the version of Pine that a script uses.,https://www.tradingview.com/pine-script-docs/faq/programming
Can I access the source code of “Invite-Only” or “closed-source”scripts?,No; onlyopenscripts have their source code visible. The source code ofprotectedandInvite-Onlyscripts is hidden and can only be seen by the script author.,https://www.tradingview.com/pine-script-docs/faq/programming
Can I access the source code of “Invite-Only” or “closed-source”scripts?,"For a definition of theaccess typesof published scripts: open, protected, and Invite-Only, seethis articlein the Help Center.",https://www.tradingview.com/pine-script-docs/faq/programming
Can I access the source code of “Invite-Only” or “closed-source”scripts?,"For an explanation on thevisibility(public/private) that a script can have, see theVisibilitysection of the Publishing scripts page in the User Manual.",https://www.tradingview.com/pine-script-docs/faq/programming
Is Pine Script™ an object-orientedlanguage?,"Although Pine Script™ is not strictly an object-oriented programming language, it incorporates some object-oriented features, notablyuser-defined types(UDTs).
Scripts can createobjectsas instances of a UDT. These objects have one or more fields, which can store values of various data types.",https://www.tradingview.com/pine-script-docs/faq/programming
Is Pine Script™ an object-orientedlanguage?,Here is a simple example of how to use thetypekeyword to create an object:,https://www.tradingview.com/pine-script-docs/faq/programming
Is Pine Script™ an object-orientedlanguage?,"In this example, we create an objectnewPivot, which is an instance of the user-defined typepivot. The script then plots theyfield ofnewPivot.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I access the source code of built-inindicators?,There are two ways to access the source code of built-in indicators that are written in Pine:,https://www.tradingview.com/pine-script-docs/faq/programming
How can I access the source code of built-inindicators?,Create a new indicator,https://www.tradingview.com/pine-script-docs/faq/programming
How can I access the source code of built-inindicators?,"In the Pine Script™ Editor, click the “Open” menu and choose the “Built-in script” option. Select the built-in indicator that you want to work with.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I access the source code of built-inindicators?,Edit the code,https://www.tradingview.com/pine-script-docs/faq/programming
How can I access the source code of built-inindicators?,"With the indicator displayed on the chart, click on the curly braces{}next to the indicator name to open it in the Pine Editor.
To edit the code, click the option to create a working copy.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I access the source code of built-inindicators?,"Some built-in indicators, such as the Volume Profile or chart pattern indicators, are not written in Pine and so the code for these indicators is not accessible.
These indicators are not included in the “Built-in script” menu, and curly braces are not displayed next to their names on the chart.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I examine the value of a string in myscript?,"Scripts can print strings to Pine Logs on any or every bar, along with messages about the logic of the script at that point.
See thePine Logssection of the User Manual for information about logging.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I examine the value of a string in myscript?,Scripts can also display string in labels or label tooltips. The following example scripts displays a string in a label on the last bar of the chart using a custom function.,https://www.tradingview.com/pine-script-docs/faq/programming
How can I examine the value of a string in myscript?,"For more techniques, see thedebugging stringssection of the User Manual.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I visualize my script’sconditions?,"If a script contains complex logical conditions, it can be difficult to debug the output. Visualizing each condition separately can help to debug any problems.
See theCompound and nested conditionssection of the User Manual for an example.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I make the console appear in theeditor?,"To display the console in the editor, either press the keyboard shortcut Ctrl + ` (grave accent), or right-click within the editor and choose the “Toggle Console” option.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I plot numeric values so that they don’t affect the indicator’sscale?,Plotting numerical values on the main chart pane can distort the price scale if the values differ too much from the price.,https://www.tradingview.com/pine-script-docs/faq/programming
How can I plot numeric values so that they don’t affect the indicator’sscale?,"One way around this is not to plot the values on the chart, but use the Data Window to inspect them. Adddisplay = display.data_windowto theplot()call, and the values are visible in the Data Window for any single historical or realtime bar that the cursor hovers over.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I plot numeric values so that they don’t affect the indicator’sscale?,"Another option is to set the script to display in a separate pane by usingoverlay = falsein theindicator()declaration. The user needs to delete and re-add the script to the chart if this parameter is changed. Plot the numeric values to track in the separate pane, and draw the rest of the script visuals on the main chart pane by using theforce_overlayparameter.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I plot numeric values so that they don’t affect the indicator’sscale?,"Additionally, right-clicking on the scale on the chart brings out the dropdown menu. The “Scale Price Chart Only” option there makes it so the Auto mode of the chart scale only takes the chart itself into account, without adjusting for plots or other graphics of all indicators that overlay that chart.",https://www.tradingview.com/pine-script-docs/faq/programming
How can I plot numeric values so that they don’t affect the indicator’sscale?,Previous,https://www.tradingview.com/pine-script-docs/faq/programming
How can I plot numeric values so that they don’t affect the indicator’sscale?,Next,https://www.tradingview.com/pine-script-docs/faq/programming
How can I place text on thechart?,Scripts can display text using the following methods:,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Plottingtext,Theplotchar()andplotshape()functions can display fixed text on bars:,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Plottingtext,"Plots appears on the bar where the script calls the function, by default, but scripts can offset a plot by a dynamic number of bars to the left or right. On the Y axis, the plots appear above/below the bar, at the top/bottom of the chart, or at an arbitrary price level. Scripts can call aplotchar()orplotshape()function on any number of bars and it counts as a single plot towards theplot limit.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Plottingtext,"When using these functions, the text cannot change during the execution of the script. Thetextparameter accepts an argument of type “const string”, which means it cannot cannot change from bar to bar and cannot be supplied by an input.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Plottingtext,"This script, for example, does not compile, because the argument to thetextparameter is a “series string”:",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Plottingtext,"To print different text depending on a logical condition, use two function calls and control them using theseriesparameter. Note that even if theseriesfor one or both of the function calls is never true during a script’s execution, and so no shape, character or text is ever plotted,bothfunctions still count towards theplot limit.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Plottingtext,"The following script corrects the earlier example, and shows the use of bothplotchar()andplotshape()to display text:",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Labels,"Labelsare particularly useful for displaying text that can change from one bar to another. Thetextparameter of thelabel.newfunction takes a “series string”, so it can change whenever necessary.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Labels,"Labels do not count towards theplot limit, but there is a separate limit of how many labels can display on the chart. By default, up to approximately 50 of themost recentlabels appear on the chart. Programmers can adjust this limit up to 500 by setting themax_labels_countparameter in theindicator()orstrategy()functions.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Labels,"The parameters to thelabel.newfunction for text, color, etc., take “series” arguments. This makes labels much more flexible than plots.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Labels,"The following example script displays the same information as the previous script, but using labels. The background to the labels is transparent (set tona) in this example, to more closely match the style of the previous scripts.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Labels,"As well as showing historical information, labels can also be used to show only the latest information on the current bar. The following example script displays the value of RSI in a different color depending on whether it is above or below 50, for the most recent bar only. This is not possible usingplotchar()orplotshape(), because the text is fixed, and too many plots would be required to plot every value separately.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Labels,Note that:,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Boxes,"Boxescan also display text on the chart, by providing the text to thetextparameter of thebox.new()function. Boxes work with text in a similar way to labels, but with some additional features.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Boxes,Labels exist specifically to display text — and so the label adjusts to the size of the text. Labels always resize so that all of the text is visible inside of the label.,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Boxes,"The main use of boxes is to display the drawing itself. A box attaches to specific points on the chart, and its text might or might not fit into it. To ensure that the text displays in the best possible way, boxes provide some additional features that can not be used in labels: text wrapping and text alignment.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Boxes,"Text contained in the box can automatically wrap if it reaches the border of the box, if thetext_wrapparameter is set totext.wrap_auto. Additionally, scripts can align the text inside the box along the vertical and horizontal axes. Using thetext_halignandtext_valignparameters ofbox.new(), text can display at one of the nine possible positions inside of the box.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Boxes,"In the example below, we draw a box that spans the last 50 historical bars on the chart, and a label. We add long text to both. Withtext_wrap = text.wrap_auto, the text inside the box automatically wraps to fit the box itself, while the text inside of the label stays unchanged:",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Boxes,,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Tables,"Tablesare useful to display information in a fixed position on the chart. Whereas plots and labels can easily show historical information because they are, or can be, linked to specific bars, table contents do not change as users move the cursor over past chart bars. This makes tables best suited for showingcurrentinformation.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Tables,"The following example script displays the value of RSI in a different color depending on whether it is above or below 50, for the most recent bar only.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
Tables,Note that:,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I position text on either side of a singlebar?,"Scripts can position a label to therightof a bar by usingstyle = label.style_label_left. This stylepointsthe label to therightandplacesit to theleft. Likewise, a label withstyle = label.style_label_rightdisplays to the right of the bar, pointing left.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I position text on either side of a singlebar?,"To manage the alignment of the text within the label, use thetextalignparameter.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I position text on either side of a singlebar?,"The following example script draws three labels on the chart’s last bar, with differentstyleandtextalignvalues. User inputs control whether individual labels appear, and the central label is off by default for readability. If the input to hide the background is enabled, the color is set tonaso that it does not appear. Note that the proper way to do this is to cast it to a color by usingcolor(na).",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I position text on either side of a singlebar?,,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I stack plotshape()text?,"To make multiple text plots visible on the same bar, the text on one plot must be raised or lowered so that it does not overlap with another plot.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I stack plotshape()text?,"To add a blank line in aplotchar()orplotshape()call, add the newline character\nand the non-printable special character U+200E. This Unicode character, also known as the “Left-to-Right Mark”, is a “Zero Width Space” used to control the directionality of text display, without adding any actual
space or visible content. The Pine Editor represents this character as [U+200E] highlighted in red. Typing[U+200E]does not render the special character; it needs to be copied from a Unicode generator, from the script below, or from here:‎",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I stack plotshape()text?,The following example script shows how to insert a blank line over or under other text:,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I stack plotshape()text?,,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I print a value at the top right of thechart?,"To print a value at the top right of the chart, refer tothisexample in the User Manual, which uses atablefor this purpose.",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I split a string intocharacters?,"Thestr.split()function splits a string into parts and stores the parts in an array.
To split a string into individual characters, use an empty string""""as theseparatorargument. Here is a code example:",https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I split a string intocharacters?,Previous,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I split a string intocharacters?,Next,https://www.tradingview.com/pine-script-docs/faq/strings-and-formatting
How can I prevent the “Bar index value of the `x` argument is too far from the current bar index. Try using `time` instead” and “Objects positioned using xloc.bar_index cannot be drawn further than X bars into the future”errors?,"Both these errors occur when creating objects too distant from the current bar. An x point on aline,label, orboxcan not be more than 9999 bars in the past or more than 500 bars in the future relative to the bar on which the script draws it.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I prevent the “Bar index value of the `x` argument is too far from the current bar index. Try using `time` instead” and “Objects positioned using xloc.bar_index cannot be drawn further than X bars into the future”errors?,"Scriptscandraw objects beyond these limits, however, usingxloc.bar_timeinstead of thexlocparameter, andtimeas an alternative tobar_indexfor thexarguments.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I prevent the “Bar index value of the `x` argument is too far from the current bar index. Try using `time` instead” and “Objects positioned using xloc.bar_index cannot be drawn further than X bars into the future”errors?,"Note that, by default, all drawings usexloc.bar_index, which means that the values passed to theirx-coordinates are treated as if they are bar indices. If drawings use atime-based value without specifyingxloc = xloc.bar_time, the timestamp — which is usually anintvalue of trillions of milliseconds — is treated as an index of a bar in the future, and inevitably exceeds the 500 future bars limit. To usetime-based values for drawings, always specifyxloc.bar_time.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I update the right side of all lines orboxes?,Scripts can update thex2value of all lines or boxes by storing them in an array and using afor…inloop to iterate over each object. Update thex2value using theline.set_x2()orbox.set_right()functions.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I update the right side of all lines orboxes?,"In the example below, we create a custom array and go over it to extend lines with each new bar:",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I update the right side of all lines orboxes?,"As an alternative to adding new drawings to a custom array, scripts can use the appropriate built-in variable that collects all instances of a drawing type. These arrays use the<drawingNamespace>.allnaming scheme: for example, scritps can access all drawn labels by referring tolabel.all, all polylines withpolyline.all, etc. Scripts can iterate over these arrays in the same way as with custom arrays.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I update the right side of all lines orboxes?,This example implements gets the same result using theline.allbuilt-in array instead:,https://www.tradingview.com/pine-script-docs/faq/techniques
How to avoid repainting when not using the `request.security()`function?,Scripts can give deceptive output if theyrepaintby behaving differently on historical and elapsed realtime bars. This type of repainting is most commonly caused by requesting data from another context using therequest.security()function.,https://www.tradingview.com/pine-script-docs/faq/techniques
How to avoid repainting when not using the `request.security()`function?,"Scripts can also change their output during a realtime bar, as thevolume,close,high, andlowvalues change. This form of repainting is not normally deceptive or detrimental.",https://www.tradingview.com/pine-script-docs/faq/techniques
How to avoid repainting when not using the `request.security()`function?,"To avoid this kind of repainting and ensure that outputs do not change during a bar, consider the following options:",https://www.tradingview.com/pine-script-docs/faq/techniques
How to avoid repainting when not using the `request.security()`function?,"For further exploration of these methods, see the PineCoders publication“How to avoid repainting when NOT using security()“.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I trigger a condition n bars after it lastoccurred?,"Using theta.barssince()function, scripts can implement a condition when a certain number of bars have elapsed since the last occurrence of that condition.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I trigger a condition n bars after it lastoccurred?,"The following example script uses thecondcondition to plot a blue star when theclosevalue is greater than theopenvalue for two consecutive bars. Then, thetriggervariable is true only if thecondcondition is already trueandthe number of bars elapsed sincecondwas last true is greater thanlengthInput. The script plots a red “O” on the chart, overlaying the blue star, each time these conditions are met. The Data Window displays the count sincecondwas last true.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I trigger a condition n bars after it lastoccurred?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can my script identify what chart type isactive?,Various booleanbuilt-invariables within thechart.*namespace enable a script to detect the type of chart it is running on.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can my script identify what chart type isactive?,"The following example script defines a function,chartTypeToString(), which uses thechart.*built-ins to identify the chart type and convert this information into
a string. It then displays the detected chart type in a table on the chart.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,"To plot the highesthighand lowestlowwithin the range of visible bars, a script can use thechart.left_visible_bar_timeandchart.right_visible_bar_timebuilt-ins. These variables allow the script to identify the times of the earliest and latest visible bars on the chart and calculate the maximum or minimum values within that range.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,"TheVisibleChartlibrary byPineCodersoffers such functionality with itshigh()andlow()functions, which dynamically calculate the highest and lowest values of the currently visible bars.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,"The following example script uses functions from this library to create two horizontallineson the chart, signifying the highest and lowest price points within the range of visible bars. The script drawslabelsfor these lines, displaying both the price and the corresponding timestamp for each high and low point. As the chart is manipulated through scrolling or zooming, these lines and labels dynamically update to reflect the highest and lowest values of the newly visible bars:",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,Note that:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,"Notice!Scripts that usechart.left_visible_bar_timeorchart.right_visible_bar_timerecalculate on all bars each time the user scrolls or zooms the chart. To minimize the time taken to recalculate, keep calculations to a minimum and use efficient code.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the highest and lowest visible candlevalues?,"For more information, refer to theVisibleChartlibrary’s documentation.",https://www.tradingview.com/pine-script-docs/faq/techniques
How to remember the last time a conditionoccurred?,Scripts can store the number of bars between the current bar and a bar on which a condition occurred in various ways:,https://www.tradingview.com/pine-script-docs/faq/techniques
How to remember the last time a conditionoccurred?,"Programmers can then use the number of bars with thehistory-referencing operator []to retrieve the value of a variable, such as theclose, on that bar.",https://www.tradingview.com/pine-script-docs/faq/techniques
How to remember the last time a conditionoccurred?,"Alternatively, if the script needsonlythe value itself and not the number of bars, simply save the value each time the condition occurs. This method is more efficient because it avoids referencing the series multiple times throughout its history. This method also reduces the risk of runtime errors in scripts if the size of the historical reference istoo large.",https://www.tradingview.com/pine-script-docs/faq/techniques
How to remember the last time a conditionoccurred?,Here’s a script that demonstrates these methods:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I plot the previous and current day’sopen?,There are several methods for plotting prices from a higher timeframe (we assume that these scripts are to be run on intraday timeframes).,https://www.tradingview.com/pine-script-docs/faq/techniques
Using`timeframe.change()`,"Thetimeframe.change()function identifies when a bar in a specified timeframe opens. When a new daily bar opens, the following example script first copies the existing daily opening value to the variable for the previous day, and then updates the opening price for the current day.",https://www.tradingview.com/pine-script-docs/faq/techniques
Using`timeframe.change()`,Note that:,https://www.tradingview.com/pine-script-docs/faq/techniques
Using`request.security()`,"To match the values on the chart with the values on higher timeframe charts, it’s necessary to access the higher timeframe data feeds. Scripts can achieve this by using therequest.security()function.",https://www.tradingview.com/pine-script-docs/faq/techniques
Using`request.security()`,"The following example script requests two data feeds from a higher timeframe. To reduce the risk ofrepainting, we use only confirmed values for historical bars. The script plots confirmed values retroactively on each preceding day when a new day begins. For the real-time bar of the higher timeframe, which represents the current day, we draw a separate set of lines. The realtime lines can change during the day. While this type of repainting is not apparent here when using the opening price, which does not change after the bar opens, it is more obvious for scripts that use the closing price, which takes the current price until the bar closes.",https://www.tradingview.com/pine-script-docs/faq/techniques
Using`timeframe`,"Instead of writing custom logic to retrieve or calculate prices for a particular timeframe, programmers can run the entire script in that timeframe.",https://www.tradingview.com/pine-script-docs/faq/techniques
Using`timeframe`,"If scripts include thetimeframeparameter in theindicatordeclaration, the user can choose the timeframe in which the script runs. The script can set a default timeframe.",https://www.tradingview.com/pine-script-docs/faq/techniques
Using`timeframe`,"By default, the following script plots the current and previous day’s opening prices, similar to the previous examples. It is much simpler, but behaves quite differently. For historical bars, the script returns values when the day closes, effectively one day “late”. For realtime and elapsed realtime bars, the script returns live values, if the option “Wait for timeframe closes” is not selected in the script settings.",https://www.tradingview.com/pine-script-docs/faq/techniques
Using`timeframe`,Note that:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count the occurrences of a condition in the last xbars?,"One obvious method is to use aforloop to retrospectively review each of the last x bars and check for the condition.
However, this method is inefficient, because it examines all bars in rangeagainon every bar, even though it already examined all but the last bar.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count the occurrences of a condition in the last xbars?,"In general, using unnecessary, large, or nestedforloops can result in slower processing and longer chart loading times.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count the occurrences of a condition in the last xbars?,"The simplest and most efficient method is to use the built-inmath.sum()function, and pass it a conditional series to count. This function maintains a running total of the count as each bar is processed, and can take asimpleorserieslength.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count the occurrences of a condition in the last xbars?,"The following example script uses both of these calculation methods. It also uses a series length that adjusts for the first part of the chart, where the number of bars available is less than the length. This way, the functions do not returnnavalues.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count the occurrences of a condition in the last xbars?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I implement an on/offswitch?,"An on/off switch is a persistent state that can be turned on once, and persists across bars until it is turned off. Scripts can use thevarkeyword to initialize a variable only once, and maintain its most recent value across subsequent bars unless it is reassigned. Such persistent states can be boolean values, or integers, or any other type.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I implement an on/offswitch?,The following example script show how to implement this. Each instance of the on and off triggers displays with an arrow and the word “On” or “Off”. A green background highlights the bars where the switch is in the “On” state.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I implement an on/offswitch?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I alternateconditions?,"Scripts can alternate from one state to another strictly, even when the triggers to change state do not occur in strict order. This can be useful to mark only the first trigger and not any subsequent triggers, or to prevent multiple alerts.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I alternateconditions?,"The following example script plots all pivots, defined by Williams fractals. These pivots can occur in any order. The script stores the type of the most recent pivot, and confirms the next pivotonlyif it is of the opposite type, such that confirmed pivots appear strictly high-low-high or low-high-low, etc. Confirmed pivots are plotted in a larger size and different color. The chart background color is colored according to the type of the most recent confirmed pivot.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I alternateconditions?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I alternateconditions?,Note that:,https://www.tradingview.com/pine-script-docs/faq/techniques
Can I merge two or more indicators intoone?,"It is possible to combine indicators, paying attention to the following points:",https://www.tradingview.com/pine-script-docs/faq/techniques
Can I merge two or more indicators intoone?,"Notice!If the individual indicators are computationally intensive or contain a large number of local scopes, variables, or plots, the combined indicator might encounter problems with one or more of thescript limitations.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I rescale an indicator from one scale toanother?,"Rescaling an indicator from one scale to another means trying to ensure that the values display within a similar range to other values, from the same indicator or from the chart.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I rescale an indicator from one scale toanother?,"For example, consider a script that displays volume typically measuring in the millions of units, and also RSI, which ranges from zero to one hundred. If the script displays these values in the same pane, the volume is visible but the RSI will be so small as to be unreadable.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I rescale an indicator from one scale toanother?,"Where values are dissimilar like this, they must berescaledornormalized:",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I rescale an indicator from one scale toanother?,"The example script below uses arescale()function to rescale RSI values, and anormalize()function to normalizeCommodity Channel Index (CCI)andvolumevalues. Although normalizing is an imperfect solution, it is more complete than usingta.lowest()andta.highest(), because it uses the minimum and maximum values for the complete set of elapsed bars instead of a subset of fixed length.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I rescale an indicator from one scale toanother?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I calculate my script’s runtime?,Programmers can measure the time that a script takes to run and see detailed information about which parts of the code take longest in the Pine Profiler. See the section of the User Manual onProfiling and optimizationfor more information.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I save a value when an eventoccurs?,"To save a value when an event occurs, use apersistent variable. Scripts declare persistent variables by using thevarkeyword. Such variables are initialized only once, atbar_indexzero, instead of on each bar, and maintain the same value after that unless changed.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I save a value when an eventoccurs?,"In the following example script, thevarkeyword allows thepriceAtCrossvariable to maintain its value between bars until a crossover event occurs, when the script updates the variable with the current close price. The:=reassignment operator ensures that the global variablepriceAtCrossis modified. Using the=assignment operator instead would create a new local variable that is inaccessible outside theifblock. The new local variable would have the same name as the global variable, which is calledshadowing. The compiler warns about shadow variables.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count touches of a specificlevel?,The most efficient way to count touches of a specific level is by tracking the series on each bar. A robust approach requires maintaining separate tallies for up and down bar touches and taking into account any gaps across the level. Using loops instead would be inefficient and impractical in this case.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count touches of a specificlevel?,"The following example script records a value of 1 in a series whenever a touch occurs, and uses themath.sum()function to count these instances within the lasttouchesLengthInputbars. This script displays the median and touches on the chart using theforce_overlayparameter of theplot*()functions, and displays the count in a separate pane.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I count touches of a specificlevel?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I know if something is happening for the first time since the beginning of theday?,"One way is to use theta.barssince()function to check if the number of bars since the last occurrence of a condition, plus one, is greater than the number of bars since the beginning of the new day.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I know if something is happening for the first time since the beginning of theday?,"Another method is to use apersistent stateto decide whether aneventcan happen. When the timeframe changes to a new day, the state is reset to allow the event. If the condition occurs while the state allows it, an event triggers. When the event triggers, the state is set so so as not to allow the event.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I know if something is happening for the first time since the beginning of theday?,The following example script shows both methods.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I know if something is happening for the first time since the beginning of theday?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I optimize Pine Script™code?,"Optimizing Pine Script™ code can make scripts run faster and use less memory. For large or complex scripts, optimization can avoid scripts reaching thecomputational limits.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I optimize Pine Script™code?,"ThePine Profileranalyzes all significant code in a script and displays how long each line or block takes to run. Before optimizing code, run the Pine Profiler to identify which parts of the code to optimize first. The Pine Profiler section of the User Guide contains an extensive discussion ofhow to optimize code. In addition, consider the following tips:",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I access a stock’s financialinformation?,"In Pine, therequest.financial()function can directly request financial data.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I access a stock’s financialinformation?,"On the chart, users can open financial indicators in the “Financials” section of the “Indicators, Metrics & Strategies” window.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I find the maximum value in a set ofevents?,"Finding the maximum value of a variable that has a meaningful valueon every bar, such as thehighorlowin price, is simple, using theta.highest()function.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I find the maximum value in a set ofevents?,"However, if the values do not occur on every bar, we must instead store each value when it occurs and then find the maximum. The most flexible way to do this is by using anarray.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I find the maximum value in a set ofevents?,"The following example script stores pivot highs in a fixed-length array. The array is managed as aqueue: the script adds new pivots to the end, and removes the oldest element from the array. To identify the highest value among the stored pivots, we use thearray.max()function and plot this maximum value on the chart. Additionally, we place markers on the chart to indicate when the pivots are detected, and the bars where the pivots occurred. By definition, these points are not the same, because a pivot is only confirmed after a certain number of bars have elapsed.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I display plot values in the chart’sscale?,"To display the names and values of plots from an indicator in the chart’s scale, right-click on the chart to open the chart “Settings” menu. In the “Scales and lines” tab, select “Name” and “Value” from the “Indicators and financials” drop-down menu.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I display plot values in the chart’sscale?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I reset a sum on acondition?,"To sum a series of values, initialize a persistent variable by using thevarkeyword to the track the sum. Then use a logical test to reset the values when a condition occurs.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I reset a sum on acondition?,"In the following example script, we initialize a persistent variable calledcumulativeVolumeto track the sum of thevolume. Then we reset it to zero on a Moving Average Convergence/Divergence (MACD) cross up or down.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I reset a sum on acondition?,"We plot the cumulativevolumeon the chart, as well as arrows to show the MACD crosses.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I reset a sum on acondition?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I reset a sum on acondition?,Note that:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I accumulate a value for two exclusivestates?,"Consider a simple indicator defined by two exclusive states:buyandsell. The indicator cannot be in bothbuyandsellstates simultaneously. In thebuystate, the script accumulates thevolumeof shares being traded. In thesellstate, the accumulation of volume begins again from zero.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I accumulate a value for two exclusivestates?,There are different ways to code this kind of logic. See the FAQ entry“How can I alternate conditions”for an example of using anenumto manage two exclusive states. The following example script uses two boolean variables to do the same thing.,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I accumulate a value for two exclusivestates?,"Additionally, this script demonstrates the concept ofeventsandstates. An event is a condition that occurs on one or more arbitrary bars. A state is a condition that persists over time. Typically, programmers use events to turn states on and off. In turn, states can allow or prevent other processing.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I accumulate a value for two exclusivestates?,"The script plots arrows for events, which are based on rising or falling values of thecloseprice. These events determine which of the two exclusive states is active; the script colors the background according to the current state. The script accumulates bullish and bearish volume only in the corresponding bullish or bearish state, displaying it in a Weis Wave fashion.",https://www.tradingview.com/pine-script-docs/faq/techniques
How can I accumulate a value for two exclusivestates?,,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I accumulate a value for two exclusivestates?,Note that:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I organize my script’s inputs in the Settings/Inputstab?,A script’s plots and inputs constitute its user interface. The following example script uses the following techniques to organize inputs for greater clarity:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I organize my script’s inputs in the Settings/Inputstab?,Tips:,https://www.tradingview.com/pine-script-docs/faq/techniques
How can I organize my script’s inputs in the Settings/Inputstab?,Previous,https://www.tradingview.com/pine-script-docs/faq/techniques
The if statement is toolong,"This error occurs when the indented code inside anif
statementis too large for the compiler. Because of how the compiler works, you
won’t receive a message telling you exactly how many lines of code you
are over the limit. The only solution now is to break up yourif
statementinto smaller parts (functions or smallerif
statements).
The example below shows a reasonably lengthyif
statement;
theoretically, this would throwline 4: if statement is too long:",https://www.tradingview.com/pine-script-docs/error-messages
The if statement is toolong,"To fix this code, you could move these lines into their own function:",https://www.tradingview.com/pine-script-docs/error-messages
Script requesting too manysecurities,"The maximum number of securities in script is limited to 40. If you
declare a variable as arequest.securityfunction call and then use
that variable as input for other variables and calculations, it will not
result in multiplerequest.securitycalls. But if you will declare a
function that callsrequest.security--- every call to this function
will count as arequest.securitycall.",https://www.tradingview.com/pine-script-docs/error-messages
Script requesting too manysecurities,"It is not easy to say how many securities will be called looking at the
source code. Following example have exactly 3 calls torequest.securityafter compilation:",https://www.tradingview.com/pine-script-docs/error-messages
Script could not be translated from:null,"Usually this error occurs in version 1 Pine scripts, and means that code
is incorrect. Pine Script™ of version 2 (and higher) is better at
explaining errors of this kind. So you can try to switch to version 2 by
adding aspecial attributein the first line. You’ll getline 2: no viable alternative at character '$':",https://www.tradingview.com/pine-script-docs/error-messages
line 2: no viable alternative at character’$’,"This error message gives a hint on what is wrong.$stands in place of
string with script title. For example:",https://www.tradingview.com/pine-script-docs/error-messages
Mismatched input <…> expecting <???>,"Same asno viable alternative, but it is known what should be at that
place. Example:",https://www.tradingview.com/pine-script-docs/error-messages
Mismatched input <…> expecting <???>,line 3: mismatched input 'plot' expecting 'end of line without line continuation',https://www.tradingview.com/pine-script-docs/error-messages
Mismatched input <…> expecting <???>,"To fix this you should start line withploton a new line without an
indent:",https://www.tradingview.com/pine-script-docs/error-messages
Loop is too long (> 500ms),"We limit the computation time of loop on every historical bar and
realtime tick to protect our servers from infinite or very long loops.
This limit also fail-fast indicators that will take too long to compute.
For example, if you’ll have 5000 bars, and indicator takes 500
milliseconds to compute on each of bars, it would have result in more
than 16 minutes of loading:",https://www.tradingview.com/pine-script-docs/error-messages
Loop is too long (> 500ms),"It might be possible to optimize algorithm to overcome this error. In
this case, algorithm may be optimized like this:",https://www.tradingview.com/pine-script-docs/error-messages
Script has too many localvariables,"This error appears if the script is too large to be compiled. A
statementvar=expressioncreates a local variable forvar. Apart
from this, it is important to note, that auxiliary variables can be
implicitly created during the process of a script compilation. The limit
applies to variables created both explicitly and implicitly. The
limitation of 1000 variables is applied to each function individually.
In fact, the code placed in aglobalscope of a script also implicitly
wrapped up into the main function and the limit of 1000 variables
becomes applicable to it. There are few refactorings you can try to
avoid this issue:",https://www.tradingview.com/pine-script-docs/error-messages
Script has too many localvariables,can be converted into:,https://www.tradingview.com/pine-script-docs/error-messages
Pine Script™ cannot determine the referencing length of a series. Try using max_bars_back in the indicator or strategyfunction,"The error appears in cases where Pine Script™ wrongly autodetects the
required maximum length of series used in a script. This happens when a
script’s flow of execution does not allow Pine Script™ to inspect the
use of series in branches of conditional statements (if,iffor?), and Pine Script™ cannot automatically detect how far back the
series is referenced. Here is an example of a script causing this
problem:",https://www.tradingview.com/pine-script-docs/error-messages
Pine Script™ cannot determine the referencing length of a series. Try using max_bars_back in the indicator or strategyfunction,"In order to help Pine Script™ with detection, you should add themax_bars_backparameter to the script’sindicatororstrategyfunction:",https://www.tradingview.com/pine-script-docs/error-messages
Pine Script™ cannot determine the referencing length of a series. Try using max_bars_back in the indicator or strategyfunction,"You may also resolve the issue by taking the problematic expression out
of the conditional branch, in which case themax_bars_backparameter
is not required:",https://www.tradingview.com/pine-script-docs/error-messages
Pine Script™ cannot determine the referencing length of a series. Try using max_bars_back in the indicator or strategyfunction,"In cases where the problem is caused by avariablerather than a
built-infunction(vwmain our example), you may use themax_bars_backfunction to explicitly define the referencing length for
that variable only. This has the advantage of requiring less runtime
resources, but entails that you identify the problematic variable, e.g.,
variablesin the following example:",https://www.tradingview.com/pine-script-docs/error-messages
Pine Script™ cannot determine the referencing length of a series. Try using max_bars_back in the indicator or strategyfunction,"This situation can be resolved using themax_bars_backfunctionto
define the referencing length of variablesonly, rather than for all
the script’s variables:",https://www.tradingview.com/pine-script-docs/error-messages
Pine Script™ cannot determine the referencing length of a series. Try using max_bars_back in the indicator or strategyfunction,"When using drawings that refer to previous bars throughbar_index[n]andxloc = xloc.bar_index, the time series received from this bar will
be used to position the drawings on the time axis. Therefore, if it is
impossible to determine the correct size of the buffer, this error may
occur. To avoid this, you need to usemax_bars_back(time, n). This
behavior is described in more detail in the section aboutdrawings.",https://www.tradingview.com/pine-script-docs/error-messages
Memory limits exceeded. The study allocates X times more thanallowed,"The most common cause for this error is returningobjectsandcollectionsfromrequest.*()functions. Other possible causes include unnecessary drawing updates, excess historical buffer capacity, or inefficient use ofmax_bars_back.",https://www.tradingview.com/pine-script-docs/error-messages
Returning collections fromrequest.*()functions,A common source of the “Memory limits exceeded” error is returningobjectsorcollectionsfrom another chart symbol or timeframe usingrequest.*()functions.,https://www.tradingview.com/pine-script-docs/error-messages
Returning collections fromrequest.*()functions,"When requesting data from other contexts, the data foreach baris copied and stored in memory to allow the script to reference it later in the main context. This can use a lot of memory, depending on the data. Requesting large collections can easily lead to excessive memory consumption.",https://www.tradingview.com/pine-script-docs/error-messages
Returning collections fromrequest.*()functions,"Let’s look at an example script where werequestdata to calculate thebalance of power (BOP)for the symbol at a higher timeframe. Here, therequest expressionis acustom functionthat populates apersistent arraywith our calculated BOP values, returning thefull arrayto the main context oneachbar. We intend to use these stored array values to calculate and plot theaverageBOP in the main context. However, returning every array instance consumes a lot of memory, and so this script can throw a memory error on charts with a sufficiently long history:",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,Optimize requests and limit the data returned to the main context to ensure that only theminimum necessarydata is stored in memory.,https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,"If possible, try to returncalculated resultsdirectly rather than returning the collections themselves, or only return collectionsconditionally, when they are necessary in the main context.",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,Let’s consider a few common scenarios where scripts need specific data in the main context.,https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,If a script needs only thelast stateof a requested collection in the main context: use anifbarstate.islastcondition to return a copy of thelast bar’s collectiononly.,https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,"Here, we modified our script to display only thelatestaverage BOP (a single value), rather than plotting an average line. The updated request function now returns the calculated BOP values directly for each bar, and returns the higher timeframe’s array only on the last bar:",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,,https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,"If a script needs theresultof a calculation on a collection, but does not need the collection itself in the main context, use auser-defined functionas the request expression. The function can calculate on the collection in therequestedcontext and return only the result to the main context.",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,"For example, we can calculate the average BOP directly within our request function. Therefore, only the calculated values are stored in memory, and the request expression returns a tuple (current BOP and average BOP) to plot the results in the main context:",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,,https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,"If a script needs thecollection itselfin the main context, butnot forevery bar, useconditional expressionsto return only the necessary collections to the main context, returningnaotherwise. The logic in the main context can then address thenagaps in the series and perform its desired actions on the reduced collections.",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,"For example, if we want to calculate the average BOP across eachmonthinstead of using a user-input length, we can return the array from the requested context only when there is a change to a new month, returningnaotherwise. We then maintain the previous month’s values in the main context to keep a valid array for all intra-month bars:",https://www.tradingview.com/pine-script-docs/error-messages
How do I fixthis?,,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,There are a few other ways to optimize scripts to consume less memory.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Therequest.*()function calls can be computationally expensive, because they retrieve data from other contexts, which can often require significant resource usage. Excessive or inefficient requests can easily cause scripts to reach the memory limit.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"This memory consumption is especially substantial for scripts requesting data fromlower timeframes, where the request function returns anarrayof multiple lower timeframe bars foreachmain context bar. For example, requesting “1” data on a “1D” chart returns hundreds of “1” bars for each “1D” bar that executes the request. In the process, the script must allocate memory to store all the requested data arrays so that it can access them later in the main context, which quickly increases the memory consumption.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Programmers can reduce the number of requested expressions by:,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Seethis sectionin the User Manual for more information on optimizingrequest.*()calls.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Themax_bars_backparameter of anindicatororstrategysets the size of thehistory bufferfor all series variables in a script. The history buffer determines the number of historical referencesstored in memoryfor the script’s built-in and user-defined variables.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"By default, the Pine Script™ runtime automatically allocates an appropriate buffer for each variable. Therefore, themax_bars_backparameter andfunctionare only necessary when Pinecannot determine the referencing length of a series.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"If you encounter this referencing length error, ensure that you set themax_bars_backvalue appropriately to your script’s needs. Setting a value that’s too large can lead to excessive memory consumption, as it stores unnecessary historical data that the script ultimately doesn’t use. Read up on how to optimize usingmax_bars_backin our Help Center.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,The Pine Script™ runtime automatically creates historical buffers for all variables and function calls in a script. It determines the size of a buffer based on thehistorical referencesneeded in the code (the references made using the[]history-referencing operator).,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"As the script runs across the dataset, referencing distant points in bar history can cause the script to restart its execution on previous bars to adjust its historical buffer size (see thisUser Manual articleto learn more). Larger buffers in turn lead to an increase in memory consumption and can result in a runtime error. Ensure that scripts are referencingnecessaryhistorical values only, and avoid referencing very distant points in history when possible.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"You can use theindicator()function’scalc_bars_countparameter or themax_bars_back()function tomanually restrictthe historical data capacity on a script-wide or variable-specific scale. However, be aware that these methods can also cause memory consumption issues of their own if used improperly.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Tablesonly display theirlast stateon a chart. Any updates to a table on historical bars are redundant, because they are not visible. To use the least memory, draw the tableonce, and fill it on the last bar.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Use thevarkeyword to declare table objects once. Enclose all other setter function calls in a conditionalifbarstate.islastblock for better performance. For more about tables, see thisUser Manual article.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Similar to tables, any updates to drawing objects such aslinesandlabelsthat are made on historical bars are never seen by the user. The user only sees updates onrealtimebars.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Eliminate updates to historical drawings during historical bars wherever possible. For more information, seethis User Manual section.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Drawing objectssuch aslinesandlabelscan consume a lot of memory, especially if a scriptrecreatesdrawings unnecessarily.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"For example, if a script draws a line from pointx1tox2, then needs to update the line’s endpoint (x2), it’s more computationally expensive to delete the existing line and redraw a new line fromx1tox3. Instead, using thesetterfunctionline.set_x2()to update the existing line’s endpoint is more efficient.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Look for ways to optimize drawing objects in a script:,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Reduce the number of redrawn objects by initializing drawing objectidentifiersand using their setter functions to modify properties.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"Remove unnecessary chart drawings using thedelete()functions (e.g.,line.delete()andlabel.delete()).",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Reduce an indicator’s maximum drawings limit using themax_lines_countormax_labels_countparameters.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,"The total number of trades or orders in astrategycan impact the memory consumption of a script. For large datasets, reduce the number of unnecessary historical orders stored in memory by limiting thestarting pointof your strategy.",https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,You can filter the strategy’s date by adding aconditional expressionthat compares the bar time to a specified timestamp to only place entry/exit orders beyond a certain date.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,See an example of date filtering in strategieshere.,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Previous,https://www.tradingview.com/pine-script-docs/error-messages
Other possible error sources and theirfixes,Next,https://www.tradingview.com/pine-script-docs/error-messages
Releasenotes,This page contains release notes describing notable changes to the Pine Script™ experience.,https://www.tradingview.com/pine-script-docs/release-notes
December2024,"Thestrategy.exit()function has updated calculation behaviors. Previously, calls to this command with arguments for the absolute and relative parameters defining a price level for the same exit order always prioritized theabsoluteparameter andignoredthe relative one. For example, a call with specifiedlimitandprofitvalues always ignored theprofitvalue. Now, the command evaluatesbothrelated parameters and uses the level that the market price is expected toactivate first. Seethis sectionof thev6 migration guidefor more information.",https://www.tradingview.com/pine-script-docs/release-notes
November2024,"Pine Script™ has graduated to v6! Starting today, future Pine updates will apply exclusively to this version. Therefore, we recommend converting existing v5 scripts to access new features as we roll them out. See ourmigration guideto understand the changes to existing Pine behaviors and learn how to convert scripts to v6.",https://www.tradingview.com/pine-script-docs/release-notes
November2024,Several new features and behaviors come with this version’s release:,https://www.tradingview.com/pine-script-docs/release-notes
October2024,"We’ve added an optionalbehind_chartparameter to theindicator()andstrategy()functions. This parameter specifies where plots and drawings appear relative to the main chart display when theoverlayparameter istrue. Ifbehind_chartistrue, the script’s visuals appear behind the chart display. Iffalse, they appear in front of the chart display. The default istrue.",https://www.tradingview.com/pine-script-docs/release-notes
August2024,"Theticker.new()andticker.modify()functions feature two new parameters:settlement_as_closeandbackadjustment. Users can specify whether these parameters are on, off, or set to inherit the symbol’s default settings. These settings only affect the data from futures symbols with these options available on their charts. They have no effect on other symbols.",https://www.tradingview.com/pine-script-docs/release-notes
August2024,"Thebackadjustmentparameter specifies whether past contract data on continuous futures symbols is back-adjusted. Its possible values are:backadjustment.on,backadjustment.off, orbackadjustment.inherit.",https://www.tradingview.com/pine-script-docs/release-notes
August2024,"Thesettlement_as_closeparameter specifies whether a futures symbol’sclosevalue represents the actual closing price or the settlement price on “1D” and higher timeframes. Its possible values are:settlement_as_close.on,settlement_as_close.off, orsettlement_as_close.inherit.",https://www.tradingview.com/pine-script-docs/release-notes
August2024,"The Sharpe and Sortino ratios in the Strategy Tester module have updated calculations. Previously, the ratios used strategy returns over monthly periods if the trading range was three or more months and daily periods if the range was three or more days but less than three months. Both ratios now always use monthly periods for consistency.",https://www.tradingview.com/pine-script-docs/release-notes
June2024,"We’ve added a new parameter to thebox.new(),label.new(),line.new(),polyline.new(), andtable.new()functions:",https://www.tradingview.com/pine-script-docs/release-notes
June2024,"Enums, also known asenumerations,enumerated types, orenum types, are unique data types with all possible values declared by the programmer. They can help programmers maintain more strict control over the values allowed by variables, conditional expressions, andcollections, and they enable convenient dropdown input creation with the newinput.enum()function. See our User Manual’sEnumspage to learn more about these new types and how to use them.",https://www.tradingview.com/pine-script-docs/release-notes
May2024,"We’ve added an optionalcalc_bars_countparameter to theindicator(),strategy(),request.security(),request.security_lower_tf(), andrequest.seed()functions that allows users to limit the number of recent historical bars a script or data request can execute across. When a script’sindicator()orstrategy()declaration statement includes acalc_bars_countargument, its “Settings/Inputs” tab will include a “Calculated bars” input in the “Calculation” section. The default value in all these functions is 0, which signifies that the script or request executes across all the available data.",https://www.tradingview.com/pine-script-docs/release-notes
May2024,Thestrategy.*namespace features several new built-in variables:,https://www.tradingview.com/pine-script-docs/release-notes
May2024,"Our newPine Profileris a powerful utility that analyzes the executions of all
significant code in a script and displays helpful performance
information next to the code linesinsidethe Pine Editor. TheProfiler’s information provides insight into a script’s runtime,
the distribution of runtime across significant code regions, and the
number of times each code region executes. With these insights,
programmers can effectively pinpoint performancebottlenecksand
ensure they focus onoptimizingtheir code where it truly matters when they need to improve
execution times.",https://www.tradingview.com/pine-script-docs/release-notes
May2024,"See the newProfiling and optimizationpage to learn more about the Profiler, how it works, and how
to use it to analyze a script’s performance and identify optimization
opportunities.",https://www.tradingview.com/pine-script-docs/release-notes
May2024,"When opening the detached Pine Editor from a tab with a chart, it now
links directly to that tab, as indicated by the “Linked” status and
green icon in the bottom-right corner. While linked, the “Add to
chart”, “Update on chart”, and “Apply to entire layout” buttons
affect the charts on the main tab.",https://www.tradingview.com/pine-script-docs/release-notes
May2024,The detached Pine Editor now includes the Pine console.,https://www.tradingview.com/pine-script-docs/release-notes
April2024,"We’ve added a new parameter to theplot(),plotchar(),plotcandle(),plotbar(),plotarrow(),plotshape(),
andbgcolor()functions:",https://www.tradingview.com/pine-script-docs/release-notes
March2024,Thesyminfo.*namespace features a new built-in variable:,https://www.tradingview.com/pine-script-docs/release-notes
March2024,Thetime()andtime_close()functions have a new parameter:,https://www.tradingview.com/pine-script-docs/release-notes
February2024,We’ve added two new functions for working with strings:,https://www.tradingview.com/pine-script-docs/release-notes
February2024,"Therequest.financial()function now accepts “D” as aperiodargument, allowing scripts to
request available daily financial data.",https://www.tradingview.com/pine-script-docs/release-notes
February2024,For example:,https://www.tradingview.com/pine-script-docs/release-notes
February2024,"Thestrategy.*namespace features a new variable for monitoring
available capital in a strategy’s simulation:",https://www.tradingview.com/pine-script-docs/release-notes
January2024,Thesyminfo.*namespace features new built-in variables:,https://www.tradingview.com/pine-script-docs/release-notes
January2024,Syminfo:,https://www.tradingview.com/pine-script-docs/release-notes
January2024,Target price:,https://www.tradingview.com/pine-script-docs/release-notes
January2024,Recommendations:,https://www.tradingview.com/pine-script-docs/release-notes
December2023,"We’ve addedformatandprecisionparameters to allplot*()functions, allowing indicators and strategies to selectively apply
formatting and decimal precision settings to plotted results in the
chart pane’s y-axis, the script’s status line, and the Data Window.
The arguments passed to these parameters supersede the values in theindicator()andstrategy()functions. Both are optional. The defaults for these parameters are the
same as the values specified in the script’s declaration statement.",https://www.tradingview.com/pine-script-docs/release-notes
December2023,For example:,https://www.tradingview.com/pine-script-docs/release-notes
November2023,We’ve added the following variables and functions to thestrategy.*namespace:,https://www.tradingview.com/pine-script-docs/release-notes
October2023,"Polylines are drawings that sequentially connect the coordinates from anarrayof up to 10,000chart pointsusing straight orcurvedline segments, allowing scripts
to draw custom formations that are difficult or impossible to achieve
usinglineorboxobjects. To learn more about this new drawing type, see thePolylinessection of our User Manual’s page onLines and boxes.",https://www.tradingview.com/pine-script-docs/release-notes
September2023,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
September2023,"Thedividends.*namespace now includes variables for retrieving future
dividend information:",https://www.tradingview.com/pine-script-docs/release-notes
September2023,Therequest.security_lower_tf()function has a new parameter:,https://www.tradingview.com/pine-script-docs/release-notes
September2023,"Users can now explicitly declare variables with theconst,simple,
andseriestype qualifiers, allowing more precise control over the
types of variables in their scripts. For example:",https://www.tradingview.com/pine-script-docs/release-notes
August2023,Added the following alertplaceholders:,https://www.tradingview.com/pine-script-docs/release-notes
August2023,"Maps are collections that hold elements in the form ofkey-value
pairs. They associate unique keys of afundamental typewith values
of abuilt-inoruser-definedtype. Unlikearrays,
these collections areunorderedand do not utilize an internal lookup
index. Instead, scripts access the values of maps by referencing thekeysfrom the key-value pairs put into them. For more information on
these new collections, see ourUser Manual’s page on Maps.",https://www.tradingview.com/pine-script-docs/release-notes
July2023,"Fixed an issue that caused strategies to occasionally calculate the
sizes of limit orders incorrectly due to improper tick rounding of thelimitprice.",https://www.tradingview.com/pine-script-docs/release-notes
July2023,Added a new built-in variable to thestrategy.*namespace:,https://www.tradingview.com/pine-script-docs/release-notes
June2023,Newsyminfo.*built-in variables were added:,https://www.tradingview.com/pine-script-docs/release-notes
June2023,"A new display parameter for allinput.*()functions was added.
It provides you with more control over the display of input values next to a script’s name.
Four arguments can be used:display.status_line,display.data_window,display.all,
anddisplay.none.
Combinations of these arguments using plus or minus signs are allowed, and regardless of the argument used,
input values will always continue to appear in theInputstab of the script’s settings.",https://www.tradingview.com/pine-script-docs/release-notes
May2023,"New parameter added to thestrategy.entry(),strategy.order(),strategy.close(),strategy.close_all(),
andstrategy.exit()functions:",https://www.tradingview.com/pine-script-docs/release-notes
May2023,"Our “Indicator on indicator” feature, which allows a script to pass
another indicator’s plot as a source value via theinput.source()function, now supports multiple external inputs. Scripts can use a
multitude of external inputs originating from up to 10 different
indicators.",https://www.tradingview.com/pine-script-docs/release-notes
May2023,We’ve added the following array functions:,https://www.tradingview.com/pine-script-docs/release-notes
May2023,"array.every()-
Returnstrueif all elements of theidarray aretrue,falseotherwise.",https://www.tradingview.com/pine-script-docs/release-notes
May2023,"array.some()-
Returnstrueif at least one element of theidarray istrue,falseotherwise. These functions also work with arrays ofintandfloattypes, in which case zero values are consideredfalse, and all otherstrue.",https://www.tradingview.com/pine-script-docs/release-notes
April2023,Fixed an issue with trailing stops instrategy.exit()being filled on high/low prices rather than on intrabar prices.,https://www.tradingview.com/pine-script-docs/release-notes
April2023,"Fixed behavior ofarray.mode(),matrix.mode()andta.mode().
Now these functions will return the smallest value when the data has no
most frequent value.",https://www.tradingview.com/pine-script-docs/release-notes
March2023,It is now possible to use seconds-based timeframe strings for thetimeframeparameter inrequest.security()andrequest.security_lower_tf().,https://www.tradingview.com/pine-script-docs/release-notes
March2023,A new function was added:,https://www.tradingview.com/pine-script-docs/release-notes
February2023,"Pine Script™ methods are specialized functions associated with specific
instances of built-in or user-defined types. They offer a more
convenient syntax than standard functions, as users can access methods
in the same way as object fields using the handy dot notation syntax.
Pine Script™ includes built-in methods forarray,matrix,line,linefill,label,box,
andtabletypes and facilitates user-defined methods with the newmethodkeyword. For more details on this new feature, see ourUser Manual’s page on methods.",https://www.tradingview.com/pine-script-docs/release-notes
January2023,New array functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
December2022,"Pine objects are instantiations of the new user-defined composite types
(UDTs) declared using thetypekeyword. Experienced programmers can think of UDTs as method-less
classes. They allow users to create custom types that organize different
values under one logical entity. A detailed rundown of the new
functionality can be found in ourUser Manual’s page on
objects.",https://www.tradingview.com/pine-script-docs/release-notes
December2022,A new function was added:,https://www.tradingview.com/pine-script-docs/release-notes
December2022,Newstrategy.*functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
November2022,Fixed behaviour ofmath.round_to_mintick()function. For ‘na’ values it returns ‘na’.,https://www.tradingview.com/pine-script-docs/release-notes
October2022,"Pine Script™ now has a new, more powerful and better-integrated editor.
Readour
blogto find out everything to know about all the new features and upgrades.",https://www.tradingview.com/pine-script-docs/release-notes
October2022,"New overload for thefill()function was added. Now it can create vertical gradients. More info
about it in theblog
post.",https://www.tradingview.com/pine-script-docs/release-notes
October2022,A new function was added:,https://www.tradingview.com/pine-script-docs/release-notes
September2022,"Thetext_font_familyparameter now allows the selection of a monospace
font inlabel.new(),box.new()andtable.cell()function calls, which makes it easier to align text vertically. Its
arguments can be:",https://www.tradingview.com/pine-script-docs/release-notes
September2022,The accompanying setter functions are:,https://www.tradingview.com/pine-script-docs/release-notes
August2022,A new label stylelabel.style_text_outlinewas added.,https://www.tradingview.com/pine-script-docs/release-notes
August2022,A new parameter for theta.pivot_point_levels()function was added:,https://www.tradingview.com/pine-script-docs/release-notes
August2022,A new parameter for thebox.new()function was added:,https://www.tradingview.com/pine-script-docs/release-notes
August2022,This parameter supports two arguments:,https://www.tradingview.com/pine-script-docs/release-notes
August2022,New built-in functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
August2022,"A new annotation//@strategy_alert_messagewas added. If the
annotation is added to the strategy, the text written after it will be
automatically set as the default alert message in the [Create
Alert] window.",https://www.tradingview.com/pine-script-docs/release-notes
July2022,"It is now possible to fine-tune where a script’s plot values are
displayed through the introduction of new arguments for thedisplayparameter of theplot(),plotchar(),plotshape(),plotarrow(),plotcandle(),
andplotbar()functions.",https://www.tradingview.com/pine-script-docs/release-notes
July2022,"Four new arguments were added, complementing the previously availabledisplay.allanddisplay.none:",https://www.tradingview.com/pine-script-docs/release-notes
July2022,"Thedisplayparameter supports the addition and subtraction of its
arguments:",https://www.tradingview.com/pine-script-docs/release-notes
June2022,"The behavior of the argument used with theqty_percentparameter ofstrategy.exit()has changed. Previously, the percentages used on successive exit orders
of the same position were calculated from the remaining position at any
given time. Instead, the percentages now always apply to the initial
position size. When executing the following strategy, for example:",https://www.tradingview.com/pine-script-docs/release-notes
June2022,"20% of the initial position will be closed on eachstrategy.exit()call. Before, the first call would exit 20% of the initial position, and
the second would exit 20% of the remaining 80% of the position, so only
16% of the initial position.",https://www.tradingview.com/pine-script-docs/release-notes
June2022,Two new parameters for the built-inta.vwap()function were added:,https://www.tradingview.com/pine-script-docs/release-notes
June2022,"New overloaded versions of thestrategy.close()andstrategy.close_all()functions with theimmediatelyparameter. Whenimmediatelyis set totrue, the closing order will be executed on the tick where it has been
placed, ignoring the strategy parameters that restrict the order
execution to the open of the next bar.",https://www.tradingview.com/pine-script-docs/release-notes
June2022,New built-in functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
June2022,New built-in variables were added:,https://www.tradingview.com/pine-script-docs/release-notes
May2022,Matrixsupport has been added to therequest.security()function.,https://www.tradingview.com/pine-script-docs/release-notes
May2022,"The historical states ofarraysandmatricescan now be referenced with the[]operator. In the example below, we reference the historic state of a
matrix 10 bars ago:",https://www.tradingview.com/pine-script-docs/release-notes
May2022,"Theta.change()function now can take values ofintandbooltypes as itssourceparameter and return the difference in the
respective type.",https://www.tradingview.com/pine-script-docs/release-notes
May2022,New built-in variables were added:,https://www.tradingview.com/pine-script-docs/release-notes
May2022,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
May2022,"Addeduse_bar_magnifierparameter for thestrategy()function. Whentrue, theBroker
Emulatoruses lower timeframe data during history backtesting to achieve more
realistic results.",https://www.tradingview.com/pine-script-docs/release-notes
May2022,"Fixed behaviour ofstrategy.exit()function when stop loss triggered at prices outside the bars price
range.",https://www.tradingview.com/pine-script-docs/release-notes
May2022,Added newcommentandalertmessage parameters for thestrategy.exit()function:,https://www.tradingview.com/pine-script-docs/release-notes
April2022,"Added thedisplayparameter to the following functions:barcolor,bgcolor,fill,hline.",https://www.tradingview.com/pine-script-docs/release-notes
April2022,A new function was added:,https://www.tradingview.com/pine-script-docs/release-notes
April2022,New built-in variables were added:,https://www.tradingview.com/pine-script-docs/release-notes
April2022,New matrix functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
April2022,Added a new parameter for thestrategy()function:,https://www.tradingview.com/pine-script-docs/release-notes
March2022,New array functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
March2022,Added a new optionalnthparameter for thearray.min()andarray.max()functions.,https://www.tradingview.com/pine-script-docs/release-notes
March2022,Addedindexinfor..inoperator. It tracks the current iteration’s index.,https://www.tradingview.com/pine-script-docs/release-notes
February2022,"Added templates and the ability to create arrays via templates. Instead
of using one of thearray.new_*()functions, a template functionarray.new<type>()can be used. In the example below, we use this functionality to create
an array filled withfloatvalues:",https://www.tradingview.com/pine-script-docs/release-notes
February2022,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
January2022,Added new functions to clone drawings:,https://www.tradingview.com/pine-script-docs/release-notes
December2021,"The space between lines drawn in Pine Script™ can now be filled! We’ve
added a newlinefilldrawing type, along with a number of functions
dedicated to manipulating it. Linefills are created by passing two lines
and a color to thelinefill.new()function, and their behavior is
based on the lines they’re tied to: they extend in the same direction
as the lines, move when their lines move, and are deleted when one of
the two lines is deleted.",https://www.tradingview.com/pine-script-docs/release-notes
December2021,New linefill-related functions:,https://www.tradingview.com/pine-script-docs/release-notes
December2021,"Added a number of new functions that provide more ways to process
strings, and introduce regular expressions to Pine Script™:",https://www.tradingview.com/pine-script-docs/release-notes
December2021,"Box drawings now supports text. Thebox.new()function has five new parameters for text manipulation:text,text_size,text_color,text_valign, andtext_halign.
Additionally, five new functions to set the text properties of existing
boxes were added:",https://www.tradingview.com/pine-script-docs/release-notes
December2021,"Added new built-in variables that return thebar_indexandtimevalues of the last bar in the dataset. Their values are known at the
beginning of the script’s calculation:",https://www.tradingview.com/pine-script-docs/release-notes
December2021,New built-insourcevariable:,https://www.tradingview.com/pine-script-docs/release-notes
November2021,Added a newfor…inoperator to iterate over all elements of an array:,https://www.tradingview.com/pine-script-docs/release-notes
November2021,"Added function overloads. Several functions in a script can now share
the same name, as long one of the following conditions is true:",https://www.tradingview.com/pine-script-docs/release-notes
November2021,"Added a new [currency] argument to mostrequest.*()functions. If specified, price values returned by the function will be
converted from the source currency to the target currency. The following
functions are affected:",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"Pine Script™ v5 is here! This is a list of thenewfeatures added to
the language, and a few of thechangesmade. See the Pine Script™ v5Migration guidefor
a complete list of thechangesin v5.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"Libraries are a new type of publication. They allow you to create custom
functions for reuse in other scripts. See this manual’s page onLibraries.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"Pine Script™ now supportsswitchstructures! They provide a more convenient and readable alternative to
long ternary operators andifstatements.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"whileloops are here! They allow you to create a loop that will only stop when
its controlling condition is false, or abreakcommand is used in the
loop.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"New built-in array variables are maintained by the Pine Script™ runtime
to hold the IDs of all the active objects of the same type drawn by your
script. They arelabel.all,line.all,box.allandtable.all.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"Theruntime.error()function makes it possible to halt the execution of a script and display
a runtime error with a custom message. You can use any condition in your
script to trigger the call.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"Parameter definitions in user-defined functions can now include a
default value: a function defined asf(x = 1) => xwill return 1 when
called asf(), i.e., without providing an argument for itsxparameter.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"New variables and functions provide better script visibility on strategy
information:",https://www.tradingview.com/pine-script-docs/release-notes
October2021,A newearnings.standardizedconstant for therequest.earnings()function allows requesting standardized earnings data.,https://www.tradingview.com/pine-script-docs/release-notes
October2021,"A v4 to v5 converter is now included in the Pine Script™ Editor. See the
Pine Script™ v5Migration guidefor more information on converting your scripts to v5.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"TheReference
Manualnow
includes the systematic mention of the form and type (e.g., “simple
int”) required for each function parameter.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"The User Manual was
reorganized and new content was added.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"Many built-in variables, functions and function arguments were renamed
or moved to new namespaces in v5. The venerablestudy(), for example,
is nowindicator(),
andsecurity()is nowrequest.security().
New namespaces now group related functions and variables together. This
consolidation implements a more rational nomenclature and provides an
orderly space to accommodate the many additions planned for Pine
Script™.",https://www.tradingview.com/pine-script-docs/release-notes
October2021,"See the Pine Script™ v5Migration guidefor
a complete list of thechangesmade in v5.",https://www.tradingview.com/pine-script-docs/release-notes
September2021,"New parameter has been added for thedividends(),earnings(),financial(),quandl(),security(), andsplits()functions:",https://www.tradingview.com/pine-script-docs/release-notes
July2021,tostringnow accepts “bool” and “string” types.,https://www.tradingview.com/pine-script-docs/release-notes
July2021,New argument fortimeandtime_closefunctions was added:,https://www.tradingview.com/pine-script-docs/release-notes
July2021,It is now possible to place a drawing object in the future withxloc = xloc.bar_index.,https://www.tradingview.com/pine-script-docs/release-notes
July2021,New argument forstudyandstrategyfunctions was added:,https://www.tradingview.com/pine-script-docs/release-notes
June2021,New variable was added:,https://www.tradingview.com/pine-script-docs/release-notes
June2021,New function was added:,https://www.tradingview.com/pine-script-docs/release-notes
June2021,"Expandedtostring()functionality. The function now accepts three new
formatting arguments:",https://www.tradingview.com/pine-script-docs/release-notes
May2021,Improved backtesting functionality by adding the Leverage mechanism.,https://www.tradingview.com/pine-script-docs/release-notes
May2021,"Added support for table drawings and functions for working with them.
Tables are unique objects that are not anchored to specific bars; they
float in a script’s space, independently of the chart bars being viewed
or the zoom factor used. For more information, see theTablesUser Manual page.",https://www.tradingview.com/pine-script-docs/release-notes
May2021,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
May2021,"A newboxdrawing has been added to Pine Script™, making it possible
to draw rectangles on charts using the Pine Script™ syntax. For more
details see the Pine Script™referenceand theLines and boxesUser Manual page.",https://www.tradingview.com/pine-script-docs/release-notes
May2021,"Thecolor.newfunction can now accept series and input arguments, in
which case, the colors will be calculated at runtime. For more
information about this, see ourColorsUser Manual page.",https://www.tradingview.com/pine-script-docs/release-notes
April2021,New math constants were added:,https://www.tradingview.com/pine-script-docs/release-notes
April2021,New math functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
April2021,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
March2021,New assignment operators were added:,https://www.tradingview.com/pine-script-docs/release-notes
March2021,New parameters for inputs customization were added:,https://www.tradingview.com/pine-script-docs/release-notes
March2021,New argument forfillfunction was added:,https://www.tradingview.com/pine-script-docs/release-notes
March2021,A new keyword was added:,https://www.tradingview.com/pine-script-docs/release-notes
March2021,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
March2021,New arguments for the study() function were added:,https://www.tradingview.com/pine-script-docs/release-notes
February2021,New variable was added:,https://www.tradingview.com/pine-script-docs/release-notes
January2021,The following functions now accept a series length parameter:,https://www.tradingview.com/pine-script-docs/release-notes
January2021,"A new type of alerts was added - script alerts. More information can be
found in ourHelp
Center.",https://www.tradingview.com/pine-script-docs/release-notes
December2020,New array types were added:,https://www.tradingview.com/pine-script-docs/release-notes
December2020,New functions were added:,https://www.tradingview.com/pine-script-docs/release-notes
November2020,New function was added:,https://www.tradingview.com/pine-script-docs/release-notes
October2020,"The behavior ofrising()andfalling()functions have changed. For
example,rising(close,3)is now calculated as following:",https://www.tradingview.com/pine-script-docs/release-notes
September2020,"Added support forinput.colorto theinput()function. Now you can
provide script users with color selection through the script’s
“Settings/Inputs” tab with the same color widget used throughout the
TradingView user interface. Learn more about this feature in ourblog",https://www.tradingview.com/pine-script-docs/release-notes
September2020,,https://www.tradingview.com/pine-script-docs/release-notes
September2020,"Added support for arrays and functions for working with them. You can
now use the powerful new array feature to build custom datasets. See ourUser Manual page on
arraysand ourblog",https://www.tradingview.com/pine-script-docs/release-notes
September2020,"The following functions now accept a series length parameter. Learn more
about this feature in ourblog:",https://www.tradingview.com/pine-script-docs/release-notes
June2020,,https://www.tradingview.com/pine-script-docs/release-notes
June2020,"Please note that you need to reapply the indicator in order for the
[resolution] parameter to appear.",https://www.tradingview.com/pine-script-docs/release-notes
June2020,,https://www.tradingview.com/pine-script-docs/release-notes
June2020,,https://www.tradingview.com/pine-script-docs/release-notes
June2020,,https://www.tradingview.com/pine-script-docs/release-notes
April2020,New function was added:,https://www.tradingview.com/pine-script-docs/release-notes
March2020,New function was added:,https://www.tradingview.com/pine-script-docs/release-notes
March2020,New functions for common indicators were added:,https://www.tradingview.com/pine-script-docs/release-notes
March2020,"Added a detailed description of all the fields in theStrategy Tester
Report.",https://www.tradingview.com/pine-script-docs/release-notes
January2020,New built-in variables were added:,https://www.tradingview.com/pine-script-docs/release-notes
January2020,New parameters were added forstrategy.close():,https://www.tradingview.com/pine-script-docs/release-notes
January2020,New parameter was added forstrategy.close_all:,https://www.tradingview.com/pine-script-docs/release-notes
December2019,Warning messages were added.,https://www.tradingview.com/pine-script-docs/release-notes
December2019,"For example, if you don’t specify exit parameters forstrategy.exit-profit,limit,loss,stopor one of the
following pairs:trail_offsetandtrail_price/trail_points-
you will see a warning message in the console in the Pine Script™
editor.",https://www.tradingview.com/pine-script-docs/release-notes
December2019,"Increased the maximum number of arguments inmax,min,avgfunctions. Now you can use up to ten arguments in these functions.",https://www.tradingview.com/pine-script-docs/release-notes
September2019,New parameters to thestrategyfunction were added:,https://www.tradingview.com/pine-script-docs/release-notes
September2019,Some fixes were made:,https://www.tradingview.com/pine-script-docs/release-notes
September2019,"str.replace_all(source, target, replacement)function was added. It
replaces each occurrence of atargetstring in thesourcestring
with areplacementstring",https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,New variables added:,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,"The behavior of some functions, variables and operators has changed:",https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,"Thetimevariable returns the correct open time of the bar for
more special cases than before",https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,"An optionalsecondsparameter of thetimestamp()function allows
you to set the time to within seconds",https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,security()function:,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,Added the possibility of requesting resolutions in seconds:,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,"1, 5, 15, 30 seconds (chart resolution should be less than or
equal to the requested resolution)",https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,"Reduced the maximum value that can be requested in some of the
other resolutions:",https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,from 1 to 1440 minutes,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,from 1 to 365 days,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,from 1 to 52 weeks,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,from 1 to 12 months,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,Changes to the evaluation of ternary operator branches:,https://www.tradingview.com/pine-script-docs/release-notes
July-August2019,"In Pine Script™ v3, during the execution of a ternary operator, both
its branches are calculated, so when this script is added to the
chart, a long position is opened, even if the long() function is not
called:",https://www.tradingview.com/pine-script-docs/release-notes
2013,Previous,https://www.tradingview.com/pine-script-docs/release-notes
2013,Next,https://www.tradingview.com/pine-script-docs/release-notes
Introduction,Pine Script™ v6 introduces a number of changes and new features. See theRelease Notesfor a list of all new features.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Introduction,"Some changes are not compatible with v5 scripts. This guide explains how to update your script from v5 to v6. If you want to convert a script from v4 or earlier to v6, refer to the migration guides for previous versions and update the script one version at a time.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Introduction,"The Pine Editor converter can handle many of these changesautomatically, while other changes might requiremanualfixes.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Introduction,Here are the changes that affect v5 scripts:,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Converting v5 to v6 using the PineEditor,The Pine Editor can automatically convert a v5 script to v6. The Pine Editor highlights the//@version=5annotationof a v5 script in yellow.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Converting v5 to v6 using the PineEditor,"To convert the script, click the editor’s “Manage script” dropdown menu and select “Convert code to v6”:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Converting v5 to v6 using the PineEditor,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Converting v5 to v6 using the PineEditor,"A script can only be converted if its v5 code compiles successfully. In rare cases, converting the script automatically will result in a v6 script with compilation errors. In that case, the errors will be highlighted in the Editor, and they would have to be resolved by hand. Use the information in the following sections to convert the remaining v5 code manually.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,Scripts can call allrequest.*()functionsdynamically by defaultin Pine v6.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"When scripts callrequest.*()functionsnon-dynamically, the context for the request must be known when the script first runs, and must remainunchanged(static) throughout the script’s execution. Therefore,ticker,timeframe, and other parameters that specify the context must be of a “simple” qualifier. This restriction also prevents scripts usingrequest.*()functions in loops likeforandwhile.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"In Pine v5, requests are by default not dynamic. Dynamic requestsaresupported in v5, but only if programmers specifydynamic_requests=truein the script’sindicator(),strategy(), orlibrary()declaration. Otherwise, thedynamic_requestsparameter’s default value isfalsein v5.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"In Pine v6, dynamic requests are available by default. The compiler analyzes whether the dynamic request mode is needed and turns it off if it is unnecessary, for performance reasons.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,This change means that v6request.*()calls innately support “series” arguments. This qualifier change enables users to:,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"Request symbols dynamically, even if they are not known on the first execution of a script.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,Usearraysto store symbols and timeframes.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,Callrequest.*()functions inside ofloops.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,Userequest.*()calls inexported library functions.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"The following example v6 script uses a singlerequest.security()instance in aloopto dynamically request data from multiple symbols stored in anarray. Each loop iteration retrieves a symbol’scloseprice from its respective “1D” chart. The script then calculates and plots theaverageclose price for the selected symbols to create a simple custom index. In Pine v5, the indicator’sdynamic_requestsparameter must be set totrueto run this code without triggering a compilation error:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"There are minor differences between dynamic and non-dynamic requests in some obscure cases, for example, when passing the result of onerequest.security()call as theexprfor another call. As a result, in rare cases, a valid v5 script withoutdynamic_requests=truecan behave differently when converted to v6, even if nothing related to requests was changed.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Dynamicrequests,"Fix:In Pine v6, theindicator(),strategy(), andlibrary()functions all include adynamic_requestsparameter, which is set totrueby default. If you find differences between the behavior of yourrequest.*()call in v5 and v6, you can passdynamic_requests=falseto force the dynamic behavior off and replicate the previous v5 behavior.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Types,The following changes have been made to how Pine handles types.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Explicit “bool”casting,"In Pine v6, “int” and “float” values are no longer implicitly cast to “bool”.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Explicit “bool”casting,"In Pine v5, values of “int” and “float” types can be implicitly cast to “bool” when an expression or function requires a boolean value. In such cases,na,0, or0.0are consideredfalse, andany other valueis consideredtrue.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Explicit “bool”casting,"For example, take a look at this conditional expression:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Explicit “bool”casting,"It assignscolor.redtoexpron thefirstbar of the chart, because that bar has abar_indexof 0, and then assignscolor.greenoneveryfollowing bar, because anynon-zerovalue istrue. The ternary operator?:expects a “bool” expression for its condition, but in v5 it can also accept a numeric value as its conditional expression, which it automatically converts (implicitly casts) to a “bool”.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Explicit “bool”casting,"In v6, scripts mustexplicitlycast a numeric value to “bool” to use it where a “bool” type is required.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Explicit “bool”casting,Fix:Wrap the numeric value with thebool()function to cast it explicitly.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"In v6, “bool” values can no longer bena. Consequently, thena(),nz(), andfixnan()functions no longer accept “bool” types.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"In v5, “bool” variables havethreepossible values: they can betrue,false, orna. The booleannavalue behaves differently from bothtrueandfalse:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"When implicitly cast to “bool”,nais evaluated asfalse.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,The booleannavalue isnotconsidered equal tofalsewhen compared using the==operator.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"When the booleannavalue is passed to thena()function, it returnstrue, whereasna(true)andna(false)both returnfalse.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"To manage the booleannavalue, thena(),nz(), andfixnan()functions in v5 have overloads that accept “bool” type arguments. This third boolean state leads to occasional confusion in v5 scripts.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"In v6, this is no longer the case: a “bool” must beeithertrueorfalse, withnothird state. This means that in v6 scripts:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,A variable declared as “bool” canno longerbe assignednaas its default value.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"In conditional expressions likeifandswitch, if the return type of the expression is “bool”, anyunspecifiedcondition returnsfalseinstead ofna.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"Expressions that returned a booleannavalue in v5 now returnfalse. For example, using the history-referencing operator[]on the very first bar of the dataset to request a historical value of a “bool” variable returnednain v5, because no past bars exist, but in Pine v6 it returnsfalse.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"Functions that explicitly check whether a value isna– specifically,na(),nz(), andfixnan()– donotaccept “bool” arguments in v6.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"This example v5 script creates a simplestrategythat switches between long and short positions when two moving averages cross. Anif-statement assignstrueorfalseto a “bool” variableisLongto track the trade’s long or short direction, using the strategy’s positive (> 0) or negative (< 0)position size. However, when the position size is zero,neitherof these conditions are valid. In v5, the undefined condition (== 0) assignsnato the variableisLong.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"Therefore, a booleannavalue occurs on the first few bars in the dataset before the strategy enters any positions. We can visualize the three “bool” states by setting thebackground colorbased on the value ofisLong:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"Fix:Remove anyna(),nz(), andfixnan()functions that run on “bool” values. Ensure that all “bool” values are correctly interpreted astrueorfalsestatesonly. If your code logic requires a thirdnastate to execute as intended, rewrite the code using a different type or structure to achieve the previous three-state behavior.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"To adapt our code to Pine v6, we must first remove the following line to resolve the initial compilation error:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"In v6, the undefined condition (strategy.position_size == 0) now returnsfalseinstead ofna. Consequently, the scriptincorrectlyhighlights the bars where there arenotrade positions the same color as those where there areshortpositions, sinceisLonghas the samefalseresult for both conditions:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,"We want to distinguish betweenthreeunique states: long positions, short positions, and no entered positions. Therefore, using a two-state Boolean variable in v6 is no longer suitable. Instead, to maintain our desired behavior, we mustrewritethe v6 code to replace the “bool” variable with a different type. For example, we can use an “int” variable to represent our three differentposition_sizestates using -1, 0, and 1:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Boolean values cannot be`na`,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Unique parameters cannot be`na`,"Some Pine Script™ function parameters expect values ofuniquetypes. For example, thestyleparameter of theplot()function expects a value of the “input plot_style” qualified type, which must be one of the constants in theplot.style_*group.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Unique parameters cannot be`na`,"In v5, passingnato theplot()function’sstyleparameter simply plots a line using the default styleplot.style_line, without raising an error.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Unique parameters cannot be`na`,"In v6, parameters that expect unique typesno longeracceptnavalues. Additionally,conditional expressionsthat return these unique types must be used in a form thatcannotresult in annavalue. For example, aswitch-statement must have adefaultblock, and anif-statement must have anelse-block, because these conditional expressions can returnnaotherwise.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Unique parameters cannot be`na`,The following example script shows two code structures that work in v5 but raise errors in v6.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Unique parameters cannot be`na`,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Unique parameters cannot be`na`,"Fix:Ensure that nonavalue is passed to parameters that expect unique types, and that all conditional statements return a suitable non-navalue.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Constants,The following changes have been made to how Pine handles constant values.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Fractional division ofconstants,Dividing two integer “const” values can return a fractional value.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Fractional division ofconstants,"In v5, the result of the division of two “int” values is inconsistent. Ifbothvalues are qualified as “const”, the script performs what is known asinteger division, and discards any fractional remainder in the result, e.g.,5/2 = 2. However, ifat least oneof the integers is qualified as “input”, “simple”, or “series”, the scriptpreservesthe fractional remainder in the division result:5/2 = 2.5.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Fractional division ofconstants,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Fractional division ofconstants,"In v6, dividing two “int” values that are not evenly divisiblealwaysresults in a number with afractional value, regardless of the type and qualifier of the two arguments used. Therefore, the v6 division result is5/2 = 2.5, even if both values involved are “const int”.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Fractional division ofconstants,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Fractional division ofconstants,"Fix:If you need an “int” division resultwithouta fractional value, wrap the division with theint()function to cast theresultto “int”, which discards the fractional remainder. Alternatively, usemath.round(),math.floor(), ormath.ceil()toroundthe division result in a specific direction.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Mutable variables are always“series”,"In Pine v5, some mutable variables are qualified as “series” values but areerroneouslyqualified as “const”. This behavior is incorrect and allows a programmer to pass them where “series” variables are usually not accepted.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Mutable variables are always“series”,"For example, theta.ema()function expects itslengthargument to be an integer qualified as “simple” or weaker (see theQualifiers hierarchy). In the example script below theseriesLenvariable is effectively a “series” type because its value changes between bars. In v5,seriesLencanbe passed tota.ema(). Although this does not raise an error, it does not work as expected, because only itsfirstrecorded value1is used as thelengthin the script:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Mutable variables are always“series”,"In v6,seriesLenis correctly parsed as a “series int” type, and raises a compilation error if passed in place of the expected “simple int” argument forlength.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Mutable variables are always“series”,"Fix:Pass values of the expected qualified type to built-in functions. In our example, set thelengthargument to a “const int” value.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Colorchanges,The color values behind some of thecolor.*constants have changed in Pine v6 to better reflect the TradingView palette:,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Colorchanges,"Additionally, the default text color forlabel.new()is nowcolor.whitein v6 (previouslycolor.blackin v5) to ensure that the text is more visible against the defaultcolor.bluelabel.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Colorchanges,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Removal of `when`parameter,"Thewhenparameter for order creation functions was deprecated in v5 and is removed in v6. An order is created only if thewhencondition istrue, which is its default value. This parameter affects the following functions:strategy.entry(),strategy.order(),strategy.exit(),strategy.close(),strategy.close_all(),strategy.cancel(), andstrategy.cancel_all().",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Removal of `when`parameter,"The following example strategy shows the use of thewhenparameter, and works in v5 but not v6.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Removal of `when`parameter,"Fix:To trigger the order creation conditionally, useifstatements instead.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,The default margin percentage for strategies is now 100.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,"In v5, the default value of themargin_longandmargin_shortparameters is 0, which means that the strategydoes not checkits available funds before creating or managing orders. It can create orders that requiremoremoney than is available, and willnotclose short orders even when they lose more money than available to the strategy.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,"InPine v6, the default margin percentage is 100. The strategydoes not openentries that require more money than is available, and short orders aremargin calledif too much money is lost.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,"For example, we can see the difference in strategy behavior by running this simple strategy on the “ARM” symbol’s 4h chart using the v5 and v6 default margin values. When using Pine v5, there are no margin calls:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,"However, if we adjust this script to//@version=6on the same chart, we see that it triggers 14 margin calls because of the new margin percentages:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Default marginpercentage,"Fix:To replicate the previous v5 behavior, set thestrategy()function’smargin_shortandmargin_longarguments to 0.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Excess orders aretrimmed,Strategy orders above the 9000 limit are trimmed (removed) in v6.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Excess orders aretrimmed,"In v5, outside of Deep Backtesting, when a strategy creates more than 9000 orders, it raises a runtime error and halts any further calculations.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Excess orders aretrimmed,"For example, this strategy script places several orders on each bar in the dataset. As a result, it can quickly surpass the 9000 order limit and trigger an error in Pine v5:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Excess orders aretrimmed,"In v6, when the total number of orders exceeds 9000, the strategy doesnothalt. Instead, the orders aretrimmedfrom the beginning until the limit is reached, meaning that the strategy only stores the information for the most recent orders.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Excess orders aretrimmed,"Trimmed orders no longer show in the Strategy Tester, and referencing them using thestrategy.closedtrades.*functions returnsna. Usestrategy.closedtrades.first_indexto get the index of the firstnon-trimmedtrade:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Excess orders aretrimmed,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,"Thestrategy.exit()function has three sets ofrelativeandabsoluteparameters that define price levels for exit order calculations. The relative parametersprofit,loss, andtrail_pointsspecify thetake-profitandstop-losslevels andtrailing stopactivation level astick distancesfrom the entry price. In contrast, the absolute parameterslimit,stop, andtrail_pricespecify the exit and trail activationpricesdirectly.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,"In Pine v5, astrategy.exit()call containing arguments for both the relative and absolute parameters that define a price level for the same exit order always prioritizes theabsoluteparameter and ignores the relative one. For instance, a call that includes alimitandprofitargument consistently places take-profit orders at thelimitvalue. It never places an exit order using theprofitdistance.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,"In Pine v6, if astrategy.exit()call contains arguments for related absolute and relative parameters, it evaluatesbothspecified levels and uses the one that the market price is expected totrigger first.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,"The example below demonstrates how the behavior of this command differs for v5 and v6 scripts. This v5 script creates a longmarket orderand an exit orderbracketon each 28th bar. Thestrategy.exit()call contains arguments for the relative parameters that determine take-profit and stop-loss levels (profitandloss), and it includes arguments for the absolute parameters (limitandstop). Theprofitandlossarguments are both 0, which would result in consistent exits at the entry price if the command used them. However, the command never uses these values to determine the exit order levels because thelimitandstopparametersalwaystake precedence when they have specified values:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,"If we convert the script to Pine v6, its behavior changes. Instead of prioritizing the absolutelimitandstopparameters exclusively, thestrategy.exit()command always prioritizes the price levels that will trigger exitsfirst. In this example, the market price reaches thelimitorstopvalueaftertheprofitandlossdistance of 0 ticks. Consequently, the command ignores thelimitandstopvalues and places its exit orders at the entry price, which causes the strategy to exit each trade immediately after opening it:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
`strategy.exit()` evaluates parameterpairs,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History-referencingoperator,Pine v6 contains several changes to referencing the history of values.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,The history-referencing operator[]can no longer be used with literal values or built-in constants.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,"In v5, the history-referencing operator[]can be used with built-in constants, such astrueandcolor.red, and withliterals, which are raw values used directly in a script that are not stored as variables, such as6or""myString"", etc.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,"However, referencing the history of a literal is usually redundant, because by definition every literal represents a fixed value. The only exception where the returned historic value may vary is if the historical offset points to anon-existentbar, in which case referencing the historic literal value returnsna.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,"InPine v6, you canno longeruse the history-referencing operator[]on literals or built-in constants. Trying to do so triggers a compilation error.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,Fix:Remove any[]operators used with literals or constants.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No history for literalvalues,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,The history-referencing operator[]can no longer be used directly on fields of user-defined types.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,"In v5, you can use the history-referencing operator[]on thefieldsofuser-defined types. While this does not cause any compilation errors, the behavior itself is erroneous.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,"For example, the script below draws an arrowlabelon each bar and displays its percentage increase/decrease. The label style, color, and text are set based on a bar’s direction (close > open). The script defines aUDTLblSettingsto initialize an object on each bar that stores these settings. On the last bar, it draws atablecell that displays the arrow direction and percentage difference from 10 bars back. In v5, we could use the history-referencing operator[]on the requiredLblSettingsfields directly:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,"InPine v6, you canno longeruse the history-referencing operator[]on the field of a user-defined type directly.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,"Fix:Use the history-referencing operator on the UDTobjectinstead, then retrieve the field of the historic object. To do so, use the syntax(myObject[10]).field- ensure the object’s historical reference is wrapped inparentheses, otherwise it is invalid. Alternatively, assign the UDTfieldto avariablefirst, and then use the history-referencing operator[]on the variable to access its historic value.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
History of UDTfields,"Therefore, we can adjust the v5 code to access a historic instance of ourinfoObjecton the last bar, wrapped in parentheses. Then, we retrieve our desired field values from the historic object(infoObject[10])to display the arrow direction and percentage difference from 10 bars back:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,"Thetimeframe.periodvariable holds a “string” that represents the chart’s timeframe, typically consisting of aquantity(multiplier) andunit.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,"In v5, thetimeframe.periodvariable doesnotinclude a quantity when the chart timeframe has a multiplier of1. Instead, the string consists of only the timeframe unit, e.g.,""D"",""W"",""M"". This is inconsistent with the timeframe strings for these same units at higher intervals, e.g.,""2D"",""3M"".",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,"To simplify the timeframe format in v6, thetimeframe.periodvariable nowalwaysincludes a multiplier with its timeframe unit. So,""D""becomes""1D"",""W""becomes""1W"", and""M""becomes""1M"".",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,"This change might affect the behavior of older scripts that used==to compare the value oftimeframe.periodwith the “string” representation of a timeframe directly (e.g.,timeframe.period == ""D"").",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,"To show the difference between the v5 and v6timeframe.periodvariables, we ran the script below on a daily chart (1D) for each Pine version. The script displays thetimeframe.periodstring in atable, and compares the variable’s value with the “string” literals""D""and""1D"":",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Timeframes must include amultiplier,"Fix:In general, ensure that all timeframe strings include a multiplier. In this example, change the timeframe comparison “string” (timeframe.period == ""D"") to ensure the “string” literal includes a multiplier (timeframe.period == ""1D"").",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,Theandandorconditions are now evaluatedlazilyrather thanstrictly.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"Anandcondition istrueifallof its arguments aretrue, which means that if thefirstargument isfalse, we can deduce that the whole condition isfalse, regardless of the value of the second argument. Conversely, anorcondition istruewhenat least oneof the arguments istrue, so if thefirstargument is alreadytrue, then the whole condition istrue, regardless of the second argument’s state.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"Pine v5 evaluates allboolexpressions except for the?:ternary operatorstrictly, meaning thesecondpart of a conditional expression isalwaysevaluated, regardless of the value of the first argument.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"Lazy evaluation can have consequences for script calculation. In the example below, we assign a value oftrueto thesignalvariableonlywhenclose > openandta.rsi(close, 14) > 50. Theta.rsi()functionmust be executed on every barin order to calculate its result correctly. In v5, the functioniscalled on every bar, even whenclose > openisnottrue, due to the strict bool evaluation, and therefore the function calculates correctly.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"In v6,boolexpressions are evaluatedlazily, which means the expressionstops evaluatingonce it determines the overall condition’s result, even if there are other arguments remaining in the expression.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"If we convert the script above to v6, we see that the plotted signalsdifferbetween the two scripts. This variation occurs because of the lazy bool evaluation – since anandcondition is onlytrueifallits arguments aretrue, whenclose > openisfalse, theandcondition isdefinitelyfalseregardless of the second argumentta.rsi(close, 14) > 50. Consequently, theta.rsi()call isnotevaluated on every bar, which interferes with the internal history that the RSI function stores for its calculation and results in incorrect values:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"Fix:Ensure that the script evaluates all functions that rely on previous values on each bar. For example, extract calls that rely on historical context to theglobal scopeand assign them to a variable. Then, reference thatvariablein theandandorconditions.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"Note that you can and should take advantage of the lazy bool evaluation to create smarter, more concise code.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Lazy evaluation ofconditions,"For example, the script below callsarray.first()on anarraythat is occasionally empty (on bars whereclose > openisfalse). InPine v5, callingarray.first()on an empty array results in a runtime error, so you must keep the twoif-conditions that check the array size and first element separated indifferent scopesto avoid the error. However, inPine v6, you can have the two conditions in thesamescopewithout error because theandcondition’s lazy evaluation ensures thatarray.first()will only be called ifarray.size() != 0istruefirst:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Cannot repeatparameters,"In v5, you can specify the same parameter in a function more than once. However, doing so raises acompiler warning, and only thefirstvalue will be used.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Cannot repeatparameters,"In v6, you can specify a parameter onlyonce, and doing otherwise will result in acompilation error.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Cannot repeatparameters,Fix:Remove the duplicate parameters.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,Theoffsetparameter can no longer accept “series” values,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,"In Pine v5, theoffsetparameter inplot()and similar functions can accept “seriesint” arguments. However, passing a “series” argument raises a compiler warning, and the behavior isincorrect: only thelastcalculated offset is used on the whole chart, regardless of its previous values.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,"For example, this script usesbar_index / 2as a “series”offsetargument while plotting the high points of each bar’s body. Because theplot()function uses only thelastoffsetvalue, the plot appears offset by 10 bars here for theentire“GOOGL” 12M chart (since the chart’s lastbar_indexis 20 here):",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,"In v6, theoffsetparameter accepts an argument qualified as “simple” or weaker. The value used must be the same on every bar.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,"Remember that the Pine Script™qualifiershierarchy means that a parameter expecting a “simple” value can also accept values qualified as “input” or “const”. However, passing a “series” argument triggers a compilation error.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
No series `offset`values,Fix: Change any “series” values passed tooffsetto “simple” values.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Minimum `linewidth` is1,"In v5, thelinewidthparameter of theplot()andhline()functions can accept a value smaller than 1, although the width on the chart will still appear as 1 for these drawings:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Minimum `linewidth` is1,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Minimum `linewidth` is1,"In v6, thelinewidthargumentmustbe 1 or greater. Passing a smaller value causes a compilation error.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Minimum `linewidth` is1,Fix:Replace anylinewidthargument that is smaller than 1 to ensure all width values areat least1.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Minimum `linewidth` is1,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Negative indices inarrays,Some array functions now accept negative indices.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Negative indices inarrays,"In v5, array functions that require an element’sindexalways expect a valuegreater than or equal to 0. Therefore, functions likearray.get(),array.insert(),array.set(), andarray.remove()raise a runtime error if a negative index is passed.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Negative indices inarrays,"In v6,array.get(),array.insert(),array.set(), andarray.remove()allow you to pass anegative indexto request items from theendof the array. For example,-1refers to the last item in the array,-2refers to the second to last, and so forth.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Negative indices inarrays,"As a result, scripts that return a runtime error for using negative indices in v5 can be executed without error in v6.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Negative indices inarrays,"However, if you create or update a script in v6, you must be aware of this new behavior to ensure that the script does not behave unexpectedly.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Negative indices inarrays,"Keep in mind that negative indexing is still bound by the size of the array. Therefore, an array of 5 elements only accepts indexing from 0 to 4 (first to last element) or -1 to -5 (last to first element). Any other indices are out of bounds and raise a runtime error:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"In Pine v4 and earlier,plot()and similar functions had atranspparameter that specified the transparency of the resulting plot.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"Pine v5 deprecated and hid thetranspparameter, because it is not fully compatible with the color system that Pine currently uses. Using both transparency settings together can result in unexpected behavior, as thetranspparameter can get overwritten by the transparency of the color passed to the function. In v5, using thecolor.new()function and not thetranspparameter avoids any such conflicts.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"Pine v6 removes thetranspparameter completely from the following functions:bgcolor(),fill(),plot(),plotarrow(),plotchar(), andplotshape(). Whenever theconverterencounters atranspargument, it removes the argument from the converted v6 script.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"Fix:To set the transparency of a drawn plot, use thecolor.new()function. Pass the color value as the first argument, and the desired transparency value as the second.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"For example, this v5 code uses the hiddentranspparameter to set the color of the plot to80transparency:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"In Pine v6, the same result can be achieved usingcolor.new():",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,"If you need to preserve the color inputs in the “Settings/Style” menu, you must ensure that every color that gets passed to everycolor.new()call is qualified as either “const” or “input”. If at least one of thesecolorvalues is calculated dynamically (like the code above), the color selector does not appear in the settings:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,You can learn more about why this happens and how to avoid ithere.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
The `transp` parameter isremoved,Next,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-6
Introduction,"This guide documents thechangesmade to Pine Script™ from v4 to v5.
It will guide you in the adaptation of existing Pine scripts to Pine
Script™ v5. See ourRelease notesfor a list of thenewfeatures in Pine Script™ v5.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Introduction,"The most frequent adaptations required to convert older scripts to v5
are:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
v4 to v5converter,"The Pine Editor includes a utility to automatically convert v4 scripts
to v5. To access it, open a script with//@version=4in it and select
the “Convert to v5” option in the “More” menu identified by three
dots at the top-right of the Editor’s pane:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
v4 to v5converter,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
v4 to v5converter,"Not all scripts can be automatically converted from v4 to v5. If you
want to convert the script manually or if your indicator returns a
compilation error after conversion, use the following sections to
determine how to complete the conversion. A list of some errors you can
encounter during the automatic conversion and how to fix them can be
found in theCommon script conversion errorssection of this guide.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functions andvariables,"For clarity and consistency, many built-in functions and variables were
renamed in v5. The inclusion of v4 function names in a new namespace is
the cause of most changes. For example, thesma()function in v4 is moved to theta.namespace in v5:ta.sma().
Remembering the new namespaces is not necessary; if you type the older
name of a function without its namespace in the Editor and press the
‘Auto-complete’ hotkey (Ctrl+Space, orCmdon MacOS), a popup
showing matching suggestions appears:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functions andvariables,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functions andvariables,"Not counting functions moved to new namespaces, only two functions have
been renamed:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functions andvariables,"The full list of renamed functions and variables can be found in theAll variable, function, and parameter name changessection of this guide.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functionparameters,"The parameter names of some built-in functions were changed to improve
the nomenclature. This has no bearing on most scripts, but if you used
these parameter names when calling functions, they will require
adaptation. For example, we have standardized all mentions:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functionparameters,"The full list of renamed function parameters can be found in theAll variable, function, and parameter name changessection of this guide.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed an `rsi()`overload,"In v4, thersi()function had two different overloads:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed an `rsi()`overload,"This caused a single built-in function to behave in two very different
ways, and it was difficult to distinguish which one applied because it
depended on the type of the second argument. As a result, a number of
indicators misused the function and were displaying incorrect results.
To avoid this, the second overload was removed in v5.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed an `rsi()`overload,"Theta.rsi()function in v5 only accepts a “simple int” argument for itslengthparameter. If your v4 code used the now deprecated overload of the
function with afloatsecond argument, you can replace the wholersi()call with the following formula, which is equivalent:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed an `rsi()`overload,"Note that when your v4 code used a “series int” value as the second
argument torsi(),
it was automatically cast to “series float” and the second overload of
the function was used. While this was syntactically correct, it most
probably didnotyield the result you expected. In v5,ta.rsi()requires a “simple int” for the argument tolength, which precludes
dynamic (or “series”) lengths. The reason for this is that RSI
calculations use theta.rma()moving average, which is similar tota.ema()in that it relies on a length-dependent recursive process using the
values of previous bars. This makes it impossible to achieve correct
results with a “series” length that could vary bar to bar.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed an `rsi()`overload,"If your v4 code used a length that was “const int”, “input int” or
“simple int”, no changes are required.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Reservedkeywords,"A number of words are reserved and cannot be used for variable or
function names. They are:catch,class,do,ellipse,in,is,polygon,range,return,struct,text,throw,try. If your
v4 indicator uses any of these, rename your variable or function for the
script to work in v5.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed `iff()` and`offset()`,Theiff()andoffset()functions have been removed. Code using theiff()function can be rewritten using the ternary operator:,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed `iff()` and`offset()`,"Note that the ternary operator is evaluated “lazily”; only the
required value is calculated (depending on the condition’s evaluation
totrueorfalse). This is different fromiff(),
which always evaluated both values but returned only the relevant one.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed `iff()` and`offset()`,"Some functions require evaluation on every bar to correctly calculate,
so you will need to make special provisions for these by pre-evaluating
them before the ternary:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Removed `iff()` and`offset()`,Theoffset()function was deprecated because the more readable[]operator is equivalent:,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Split of `input()` into severalfunctions,"The v4input()function was becoming crowded with a plethora of overloads and
parameters. We split its functionality into different functions to clear
that space and provide a more robust structure to accommodate the
additions planned for inputs. Each new function uses the name of theinput.*type of the v4input()call it replaces. E.g., there is now
a specializedinput.float()function replacing the v4input(1.0, type = input.float)call. Note
that you can still useinput(1.0)in v5, but because onlyinput.float()allows for parameters such asminval,maxval, etc., it is more
powerful. Also note thatinput.int()is the only specialized input function that does not use its equivalent
v4input.integername. Theinput.*constants have been removed
because they were used as arguments for thetypeparameter, which was
deprecated.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Split of `input()` into severalfunctions,"To convert, for example, a v4 script using an input of typeinput.symbol, theinput.symbol()function must be used in v5:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Split of `input()` into severalfunctions,"Theinput()function persists in v5, but in a simpler form, with less parameters. It
has the advantage of automatically detecting input types
“bool/color/int/float/string/source” from the argument used fordefval:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Some function parameters now require built-inarguments,"In v4, built-in constants such asplot.style_areaused as arguments
when calling Pine Script™ functions corresponded to pre-defined values
of a specific type. For example, the value ofbarmerge.lookahead_onwastrue, so you could usetrueinstead of the named constant when
supplying an argument to thelookaheadparameter in asecurity()function call. We found this to be a common source of confusion, which
caused unsuspecting programmers to produce code yielding unintended
results.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Some function parameters now require built-inarguments,"In v5, the use of correct built-in named constants as arguments to
function parameters requiring them is mandatory:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Some function parameters now require built-inarguments,"To convert your script from v4 to v5, make sure you use the correct
named built-in constants as function arguments.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Deprecated the `transp`parameter,"Thetransp=parameter used in the signature of many v4 plotting
functions was deprecated because it interfered with RGB functionality.
Transparency must now be specified along with the color as an argument
to parameters such ascolor,textcolor, etc. Thecolor.new()orcolor.rgb()functions will be needed in those cases to join a color and its
transparency.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Deprecated the `transp`parameter,"Note that in v4, thebgcolor()andfill()functions had an optionaltranspparameter that used a default value
of 90. This meant that the code below could display Bollinger Bands with
a semi-transparent fill between two bands and a semi-transparent
backround color where bands cross price, even though no argument is used
for thetranspparameter in itsbgcolor()andfill()calls:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Deprecated the `transp`parameter,"In v5 we need to explictly mention the 90 transparency with the color,
yielding:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Changed the default session days for `time()` and`time_close()`,"The default set of days forsessionstrings used in thetime()andtime_close()functions, and returned byinput.session(),
has changed from""23456""(Monday to Friday) to""1234567""(Sunday to
Saturday):",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Changed the default session days for `time()` and`time_close()`,"This change in behavior should not have much impact on scripts running
on conventional markets that are closed during weekends. If it is
important for you to ensure your session definitions preserve their v4
behavior in v5 code, add"":23456""to your session strings. See this
manual’s page onSessionsfor more information.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
`strategy.exit()` now must dosomething,"Gone are the days when thestrategy.exit()function was allowed to loiter. Now it must actually have an effect on
the strategy by using at least one of the following parameters:profit,limit,loss,stop, or one of the following pairs:trail_offsetcombined with eithertrail_priceortrail_points.
When uses ofstrategy.exit()not meeting these criteria trigger an error while converting a strategy
to v5, you can safely eliminate these lines, as they didn’t do anything
in your code anyway.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Invalid argument ‘style’/‘linestyle’ in ‘plot’/‘hline’call,"To make this work, you need to change the “int” arguments used for thestyleandlinestylearguments inplot()andhline()for built-in constants:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Invalid argument ‘style’/‘linestyle’ in ‘plot’/‘hline’call,See theSome function parameters now require built-in argumentssection of this guide for more information.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Undeclared identifier‘input.%input_name%’,"To fix this issue, remove theinput.*constants from your code:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Undeclared identifier‘input.%input_name%’,"See the User Manual’s page onInputs, and theSome function parameters now require built-in argumentssection of this guide for more information.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Invalid argument ‘when’ in ‘strategy.close’call,This is caused by a confusion betweenstrategy.entry()andstrategy.close().,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Invalid argument ‘when’ in ‘strategy.close’call,"The second parameter ofstrategy.close()iswhen, which expects a “bool” argument. In v4, it was allowed to
usestrategy.longan argument because it was a “bool”. With v5,
however, named built-in constants must be used as arguments, sostrategy.longis no longer allowed as an argument to thewhenparameter.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Invalid argument ‘when’ in ‘strategy.close’call,"Thestrategy.close(""Short"", strategy.long)call in this code is
equivalent tostrategy.close(""Short""), which is what must be used in
v5:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Invalid argument ‘when’ in ‘strategy.close’call,See theSome function parameters now require built-in argumentssection of this guide for more information.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Cannot call ‘input.int’ with argument ‘minval’=‘%value%‘. An argument of ‘literal float’ type was used but a ‘const int’ isexpected,"In v4, it was possible to pass a “float” argument tominvalwhen an
“int” value was being input. This is no longer possible in v5; “int”
values are required for “int” inputs:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Cannot call ‘input.int’ with argument ‘minval’=‘%value%‘. An argument of ‘literal float’ type was used but a ‘const int’ isexpected,"See the User Manual’s page onInputs, and theSome function parameters now require built-in argumentssection of this guide for more information.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functions andparameters,Previous,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
Renamed functions andparameters,Next,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-5
To Pine Script™ version4,This is a guide to converting Pine Script™ code from@version=3to@version=4.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
Converter,"The Pine Editor comes with a utility to automatically convert v3
indicators and strategies to v4. To access it, open a script with//@version=3in it and select theConvert to v4option in theMoredropdown menu:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
Converter,,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
Converter,"Not all scripts can be automatically converted from v3 to v4. If you
want to convert the script manually or if your indicator returns a
compilation error after conversion, consult the guide below for more
information.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
"Renaming of built-in constants, variables, andfunctions","In Pine Script™ v4 the following built-in constants, variables, and
functions were renamed:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
"Renaming of built-in constants, variables, andfunctions","The reason behind renaming all of the above was to structure the
standard language tools and make working with code easier. New names are
grouped according to assignments under common prefixes. For example, you
will see a list with all available color constants if you type ‘color’
in the editor and press Ctrl + Space.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
Explicit variable typedeclaration,"In Pine Script™ v4 it’s no longer possible to create variables with an
unknown data type at the time of their declaration. This was done to
avoid a number of issues that arise when the variable type changes after
its initialization with the na value. From now on, you need to
explicitly specify their type using keywords or type functions (for
example,float) when declaring variables with the na value:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
Explicit variable typedeclaration,Previous,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
Explicit variable typedeclaration,Next,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-4
To Pine Script™ version3,This document helps to migrate Pine Script™ code from@version=2to@version=3.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Default behaviour of security function haschanged,"Let’s look at the simplesecurityfunction use case. Add this
indicator on an intraday chart:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Default behaviour of security function haschanged,"This indicator is calculated based on historical data and looks somewhatinto the future. At the first bar of every session an indicator plots
the high price of the entire day. This could be useful in some cases for
analysis, but doesn’t work for backtesting strategies.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Default behaviour of security function haschanged,"We worked on this and made changes in Pine Script™ version 3. If this
indicator is compiled with//@version=3directive, we get a completely
different picture:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Default behaviour of security function haschanged,The old behaviour is still available though. We added a parameter to thesecurityfunction (the fifth one) calledlookahead.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Default behaviour of security function haschanged,"It can take on the form of two different values:barmerge.lookahead_off(and this is the default for Pine Script™
version 3) orbarmerge.lookahead_on(which is the default for Pine
Script™ version 2).",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Self-referenced variables areremoved,"Pine Script™ version 2 pieces of code, containing a self-referencing
variable:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Self-referenced variables areremoved,"Compiling this piece of code with Pine Script™ version 3 will give you
anUndeclared identifier 's'error. It should be rewritten as:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Self-referenced variables areremoved,"sis now amutable variablethat is initialized at line 3. At line 3
the initial value gives the Pine Script™ compiler the information about
the variable type. It’s a float in this example.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Self-referenced variables areremoved,In some cases you may initialize that mutable variable (likes) with anavalue. But in complex cases that won’t work.,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Forward-referenced variables areremoved,"In this examplefis a forward-referencing variable, because it’s
referenced at line 3 before it was declared and initialized. In Pine
Script™ version 3 this will give you an errorUndeclared identifier 'f'. This example should be rewritten in Pine
Script™ version 3 as follows:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Resolving a problem with a mutable variable in a securityexpression,"When you migrate script to version 3 it’s possible that after removing
self-referencing and forward-referencing variables the Pine Script™
compiler will give you an error:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Resolving a problem with a mutable variable in a securityexpression,Cannot use mutable variable as an argument for security function!,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Resolving a problem with a mutable variable in a securityexpression,"This limitation exists since mutable variables were introduced in Pine
Script™, i.e., in version 2. It can be resolved as before: wrap the code
with a mutable variable in a function:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Math operations with booleans areforbidden,"In Pine Script™ v2 there were rules of implicit conversion of booleans
into numeric types. In v3 this is forbidden. There is a conversion of
numeric types into booleans instead (0 andnavalues arefalse, all
the other numbers aretrue). Example (In v2 this code compiles fine):",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Math operations with booleans areforbidden,"Variabless,s1ands2are ofbooltype. But at line 6 we add
three of them and store the result in a variablesum.sumis a
number, since we cannot add booleans. Booleans were implicitly converted
to numbers (truevalues to1.0andfalseto0.0) and then they
were added.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Math operations with booleans areforbidden,"This approach leads to unintentional errors in more complicated scripts.
That’s why we no longer allow implicit conversion of booleans to
numbers.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Math operations with booleans areforbidden,"If you try to compile this example as a Pine Script™ v3 code, you’ll
get an error:Cannot call `operator +` with arguments (series__bool, series__bool); <...>It means that you cannot use the addition operator with boolean values.
To make this example work in Pine Script™ v3 you can do the following:",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Math operations with booleans areforbidden,"Functionbton(abbreviation of boolean-to-number) explicitly converts
any boolean value to a number if you really need this.",https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Math operations with booleans areforbidden,Previous,https://www.tradingview.com/pine-script-docs/migration-guides/to-pine-version-3
Externalresources,Previous,https://www.tradingview.com/pine-script-docs/where-can-i-get-more-information
